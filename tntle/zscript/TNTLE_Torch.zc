// Copyright 2020 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// Actors with minimal ticking. Useful for completely non-interactive stuff
//
//===========================================================================

class TNTLEDietActor : Actor
{
	bool ticked;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void Tick()
	{
		if (!ticked)
		{
			Super.Tick();
			ticked = true;
			return;
		}

		if (!bNoTimeFreeze && isFrozen()) return;
		if (tics != -1)
		{
			if (--tics <= 0)
			{
				if (!SetState(curstate.NextState)) return;
			}
		}
	}
}

class TNTLEDietActorWithVel : TNTLEDietActor
{
	override void Tick(void)
	{
		SetXYZ(Vec3Offset(Vel.X, Vel.Y, Vel.Z));
		Super.Tick();
	}
}

//===========================================================================
//
// Common code for fire effects
//
//===========================================================================

mixin class TNTLEFireMixin
{
	bool fadedIn;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		RenderStyle "Add";
		Alpha 0;
		+ROLLSPRITE
		+ROLLCENTER
		+BRIGHT
		+FORCEXYBILLBOARD
		+NOINTERACTION
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	SpawnLoop:
		"####" "#" 0
		{
			bSpriteFlip = RandomPick(false, true);
			A_SetRoll(frandom(0.0, 360.0));
		}
		"####" "#" 1
		{
			int rollDir = bSpriteFlip ? -1 : 1;
			double rollSpeed = 2.33 * rollDir;
			A_SetRoll(Roll + rollSpeed, SPF_INTERPOLATE);

			if (!fadedIn)
			{
				if (Alpha < 0.5)
				{
					A_FadeIn(0.1);
				}
				else
				{
					fadedIn = true;
				}
			}

			if (fadedIn)
			{
				A_SetScale(Scale.X * 0.98);
				A_FadeOut(0.025);
			}
		}
		Goto SpawnLoop + 1;
	}
}

class TNTLETorch : RedTorch replaces RedTorch
{
	Default
	{
		Radius 10;
		Height 67;
		ProjectilePassHeight -16;
		+SOLID
	}

	States
	{
	Spawn:
		TBLX A 0 NoDelay
		{
			A_SpawnItemEx("TNTLETallTorchLensFlare", 0, 0, 62.0);
		}
		TBLX A 1 A_SpawnItemEx("TNTLETorchFlame", 0, 0, frandom(60.0, 62.0), 0, 0, frandom(1.0, 2.5));
		Goto Spawn + 1;
	}
}

class TNTLETorchFlame : TNTLEDietActorWithVel
{
	mixin TNTLEFireMixin;

	Default
	{
		DistanceCheck "TNTLE_lod";
		Scale 0.3;
	}

	States
	{
	Spawn:
		AFNO A 0;
		Goto SpawnLoop;
	}
}

class TNTLETallTorchLensFlare : TNTLEDietActor
{
	Default
	{
		DistanceCheck "TNTLE_lod";
		RenderStyle "Add";
		Alpha 0.8;
		Scale 0.5;
		+NOINTERACTION
	}

	States
	{
	Spawn:
		FLRE A -1 Bright Light("BIGREDTORCH");
		Stop;
	}
}

class TNTLETorchG : GreenTorch replaces GreenTorch
{
	Default
	{
		Radius 10;
		Height 67;
		ProjectilePassHeight -16;
		+SOLID
	}

	States
	{
	Spawn:
		TBLX A 0 NoDelay
		{
			A_SpawnItemEx("TNTLETallTorchLensFlareG", 0, 0, 62.0);
		}
		TBLX A 1 A_SpawnItemEx("TNTLETorchFlameG", 0, 0, frandom(60.0, 62.0), 0, 0, frandom(1.0, 2.5));
		Goto Spawn + 1;
	}
}

class TNTLETorchFlameG : TNTLEDietActorWithVel
{
	mixin TNTLEFireMixin;

	Default
	{
		DistanceCheck "TNTLE_lod";
		Scale 0.3;
	}

	States
	{
	Spawn:
		AFNG A 0;
		Goto SpawnLoop;
	}
}

class TNTLETallTorchLensFlareG : TNTLEDietActor
{
	Default
	{
		DistanceCheck "TNTLE_lod";
		RenderStyle "Add";
		Alpha 0.8;
		Scale 0.5;
		+NOINTERACTION
	}

	States
	{
	Spawn:
		FLRE B -1 Bright Light("BIGGREENTORCH");
		Stop;
	}
}

class TNTLETorchB : BlueTorch replaces BlueTorch
{
	Default
	{
		Radius 10;
		Height 67;
		ProjectilePassHeight -16;
		+SOLID
	}

	States
	{
	Spawn:
		TBLX A 0 NoDelay
		{
			A_SpawnItemEx("TNTLETallTorchLensFlareB", 0, 0, 62.0);
		}
		TBLX A 1 A_SpawnItemEx("TNTLETorchFlameB", 0, 0, frandom(60.0, 62.0), 0, 0, frandom(1.0, 2.5));
		Goto Spawn + 1;
	}
}

class TNTLETorchFlameB : TNTLEDietActorWithVel
{
	mixin TNTLEFireMixin;

	Default
	{
		DistanceCheck "TNTLE_lod";
		Scale 0.3;
	}

	States
	{
	Spawn:
		AFNB A 0;
		Goto SpawnLoop;
	}
}

class TNTLETallTorchLensFlareB : TNTLEDietActor
{
	Default
	{
		DistanceCheck "TNTLE_lod";
		RenderStyle "Add";
		Alpha 0.8;
		Scale 0.5;
		+NOINTERACTION
	}

	States
	{
	Spawn:
		FLRE C -1 Bright Light("BIGBLUETORCH");
		Stop;
	}
}

//Experimental yet
mixin class TNTLEFireMixinShort
{
	bool fadedIn;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		RenderStyle "Add";
		Alpha 0;
		+ROLLSPRITE
		+ROLLCENTER
		+BRIGHT
		+FORCEXYBILLBOARD
		+NOINTERACTION
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	SpawnLoop:
		"####" "#" 0
		{
			bSpriteFlip = RandomPick(false, true);
			A_SetRoll(frandom(0.0, 360.0));
		}
		"####" "#" 1
		{
			int rollDir = bSpriteFlip ? -1 : 1;
			double rollSpeed = 2.33 * rollDir;
			A_SetRoll(Roll + rollSpeed, SPF_INTERPOLATE);

			if (!fadedIn)
			{
				if (Alpha < 0.5)
				{
					A_FadeIn(0.1);
				}
				else
				{
					fadedIn = true;
				}
			}

			if (fadedIn)
			{
				A_SetScale(Scale.X * 0.58);
				A_FadeOut(0.025);
			}
		}
		Goto SpawnLoop + 1;
	}
}

class TNTLEShortRedTorch : ShortRedTorch replaces ShortRedTorch
{
	Default
	{
		Radius 8;
		Height 32;
		ProjectilePassHeight -16;
		+SOLID
	}

	States
	{
	Spawn:
		SMRX A 0 NoDelay
		{
			A_SpawnItemEx("TNTLEShortTorchLensFlare", 0, 0, 32.0);
		}
		SMRX A 1 A_SpawnItemEx("TNTLETorchFlameShort", 0, 0, frandom(30.0, 32.0), 0, 0, frandom(1.0, 2.5));
		Goto Spawn + 1;
	}
}

class TNTLETorchFlameShort : TNTLEDietActorWithVel //necessary for diff mixin
{
	mixin TNTLEFireMixinShort;

	Default
	{
		DistanceCheck "TNTLE_lod";
		Scale 0.3;
	}

	States
	{
	Spawn:
		AFNO A 0;
		Goto SpawnLoop;
	}
}

class TNTLEShortTorchLensFlare : TNTLEDietActor
{
	Default
	{
		DistanceCheck "TNTLE_lod";
		RenderStyle "Add";
		Alpha 0.8;
		Scale 0.25;
		+NOINTERACTION
	}

	States
	{
	Spawn:
		FLRE A -1 Bright Light("SMALLREDTORCH");
		Stop;
	}
}

class TNTLEShortGreenTorch : ShortGreenTorch replaces ShortGreenTorch
{
	Default
	{
		Radius 8;
		Height 32;
		ProjectilePassHeight -16;
		+SOLID
	}

	States
	{
	Spawn:
		SMRX A 0 NoDelay
		{
			A_SpawnItemEx("TNTLEShortTorchLensFlareG", 0, 0, 32.0);
		}
		SMRX A 1 A_SpawnItemEx("TNTLETorchFlameShortG", 0, 0, frandom(30.0, 32.0), 0, 0, frandom(1.0, 2.5));
		Goto Spawn + 1;
	}
}

class TNTLETorchFlameShortG : TNTLEDietActorWithVel //necessary for diff mixin
{
	mixin TNTLEFireMixinShort;

	Default
	{
		DistanceCheck "TNTLE_lod";
		Scale 0.3;
	}

	States
	{
	Spawn:
		AFNG A 0;
		Goto SpawnLoop;
	}
}

class TNTLEShortTorchLensFlareG : TNTLEDietActor
{
	Default
	{
		DistanceCheck "TNTLE_lod";
		RenderStyle "Add";
		Alpha 0.8;
		Scale 0.25;
		+NOINTERACTION
	}

	States
	{
	Spawn:
		FLRE B -1 Bright Light("SMALLGREENTORCH");
		Stop;
	}
}

class TNTLEShortBlueTorch : ShortBlueTorch replaces ShortBlueTorch
{
	Default
	{
		Radius 8;
		Height 32;
		ProjectilePassHeight -16;
		+SOLID
	}

	States
	{
	Spawn:
		SMRX A 0 NoDelay
		{
			A_SpawnItemEx("TNTLEShortTorchLensFlareB", 0, 0, 32.0);
		}
		SMRX A 1 A_SpawnItemEx("TNTLETorchFlameShortB", 0, 0, frandom(30.0, 32.0), 0, 0, frandom(1.0, 2.5));
		Goto Spawn + 1;
	}
}

class TNTLETorchFlameShortB : TNTLEDietActorWithVel //necessary for diff mixin
{
	mixin TNTLEFireMixinShort;

	Default
	{
		DistanceCheck "TNTLE_lod";
		Scale 0.3;
	}

	States
	{
	Spawn:
		AFNB A 0;
		Goto SpawnLoop;
	}
}

class TNTLEShortTorchLensFlareB : TNTLEDietActor
{
	Default
	{
		DistanceCheck "TNTLE_lod";
		RenderStyle "Add";
		Alpha 0.8;
		Scale 0.25;
		+NOINTERACTION
	}

	States
	{
	Spawn:
		FLRE C -1 Bright Light("SMALLBLUETORCH");
		Stop;
	}
}