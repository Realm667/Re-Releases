/*
 * Copyright (c) 2007-2024 Nash Muhandes, Ozymandias81, Tormentor667
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
**/

class TNTRemPlayer : DoomPlayer
{
	const FOOTSTEP_COUNTER_MAX = 85.; //straight from TCOTD2 Remaster
	double footstepCounter;

	Default
	{
		Player.WeaponSlot 1, "Fist", "Chainsaw";
		Player.WeaponSlot 2, "NewPistol";
		Player.WeaponSlot 3, "NewShotgun", "NewSuperShotgun";
		Player.WeaponSlot 4, "NewChaingun";
		Player.WeaponSlot 5, "RocketLauncher";
		Player.WeaponSlot 6, "PlasmaRifle";
		Player.WeaponSlot 7, "BFG9000";
		Player.StartItem "NewPistol";
		Player.StartItem "Fist";
		Player.StartItem "Clip", 50;
	}
	
	override void Tick(void)
	{
		if (!player || !player.mo || player.mo != self)
		{
			Super.Tick();
			return;
		}

		Super.Tick();
		UpdateFootsteps();
	}
	
	private sound GetFootstepSound(void)
	{
		// default sound
		Sound ret = "floor/default";

		// use sound from terrain, if it exists
		let tr = GetFloorTerrain();
		if (tr && tr.LeftStepSound)
		{
			ret = tr.LeftStepSound;
		}

		return ret;
	}

	void UpdateFootsteps(void)
	{
		// immediately play a footstep sound if standing still
		if (player.onground && Vel.XY.Length() ~== 0)
		{
			footstepCounter = FOOTSTEP_COUNTER_MAX;
			return;
		}

		// no need to play footsteps when in deep water
		if (WaterLevel > 1)
			return;

		bool shouldPlayFootstepSound = false;

		// get character velocity
		double aVel = TNTLEGameplayStatics.GetVelocity(self, xyOnly: true);

		// don't bother if moving too slow
		if (aVel < 0.1)
			return;

		// set the sound volume
		double vol = min(aVel * 0.1, 1.0);
		//vol *= 0.7;
		if (CheckLocalView())
			vol *= CVar.GetCVar("TNTLE_footstepvolume", player).GetFloat();
		vol = clamp(vol, 0.0, 1.0);

		// clamp the velocity value to pleasing values
		// yay magic numbers!
		aVel = clamp(aVel, 2.24, 7.35);

		// add to counter if moving, decrease it otherwise
		if (aVel < 0.01)
			footstepCounter *= 0.5;
		else
			footstepCounter += aVel;

		// play the footstep sound
		if (footstepCounter > FOOTSTEP_COUNTER_MAX)
		{
			shouldPlayFootstepSound = true;
		}

		if (shouldPlayFootstepSound)
		{
			// TO DO: is Z offset portal aware or not?
			Vector3 sPos =
			(
				0.0,
				0.0,
				TNTLEFootstep.GetZOffset(self)
			);
			let fs = TNTLEFootstep(self.Spawn("TNTLEFootstep", self.Pos + sPos, NO_REPLACE));
			if (fs)
			{
				fs.pmo = self;
				fs.vol = vol;
				fs.snd = GetFootstepSound();
			}

			// reset footstep counter
			footstepCounter = 0;
		}
	}
}

class isIntro : Inventory //prevent Motion Blur working over cutscenes if we move mouse, give it to players at start and remove it at level end, or before a cutscene (remove and give again when done)
{
	Default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
	}
}