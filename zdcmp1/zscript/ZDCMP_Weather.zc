/*
* TCOTD2 Game Code
* Copyright (C) 2020 - 2023  Nash Muhandes
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//===========================================================================
//
// TCOTDWeatherHandler
// This is a stripped down version of the precipitation system from Bumi, an
// all-encompassing real-time weather and time cycle solution for GZDoom by
// Nash Muhandes.
// Bumi is (C) 2008 - 2023 Nash Muhandes
//
//===========================================================================

class ZDCMP1WeatherHandler : EventHandler //nifty tweaked version elaborated for ZDCMP1 by Ozy81
{
	const PARTICLES_RADIUS = 1000.0;
	const PARTICLES_HEIGHT = 400.0;
	const EMBERS_HEIGHT = 8.0;

	FSpawnParticleParams lava;
	FSpawnParticleParams nuke;

	override void WorldTick(void)
	{
		SpawnLavaActors(); //lava floors, shortnamed
		SpawnNukeActors(); //nukage floors, shortnamed
	}
	
	void SpawnLavaActors(void)
	{
		if (Level.IsFrozen())
			return;

		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (playeringame[i] && players[i].mo && players[i].mo.player)
			{
				if (gameaction == ga_savegame)
					continue;

				if (!CVar.GetCVar("ZDCMP1_weatherfx", players[consoleplayer]).GetBool())
					continue;

				Actor cam = players[i].camera;

				int density = 6;
				while (density--)
				{
					double spx = frandom[rnd_SpawnPrecip](-PARTICLES_RADIUS, PARTICLES_RADIUS);
					double spy = frandom[rnd_SpawnPrecip](-PARTICLES_RADIUS, PARTICLES_RADIUS);
					Vector3 sPos = cam.Vec3Offset(spx, spy, EMBERS_HEIGHT);

					let lava = cam.Spawn("ZDCMP1LavaParticle", sPos, NO_REPLACE);
					if (lava)
					{
						lava.SetZ(min(lava.FloorZ, sPos.Z));
						lava.Tracer = cam;
						lava.Vel.X = frandom[rnd_SpawnPrecip](-0.8, 0.8);
						lava.Vel.Y = frandom[rnd_SpawnPrecip](-0.8, 0.8);
						lava.Vel.Z = frandom[rnd_SpawnPrecip](4.0, 1.5);
					}
				}
			}
		}
	}
	
	void SpawnNukeActors(void)
	{
		if (Level.IsFrozen())
			return;

		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (playeringame[i] && players[i].mo && players[i].mo.player)
			{
				if (gameaction == ga_savegame)
					continue;

				if (!CVar.GetCVar("ZDCMP1_weatherfx", players[consoleplayer]).GetBool())
					continue;

				Actor cam = players[i].camera;

				int density = 6;
				while (density--)
				{
					double spx = frandom[rnd_SpawnPrecip](-PARTICLES_RADIUS, PARTICLES_RADIUS);
					double spy = frandom[rnd_SpawnPrecip](-PARTICLES_RADIUS, PARTICLES_RADIUS);
					Vector3 sPos = cam.Vec3Offset(spx, spy, EMBERS_HEIGHT);

					let nuke = cam.Spawn("ZDCMP1NukeParticle", sPos, NO_REPLACE);
					if (nuke)
					{
						nuke.SetZ(min(nuke.FloorZ, sPos.Z));
						nuke.Tracer = cam;
						nuke.Vel.X = frandom[rnd_SpawnPrecip](-0.8, 0.8);
						nuke.Vel.Y = frandom[rnd_SpawnPrecip](-0.8, 0.8);
						nuke.Vel.Z = frandom[rnd_SpawnPrecip](4.0, 1.5);
					}
				}
			}
		}
	}
}

mixin Class ZDCMP1Particle
{
	const MAX_ALPHA = 0.8;
	int fadeState;
	int life;
	bool ticked;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		Height 2;
		Radius 1;
		RenderStyle "STYLE_Add";
		Alpha 1;
		Scale 0.025;
		+DONTSPLASH
		+FORCEXYBILLBOARD
		+NOGRAVITY
		+NOINTERACTION
		+NOSAVEGAME
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================
	
	override void Tick(void)
	{
		if (!ticked)
		{
			Super.Tick();
			ticked = true;
		}

		if (fadeState == 0)
		{
			if (Alpha < MAX_ALPHA)
				Alpha += 0.007;
			else
				fadeState = 1;
		}
		else if (fadeState == 1)
		{
			if (life < 100)
				life++;
			else
				fadeState = 2;
		}
		else if (fadeState == 2)
		{
			if (Alpha > 0)
				Alpha -= 0.1;
			else
				Destroy();
		}

		SetXYZ(Vec3Offset(Vel.X, Vel.Y, Vel.Z));
	}
}

class ZDCMP1LavaParticle : Actor
{
	mixin ZDCMP1Particle;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void PostBeginPlay(void)
	{
		bool isOnLava = floorpic != TexMan.CheckForTexture("QLAVA", TexMan.Type_Any); //to edit yet
		if (isOnLava)
		{
			Destroy();
			return;
		}
		WorldOffset = (0, 0, 8.);
		Super.PostBeginPlay();
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
		Spawn:
			EMBR A -1;
			Stop;
	}
}

class ZDCMP1NukeParticle : Actor
{
	mixin ZDCMP1Particle;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void PostBeginPlay(void)
	{
		bool isOnNukage = floorpic != TexMan.CheckForTexture("NUKAGEW", TexMan.Type_Any); //to edit yet
		if (isOnNukage)
		{
			Destroy();
			return;
		}
		WorldOffset = (0, 0, 8.);
		Super.PostBeginPlay();
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
		Spawn:
			EMGR A -1;
			Stop;
	}
}