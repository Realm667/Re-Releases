/*
* TCOTD2 Game Code
* Copyright (C) 2020 - 2023  Nash Muhandes
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//===========================================================================
//
// TCOTDWeatherHandler
// This is a stripped down version of the precipitation system from Bumi, an
// all-encompassing real-time weather and time cycle solution for GZDoom by
// Nash Muhandes.
// Bumi is (C) 2008 - 2023 Nash Muhandes
//
//===========================================================================

class ZPackWeatherHandler : EventHandler
{
	const PARTICLES_RADIUS = 1000.0;
	const PARTICLES_HEIGHT = 400.0;

	FSpawnParticleParams snow;

	override void WorldTick(void)
	{
		SpawnRainActors();
		SpawnSnowActors();
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void SpawnRainActors(void)
	{
		if (Level.IsFrozen())
			return;

		if (Level.LevelNum!=8 && Level.LevelNum!=9)
			return;

		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (playeringame[i] && players[i].mo && players[i].mo.player)
			{
				if (gameaction == ga_savegame)
					continue;

				if (!CVar.GetCVar("ZPAK_weatherfx", players[consoleplayer]).GetBool())
					continue;

				Actor cam = players[i].camera;

				int density = 6;
				while (density--)
				{
					double spx = frandom[rnd_SpawnPrecip](-PARTICLES_RADIUS, PARTICLES_RADIUS);
					double spy = frandom[rnd_SpawnPrecip](-PARTICLES_RADIUS, PARTICLES_RADIUS);
					Vector3 sPos = cam.Vec3Offset(spx, spy, PARTICLES_HEIGHT);

					let rain = cam.Spawn("Raindrop", sPos, NO_REPLACE);
					if (rain)
					{
						rain.SetZ(min(rain.CeilingZ, sPos.Z));
						rain.Tracer = cam;
					}
				}
			}
		}
	}
	
	void SpawnSnowActors(void)
	{
		if (Level.IsFrozen())
			return;

		if (Level.LevelNum!=6)
			return;

		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (playeringame[i] && players[i].mo && players[i].mo.player)
			{
				if (gameaction == ga_savegame)
					continue;

				if (!CVar.GetCVar("ZPAK_weatherfx", players[consoleplayer]).GetBool())
					continue;

				Actor cam = players[i].camera;

				int density = 6;
				while (density--)
				{
					double spx = frandom[rnd_SpawnPrecip](-PARTICLES_RADIUS, PARTICLES_RADIUS);
					double spy = frandom[rnd_SpawnPrecip](-PARTICLES_RADIUS, PARTICLES_RADIUS);
					Vector3 sPos = cam.Vec3Offset(spx, spy, PARTICLES_HEIGHT);

					let snow = cam.Spawn("ZPackSnowParticle", sPos, NO_REPLACE);
					if (snow)
					{
						snow.SetZ(min(snow.CeilingZ, sPos.Z));
						snow.Tracer = cam;
						snow.Vel.X = frandom[rnd_SpawnPrecip](-0.8, 0.8);
						snow.Vel.Y = frandom[rnd_SpawnPrecip](-0.8, 0.8);
						snow.Vel.Z = frandom[rnd_SpawnPrecip](-4.0, -1.5);
					}
				}
			}
		}
	}
}

//===========================================================================
//
// TCOTDSnowParticle
// This is a stripped down version of the precipitation system from Bumi, an
// all-encompassing real-time weather and time cycle solution for GZDoom by
// Nash Muhandes.
// Bumi is (C) 2008 - 2023 Nash Muhandes
//
//===========================================================================

class ZPackSnowParticle : Actor
{
	bool ffc;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		RenderStyle "STYLE_Translucent";
		Alpha 0;
		Scale 0.6;
		+NOINTERACTION
		+DONTSPLASH
		+FORCEXYBILLBOARD
		+INVISIBLEINMIRRORS
		+NOSAVEGAME
		-SOLID
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void PostBeginPlay(void)
	{
		bool isIndoors = ceilingpic != skyflatnum;
		bool isNotCPlayer = (Tracer && !Tracer.CheckLocalView(consoleplayer));
		if (isIndoors || isNotCPlayer)
		{
			Destroy();
			return;
		}
		WorldOffset = (0, 0, 24.);
		Super.PostBeginPlay();
	}

	override void Tick(void)
	{
		UpdateWaterLevel();

		if (Pos.Z <= FloorZ || WaterLevel >= 3)
		{
			Destroy();
			return;
		}

		if (Vel != (0, 0, 0))
			SetXYZ(Vec3Offset(Vel.X, Vel.Y, Vel.Z));

		if (tics == -1)
			return;
		else if (--tics <= 0)
			SetState(CurState.NextState);
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		TNT1 A 1;
		TNT1 A 1
		{
			if (!Level.IsPointInLevel(Pos))
				Destroy();
			FindFloorCeiling();
			return ResolveState(NULL);
		}
	Spawn1:
		SNOW A 1
		{
			A_FadeIn(0.04);
			if (Alpha >= 0.75)
				return ResolveState("Spawn2");
			return ResolveState(NULL);
		}
		Loop;
	Spawn2:
		SNOW A 1
		{
			if (GetAge() > 175)
				Destroy();
		}
		Loop;
	}
}

Class Raindrop : ParticleBase
{
	Default
	{
		DistanceCheck "ZPAK_Lod";
		Speed 8;
		Radius 1;
		Height 2;
		RenderStyle "STYLE_Add";
		Alpha 0.4;
		PROJECTILE;
		+NOBLOCKMAP
		+SPAWNCEILING
	}

	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 ThrustThingZ(0, Random(70, 80), 1, 1);
		RAIN A 1;
		Loop;
	Death:
		RAIN BCDE 2;
		Stop;
	}
}