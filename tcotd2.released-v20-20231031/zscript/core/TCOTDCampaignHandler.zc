/*
* TCOTD2 Game Code
* Copyright (C) 2020 - 2023  Nash Muhandes
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//===========================================================================
//
// TCOTDCampaignHandler
//
//===========================================================================

class TCOTDCampaignHandler : EventHandler
{
	// a reference to the campaign object MUST always exist!
	TCOTDCampaign campaign;

	// last checkpoint touched
	TCOTDCoopCheckpoint checkpoint;

	int survivalRestartCounter;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void NewGame(void)
	{
		int seed = TCOTDGameplayStatics.SeedFromLevelChecksum();
		SetRandomSeed[rnd_DocM](seed);
		SetRandomSeed[rnd_DocF](seed);
		SetRandomSeed[rnd_FogCloudSpawn](seed);

		CreateCampaign();
		GetCampaign();
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void WorldLoaded(WorldEvent e)
	{
		//TCOTDGameplayStatics.SetupSaveRules();

		if (!campaign)
			GetCampaign();

		// came from a failed survival run
		if (campaign.GetSurvivalFailed())
		{
			campaign.SetSurvivalFailed(false);
			campaign.SetSurvivalLives(tcotd2_survival_lives);
		}
	}

	override void WorldTick(void)
	{
		campaign.Tick();
		TickSurvival();
	}
}

class ns : Inventory { CVar a; }
extend class TCOTDCampaignHandler
{
	//===========================================================================
	//
	//
	//
	//===========================================================================

	void CreateCampaign(void)
	{
		if (!campaign)
		{
			ThinkerIterator it = ThinkerIterator.Create("TCOTDCampaign", Thinker.STAT_STATIC);
			let p = TCOTDCampaign(it.Next());
			if (!p)
			{
				//Console.Printf("Creating a new campaign object...");
				campaign = new("TCOTDCampaign").Init();
			}
		}
	}

	void GetCampaign(void)
	{
		if (!campaign)
		{
			campaign = TCOTDCampaign.GetInstance();
		}

		if (!campaign)
		{
			ThrowAbortException("TCOTDCampaignHandler::GetCampaign could not find a campaign object");
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void TickSurvival(void)
	{
		if (!multiplayer)
			return;

		if (!campaign)
		{
			ThrowAbortException("TickSurvival() can't find campaign object");
		}

		if (TCOTDGameplayStatics.IsCoop() && tcotd2_survival)
		{
			Array<TCOTDPlayer> allPlayers;
			allPlayers.Clear();

			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (playeringame[i])
				{
					allPlayers.Push(TCOTDPlayer(players[i].mo));
				}
			}

			int playerCount = allPlayers.Size();
			int deadPlayers = 0;

			if (playerCount > 0)
			{
				for (int i = 0; i < playerCount; i++)
				{
					if (allPlayers[i].player.health <= 0)
					{
						deadPlayers++;
					}
				}
			}

			if (deadPlayers == playerCount)
			{
				if (!campaign.GetSurvivalFailed())
				{
					survivalRestartCounter = SURVIVAL_RESPAWN_SECONDS;
					campaign.SetSurvivalFailed(true);
				}
			}

			if (campaign.GetSurvivalFailed())
			{
				if (Level.maptime % Thinker.TICRATE == 0)
				{
					String txt = String.Format(StringTable.Localize("$SURVIVAL_DEAD"), survivalRestartCounter);
					Console.Printf(txt);
					survivalRestartCounter--;
				}

				if (survivalRestartCounter <= -1)
				{
					// reset all players' items
					for (int i = 0; i < MAXPLAYERS; i++)
					{
						if (playeringame[i])
						{
							let pmo = TCOTDPlayer(players[i].mo);
							if (pmo)
							{
								pmo.ClearInventory();
								pmo.GiveDefaultInventory();
							}
						}
					}

					survivalRestartCounter = 0;
					int flags = CHANGELEVEL_NOINTERMISSION;
					Level.ChangeLevel(Level.MapName, flags: flags, skill: -1);
				}
			}
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	static void UpdateCheckpoint(TCOTDCoopCheckpoint cp, TCOTDPlayer pmo)
	{
		if (!cp || !pmo)
			return;

		let eh = TCOTDCampaignHandler(TCOTDCampaignHandler.Find("TCOTDCampaignHandler"));
		if (eh)
		{
			String txt = String.Format(StringTable.Localize("$CHECKPOINT_ACTIVATED"), pmo.player.GetUserName());
			Console.MidPrint(NULL, txt);
			eh.checkpoint = cp;
		}
	}
}
