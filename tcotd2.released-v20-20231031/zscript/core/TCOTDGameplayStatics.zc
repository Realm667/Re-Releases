/*
* TCOTD2 Game Code
* Copyright (C) 2020 - 2023  Nash Muhandes
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//===========================================================================
//
// TCOTDGameplayStatics
//
//===========================================================================

class TCOTDGameplayStatics play
{
	static bool IsOnFloor(Actor self)
	{
		if (self is "TCOTDPlayer")
			return TCOTDPlayer(self).player.onground;
		return self.Pos.Z <= self.FloorZ || self.bOnMObj || self.bMBFBouncer;
	}

	static bool IsPoisoned(Actor self)
	{
		return !!self.FindInventory("TCOTDPoisonAilment");
	}

	static bool IsCrouching(TCOTDPlayer self)
	{
		if (!self.player)
			return false;
		double ch = double((self.player.mo.ViewHeight / 2));
		return self.GetCameraHeight() <= ch;
	}

	static double GetVelocity(Actor self, bool xyOnly = false)
	{
		if (xyOnly)
			return self.Vel.XY.Length();
		return self.Vel.Length();
	}

	static int GetAttackDamage (double baseDamage)
	{
		return int(baseDamage * frandom[rnd_AttackDamage](0.85, 1.15));
	}

	static void DestroyActors(class<Actor> cls)
	{
		ThinkerIterator it = ThinkerIterator.Create(cls);
		Actor mo;
		while (mo = Actor(it.Next()))
		{
			mo.Destroy();
		}
	}

	static void GiveItemToAllPlayers(class<Inventory> cls)
	{
		if (!cls)
			return;

		if (!TCOTDGameplayStatics.IsCoop())
			return;


		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (playeringame[i] && players[i].mo && !players[i].mo.CountInv(cls))
				players[i].mo.A_GiveInventory(cls, 1);
		}
	}

	static void TakeItemFromAllPlayers(String clsName)
	{
		class<Inventory> cls = clsName;
		if (!cls)
			return;

		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (playeringame[i] && players[i].mo && players[i].mo.CountInv(cls))
				players[i].mo.A_TakeInventory(cls, int.max);
		}
	}

	static int SeedFromLevelChecksum(void)
	{
		String checksum = Level.GetChecksum();

		// should be always 32 for MD5 checksum
		int length = checksum.Length();

		int seed = 0;

		for (int i = 0; i < length; ++i)
		{
			seed ^= checksum.ByteAt(i) << 8 * (i % 4);
		}

		return seed;
	}

	/*
	static void SetupSaveRules(void)
	{
		if (skill > 0)
		{
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (playeringame[i] && players[i].mo)
					players[i].mo.SetInventory("ns", 1);
			}
		}
	}
	*/

	clearscope static bool IsInCutscene(TCOTDPlayer pmo)
	{
		if (!pmo)
		 return false;

		let cutscene = pmo.FindInventory("CutsceneEnabled");
		if (cutscene)
			return true;

		return false;
	}

	clearscope static bool IsConsoleVisible(void)
	{
		return (!multiplayer && (ConsoleState == c_down || ConsoleState == c_falling));
	}

	clearscope static bool IsSkillNormal(void)
	{
		return (skill == 0);
	}

	clearscope static bool IsSkillHard(void)
	{
		return (skill == 1);
	}

	clearscope static bool IsSkillNightmare(void)
	{
		return (skill >= 2);
	}

	clearscope static bool IsCoop(void)
	{
		return (multiplayer && !deathmatch);
	}

	clearscope static bool IsDeathmatch(void)
	{
		return (multiplayer && deathmatch);
	}

	clearscope static bool IsTitleMap(void)
	{
		return Level.levelnum == 0x7FFFFFFF;
	}

	clearscope static bool IsPlayableMap(void)
	{
		return !IsTitleMap();
	}

	/*
	static void CloseAutomap(void)
	{
		if (Level.time > 2)
		{
			Level.StartIntermission("Automap_Hack", FSTATE_InLevel);
		}
	}
	*/

	static ui bool IsKeyForCommand(int keyScan, String cmd)
	{
		Array<int> mapkeys;
		Bindings.GetAllKeysForCommand(mapkeys, cmd);
		return (mapkeys.Find(KeyScan) != mapkeys.Size());
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	const PARTY_DISTANCE = 64.0;

	static bool PartyGathered(void)
	{
		bool gathered = true;

		Array<PlayerPawn> allPlayers;
		allPlayers.Clear();

		// store all online players in the array
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (playeringame[i])
			{
				let pmo = players[i].mo;
				if (pmo)
				{
					allPlayers.Push(pmo);
					//Console.Printf("%s added into allPlayers", pmo.player.GetUserName());
				}
			}
		}

		// check distance between each player
		// if even one player fails the distance check, consider party not gathered
		for (int i = 0; i < allPlayers.Size(); i++)
		{
			let currentPlayer = allPlayers[i];

			// check the next player, but the last player must check against the first player
			let otherPlayer = i < (allPlayers.Size() - 1) ? allPlayers[i + 1] : allPlayers[0];

			if (currentPlayer && otherPlayer)
			{
				//Console.Printf("%s is checking against %s...", currentPlayer.player.GetUserName(), otherPlayer.player.GetUserName());

				// too far! abort the search
				if (currentPlayer.Distance3D(otherPlayer) > PARTY_DISTANCE)
				{
					//Console.Printf("%s is too far from %s", currentPlayer.player.GetUserName(), otherPlayer.player.GetUserName());
					gathered = false;
					break;
				}
				else
				{
					//Console.Printf("%s is close to %s", currentPlayer.player.GetUserName(), otherPlayer.player.GetUserName());
					continue;
				}
			}
		}

		if (!gathered)
			Console.MidPrint(NULL, StringTable.Localize("$COOP_PLAYERS_SCATTERED"));

		return gathered;
	}
}
