/*
* TCOTD2 Game Code
* Copyright (C) 2020 - 2023  Nash Muhandes
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//===========================================================================
//
// TCOTDCampaign
// A persistent singleton to store info about the current campaign
//
//===========================================================================

class TCOTDCampaign : Thinker
{
	// mark this game as a multiplayer game.
	// this is to prevent loading a single player save into a multiplayer session,
	// which would most likely break things, so we don't allow it.
	bool isCoopGame;

	// mark this game as survival coop
	bool isSurvival;
	bool survivalFailed;
	int8 survivalLives;

	bool initDone;

	int campaignTime;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void Tick(void)
	{
		// STAT_STATIC thinkers don't automatically tick.
		// This would usually be called by TCOTDHandler::WorldTick
		campaignTime++;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	TCOTDCampaign Init(void)
	{
		ChangeStatNum(STAT_STATIC);

		if (!initDone)
		{
			if (TCOTDGameplayStatics.IsCoop())
			{
				isCoopGame = true;
				isSurvival = tcotd2_survival;

				if (isSurvival)
				{
					int maxLives = tcotd2_survival_lives;
					if (maxLives < 0)
						maxLives = 0;
					SetSurvivalLives(maxLives);
				}
			}
			initDone = true;
		}

		return self;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	static clearscope TCOTDCampaign GetInstance(void)
	{
		ThinkerIterator it = ThinkerIterator.Create("TCOTDCampaign", STAT_STATIC);
		let p = TCOTDCampaign(it.Next());
		if (p)
		{
			return p;
		}

		return NULL;
	}

	clearscope int GetTimeInSeconds(void)
	{
		return (campaignTime / Thinker.TICRATE);
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	clearscope bool GetSurvivalFailed(void)
	{
		return survivalFailed;
	}

	void SetSurvivalFailed(bool set)
	{
		survivalFailed = set;
	}

	clearscope int GetSurvivalLives(void)
	{
		return survivalLives;
	}

	void SetSurvivalLives(int i)
	{
		survivalLives = i;
	}
}
