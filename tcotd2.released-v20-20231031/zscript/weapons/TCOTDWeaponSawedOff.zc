/*
Credits:
-Shotgun sprites & reload sound from Blood
-Firing sounds from Clive Baker's Undying

Original code inherited from the original TCoTD 2, modified by Gothic. Added bits from lolo_is_cool R667 submissions.
*/

// ZScript rewrite by Nash Muhandes
// Reloading rework by Blue Shadow

class TCOTDWeaponSawedOff : TCOTDWeapon replaces Shotgun
{
	// How many shells the weapon can hold at maximum.
	const MAXCAPACITY = 2;

	// State labels, for use with A_CheckBarrels.
	enum ESawedOffStateLabels
	{
		LABEL_Ready,
		LABEL_Deselect,
		LABEL_Select
	};

	// Tracks the current number of shells loaded in the weapon.
	private int loadedAmmo;

	Default
	{
		//$Title Sawed-Off
		Scale 0.6;
		Tag "$TAG_SAWA";
		Obituary "$OB_SAWA";
		Inventory.PickupMessage "$IP_SAWA";
		Weapon.AmmoType "TCOTDAmmoShell";
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 2;
		Weapon.AmmoGive 12;
		Weapon.Kickback 100;
		Weapon.SelectionOrder 130;
	}

	// -------------------------------------------------------------------------------------------------
	//
	// -------------------------------------------------------------------------------------------------

	override void BeginPlay ()
	{
		Super.BeginPlay();

		// The weapon is fully loaded initially.
		loadedAmmo = MAXCAPACITY;
	}

	// -------------------------------------------------------------------------------------------------
	//
	// -------------------------------------------------------------------------------------------------

	override bool CheckAmmo (int fireMode, bool autoSwitch, bool requireAmmo, int ammocount)
	{
		if (sv_infiniteammo || Owner.FindInventory('PowerInfiniteAmmo', true) || (Ammo1 ? Ammo1.Amount : 0) >= AmmoUse1)
		{
			// There's enough ammo.
			return true;
		}

		// Out of ammo, pick a weapon to change to.
		if (autoSwitch)
		{
			PlayerPawn(Owner).PickNewWeapon(nullptr);
		}

		return false;
	}

	// -------------------------------------------------------------------------------------------------
	//
	// -------------------------------------------------------------------------------------------------

	override bool DepleteAmmo (bool altFire, bool checkEnough, int ammouse, bool forceammouse)
	{
		// Determine the amount of ammo to consume; primary fire consumes 1 shell, while secondary fire
		// consumes either 1 or 2 shells, depending on how many shells loaded in the weapon.
		int ammoTake = !altFire ? AmmoUse1 : Min(loadedAmmo, AmmoUse2);

		if (sv_infiniteammo || Owner.FindInventory('PowerInfiniteAmmo', true))
		{
			// Consume the loaded ammo in the weapon as normal, even if infinite ammo is enabled.
			loadedAmmo -= ammoTake;
		}
		else if (CheckAmmo(PrimaryFire, false) && Ammo1)
		{
			// There's enough ammo, consume it.
			Ammo1.Amount -= ammoTake;
			loadedAmmo -= ammoTake;
			return true;
		}
		else
		{
			// Ammo couldn't be consumed.
			return false;
		}

		return true;
	}

	// -------------------------------------------------------------------------------------------------
	//
	// -------------------------------------------------------------------------------------------------

	action State A_JumpIfOneBarrelLoaded (StateLabel label)
	{
		return invoker.loadedAmmo == 1 ? ResolveState(label) : nullptr;
	}

	// -------------------------------------------------------------------------------------------------
	//
	//   Jumps to the appropriate state sequence depending on if both barrels are loaded, one of them is
	//   loaded or both are empty.
	//
	// -------------------------------------------------------------------------------------------------

	action State A_CheckBarrels (int labelnum)
	{
		static const StateLabel stateSeqs[] =
		{
			'Ready.OneShell',    'Ready.Empty',
			'Deselect.OneShell', 'Deselect.Empty',
			'Select.OneShell',   'Select.Empty'
		};

		StateLabel sl = nullptr;

		if (invoker.loadedAmmo > 1)
		{
			// Weapon is fully loaded. Just fall through to the next state.
			return nullptr;
		}
		else if (invoker.loadedAmmo == 1)
		{
			// Only one shell is loaded. Select the one-shell-loaded sequence.
			sl = stateSeqs[labelnum * 2];
		}
		else
		{
			// Weapon is empty. Select the "empty" sequence.
			sl = stateSeqs[labelnum * 2 + 1];
		}

		// Jump to the chosen sequence.
		return ResolveState(sl);
	}

	// -------------------------------------------------------------------------------------------------
	//
	// -------------------------------------------------------------------------------------------------

	action State A_SawedOffReady ()
	{
		int flags = 0;
		bool infiniteammo = sv_infiniteammo || FindInventory('PowerInfiniteAmmo', true);
		int ammoAmount = invoker.Ammo1 ? invoker.Ammo1.Amount : 0;

		// Depending on whether or not infinite ammo is enabled, the checks are a little different:
		// - If it's enabled, reload is allowed if the weapon isn't fully loaded. Whether there is shotgun
		//   ammo or not is irrelevant.
		// - If it isn't enabled, reload is allowed depending on the availability of shotgun ammo.
		if ((infiniteammo && invoker.loadedAmmo < MAXCAPACITY) || (!infiniteammo && invoker.loadedAmmo < Min(ammoAmount, MAXCAPACITY)))
		{
			flags |= WRF_ALLOWRELOAD;
		}

		A_WeaponReady(flags);
		return A_CheckBarrels(LABEL_Ready);
	}

	// -------------------------------------------------------------------------------------------------
	//
	// -------------------------------------------------------------------------------------------------

	action void A_FireSawedOff (double spread_xy, double spread_z, int numbullets, Sound snd)
	{
		if (player == nullptr)
		{
			return;
		}

		A_StartSound(snd, CHAN_WEAPON);

		Weapon weap = player.ReadyWeapon;

		if (weap != nullptr && invoker == weap && stateinfo != nullptr && stateinfo.mStateType == STATE_Psprite)
		{
			if (!weap.DepleteAmmo(weap.bAltFire, true))
			{
				return;
			}

			player.SetPsprite(PSP_FLASH, weap.FindState('Flash'), true);
		}

		player.mo.PlayAttacking2();

		double pitch = BulletSlope();

		for (int i = 0; i < numbullets; i++)
		{
			int damage = TCOTDGameplayStatics.GetAttackDamage(12);
			double ang = angle + random2[rnd_FireSawedOff]() * (spread_xy / 256);
			LineAttack(ang, PLAYERMISSILERANGE, pitch + random2[rnd_FireSawedOff]() * (spread_z / 256), damage, 'Hitscan', "TCOTDBulletPuff");
		}
	}

	// -------------------------------------------------------------------------------------------------
	//
	// -------------------------------------------------------------------------------------------------

	action void A_SawedOffOneBarrelAtk ()
	{
		A_Overlay(-PSP_FLASH, "GunSmoke");
		A_ViewKick();
		A_GunFlash();
		A_FireSawedOff(5.625, 3.5485, 7, "sawedoff/fire");
	}

	// -------------------------------------------------------------------------------------------------
	//
	// -------------------------------------------------------------------------------------------------

	action void A_SawedOffBothBarrelsAtk ()
	{
		A_Overlay(-PSP_FLASH, "BigGunSmoke");
		A_ViewKick();
		A_GunFlash();
		A_FireSawedOff(11.25, 7.097, 20, "sawedoff/altfire");
	}

	// -------------------------------------------------------------------------------------------------
	//
	// -------------------------------------------------------------------------------------------------

	action State A_FireSawedOffPrimary ()
	{
		State st = nullptr;

		if (invoker.loadedAmmo < 1)
		{
			// The weapon is empty, reload.
			return A_Jump(256, "Reload");
		}
		else if (invoker.loadedAmmo == 1)
		{
			// Only one shell is loaded. The state sequence to enter is the one-shell-loaded firing sequence.
			st = ResolveState("Fire.OneShell");
		}

		// Do the attack.
		A_SawedOffOneBarrelAtk();
		return st;
	}

	// -------------------------------------------------------------------------------------------------
	//
	// -------------------------------------------------------------------------------------------------

	action State A_FireSawedOffSecondary ()
	{
		State st = nullptr;

		if (invoker.loadedAmmo < 1)
		{
			// The weapon is empty, reload.
			return A_Jump(256, "Reload");
		}
		else if (invoker.loadedAmmo == 1)
		{
			// Only one shell is loaded. Do the single-barrel attack, instead.
			// The state sequence to enter is the one-shell-loaded firing sequence.
			A_SawedOffOneBarrelAtk();
			st = ResolveState("Fire.OneShell");
		}
		else
		{
			// The weapon is fully loaded. Do the double-barrel attack.
			A_SawedOffBothBarrelsAtk();
		}

		return st;
	}

	// -------------------------------------------------------------------------------------------------
	//
	// -------------------------------------------------------------------------------------------------

	action void A_SawedOffDoReload ()
	{
		A_StartSound("sawedoff/reload", CHAN_WEAPON, CHANF_OVERLAP);
		A_SpawnWeaponFX("TCOTDEmptyCasingShell", 2);
		A_SpawnWeaponFX("TCOTDEmptyCasingShell", 4);

		// If infinite ammo is enabled, always fully reload the weapon. Otherwise reload it depending on the
		// availability of ammo.
		bool infiniteammo = sv_infiniteammo || FindInventory('PowerInfiniteAmmo', true);
		int ammoAmount = invoker.Ammo1 ? invoker.Ammo1.Amount : 0;
		invoker.loadedAmmo = infiniteammo ? MAXCAPACITY : Min(ammoAmount, MAXCAPACITY);
	}

	// -------------------------------------------------------------------------------------------------
	//
	// -------------------------------------------------------------------------------------------------

	States
	{
	Spawn:
		SPCK A -1;
		Stop;
	Ready:
		SAWF A 1 A_SawedOffReady();
		Loop;
	Ready.OneShell:
		SAWF B 1;
		Goto Ready;
	Ready.Empty:
		SAWF C 1;
		Goto Ready;
	Deselect:
		SAWF A 0 A_CheckBarrels(LABEL_Deselect);
		SAWF A 1 A_Lower(RAISELOWERSPEED);
		Wait;
	Deselect.OneShell:
		SAWF B 1 A_Lower(RAISELOWERSPEED);
		Loop;
	Deselect.Empty:
		SAWF C 1 A_Lower(RAISELOWERSPEED);
		Loop;
	Select:
		SAWF A 0 A_CheckBarrels(LABEL_Select);
		SAWF A 1 A_Raise(RAISELOWERSPEED);
		Wait;
	Select.OneShell:
		SAWF B 1 A_Raise(RAISELOWERSPEED);
		Loop;
	Select.Empty:
		SAWF C 1 A_Raise(RAISELOWERSPEED);
		Loop;
	Fire:
		SAWF B 2 A_FireSawedOffPrimary();
		SAWF B 1 A_WeaponOffset(10, 52);
		SAWF B 1 A_WeaponOffset(14, 60);
		SAWF B 2 A_WeaponOffset(16, 64, WOF_INTERPOLATE);
		SAWF B 1 A_WeaponOffset(14, 60, WOF_INTERPOLATE);
		SAWF B 1 A_WeaponOffset(10, 52, WOF_INTERPOLATE);
		SAWF B 1 A_WeaponOffset(3, 38, WOF_INTERPOLATE);
		SAWF B 1 A_WeaponOffset(2, 36, WOF_INTERPOLATE);
		SAWF B 1 A_WeaponOffset(1, 34, WOF_INTERPOLATE);
		SAWF B 2 A_WeaponOffset(0, 32);
		Goto Ready;
	Fire.OneShell:
		SAWF C 2;
		SAWF C 1 A_WeaponOffset(10, 52);
		SAWF C 1 A_WeaponOffset(14, 60);
		SAWF C 2 A_WeaponOffset(16, 64, WOF_INTERPOLATE);
		SAWF C 1 A_WeaponOffset(14, 60, WOF_INTERPOLATE);
		SAWF C 1 A_WeaponOffset(10, 52, WOF_INTERPOLATE);
		SAWF C 1 A_WeaponOffset(3, 38, WOF_INTERPOLATE);
		SAWF C 1 A_WeaponOffset(2, 36, WOF_INTERPOLATE);
		SAWF C 1 A_WeaponOffset(1, 34, WOF_INTERPOLATE);
		SAWF C 2 A_WeaponOffset(0, 32);
		Goto Reload;
	AltFire:
		SAWF C 2 A_FireSawedOffSecondary();
		SAWF C 1 A_WeaponOffset(10, 52);
		SAWF C 1 A_WeaponOffset(28, 68);
		SAWF C 1 A_WeaponOffset(32, 76);
		SAWF C 2 A_WeaponOffset(38, 88, WOF_INTERPOLATE);
		SAWF C 1 A_WeaponOffset(36, 84, WOF_INTERPOLATE);
		SAWF C 1 A_WeaponOffset(32, 76, WOF_INTERPOLATE);
		SAWF C 1 A_WeaponOffset(28, 68, WOF_INTERPOLATE);
		SAWF C 1 A_WeaponOffset(14, 60, WOF_INTERPOLATE);
		SAWF C 1 A_WeaponOffset(10, 52, WOF_INTERPOLATE);
		SAWF C 1 A_WeaponOffset(3, 38, WOF_INTERPOLATE);
		SAWF C 1 A_WeaponOffset(2, 36, WOF_INTERPOLATE);
		SAWF C 1 A_WeaponOffset(1, 34, WOF_INTERPOLATE);
		SAWF C 1 A_WeaponOffset(0, 32, WOF_INTERPOLATE);
		Goto Reload;
	Reload:
		SAWF C 1 A_CheckReload();
		SAWF E 2;
		SAWF F 2 A_SawedOffDoReload();
		SAWF G 8 A_Overlay(PSP_WEAPON + 1, "ElHando");
		SAWF JE 2;
		Goto Ready;
	ElHando:
		TNT1 A 0 A_OverlayFlags(PSP_WEAPON + 1, PSPF_ADDWEAPON, false);
		SAWF H 1 A_OverlayOffset(PSP_WEAPON + 1, 0, 32, WOF_INTERPOLATE);
		SAWF H 1 A_OverlayOffset(PSP_WEAPON + 1, -9, 26, WOF_INTERPOLATE);
		SAWF H 1 A_OverlayOffset(PSP_WEAPON + 1, -18, 20, WOF_INTERPOLATE);
		SAWF H 1 A_OverlayOffset(PSP_WEAPON + 1, -26, 15, WOF_INTERPOLATE);
		SAWF H 1 A_OverlayOffset(PSP_WEAPON + 1, -32, 10, WOF_INTERPOLATE);
		SAWF I 1 A_OverlayOffset(PSP_WEAPON + 1, 0, 32);
		SAWF I 1 A_OverlayOffset(PSP_WEAPON + 1, -4, 40, WOF_INTERPOLATE);
		SAWF I 1 A_OverlayOffset(PSP_WEAPON + 1, -8, 48, WOF_INTERPOLATE);
		Stop;
	Flash:
		SAWF D 2 A_Light2();
		SAWF D 2 A_Light1();
		Goto LightDone;
	GunSmoke:
		TNT1 A 0 A_OverlayFlags(-PSP_FLASH, PSPF_ADDWEAPON, false);
		TNT1 A 0 A_JumpIfOneBarrelLoaded(4);
		SFFL ABC 2 Bright A_OverlayOffset(-PSP_FLASH, 0, 32);
		Stop;
		SFFL ABC 2 Bright A_OverlayOffset(-PSP_FLASH, 16, 32);
		Stop;
	BigGunSmoke:
		TNT1 A 0 A_OverlayFlags(-PSP_FLASH, PSPF_ADDWEAPON, false);
		SFFL DEF 2 Bright A_OverlayOffset(-PSP_FLASH, 0, 32);
		Stop;
	ViewKick:
		TNT1 A 3 A_SetViewPitch(ViewPitch - 2.5);
		TNT1 A 1 A_SetViewPitch(ViewPitch + 0.625);
		TNT1 A 1 A_SetViewPitch(ViewPitch + 0.625);
		TNT1 A 1 A_SetViewPitch(ViewPitch + 0.625);
		TNT1 A 1 A_SetViewPitch(ViewPitch + 0.625);
		Stop;
	}
}
