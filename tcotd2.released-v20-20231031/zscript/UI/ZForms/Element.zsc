class TCOTDZFElement ui {
	enum AlignType {
		AlignType_Left    = 1,
		AlignType_HCenter = 2,
		AlignType_Right   = 3,

		AlignType_Top     = 1 << 4,
		AlignType_VCenter = 2 << 4,
		AlignType_Bottom  = 3 << 4,

		AlignType_TopLeft   = AlignType_Top | AlignType_Left,
		AlignType_TopCenter = AlignType_Top | AlignType_HCenter,
		AlignType_TopRight  = AlignType_Top | AlignType_Right,

		AlignType_CenterLeft  = AlignType_VCenter | AlignType_Left,
		AlignType_Center      = AlignType_VCenter | AlignType_HCenter,
		AlignType_CenterRight = AlignType_VCenter | AlignType_Right,

		AlignType_BottomLeft   = AlignType_Bottom | AlignType_Left,
		AlignType_BottomCenter = AlignType_Bottom | AlignType_HCenter,
		AlignType_BottomRight  = AlignType_Bottom | AlignType_Right,
	}

	TCOTDZFFrame master;

	TCOTDZFHandler cmdHandler;
	string command;

	Vector2 baseScreenSize;
	TCOTDZFAABB box;
	double alpha;
	bool disabled;
	bool hidden;
	bool isHovered;

	int round(double roundee) {
		if (roundee < 0) {
			return int(roundee - 0.5);
		}
		else {
			return int(roundee + 0.5);
		}
	}

	TCOTDZFAABB getClipAABB() {
		TCOTDZFAABB curClip = new("TCOTDZFAABB");
		[curClip.pos.x, curClip.pos.y, curClip.size.x, curClip.size.y] = screen.GetClipRect();
		if (curClip.size.x != -1) {
			return curClip;
		}
		else {
			curClip.pos = (0, 0);
			curClip.size = screenSize();
			return curClip;
		}
	}

	Vector2 getAspectRatioOffset() {
		Vector2 screenSize = screenSize();
		Vector2 virtualSize = getBaseVirtualSize();
		if (screenSize.x / baseScreenSize.x == screenSize.y / baseScreenSize.y) {
			return (0, 0);
		}
		else if (screenSize.x / baseScreenSize.x < screenSize.y / baseScreenSize.y) {
			return (0, (screenSize.y - (screenSize.x * (baseScreenSize.y / baseScreenSize.x)))) / 2;
		}
		else {
			return ((screenSize.x - (screenSize.y * (baseScreenSize.x / baseScreenSize.y))), 0) / 2;
		}
	}

	/// Converts relative positioning to screen positioning.
	virtual Vector2 relToScreen(Vector2 relPos) {
		return master.relToScreen(box.pos + relPos);
	}

	Vector2 screenToRel(Vector2 screenPos) {
		return screenScaledToRel(screenPos / getScale()) - getAspectRatioOffset() / getScale();
	}

	/// Converts screen positioning to relative positioning.
	virtual Vector2 screenScaledToRel(Vector2 screenPos) {
		return master.screenToRel(screenPos - box.pos);
	}

	/// Return a bounding box which uses absolute coordinates.
	virtual TCOTDZFAABB boxToScreen() {
		TCOTDZFAABB ret = new("TCOTDZFAABB");
		ret.pos = relToScreen((0, 0)) * getScale();
		ret.size = box.size * getScale();

		if (master != NULL) {
			ret = ret.rectOfIntersection(master.boxToScreen());
		}

		return ret;
	}

	Vector2 screenSize() {
		return (Screen.getWidth(), Screen.getHeight());
	}

	double getScale() {
		Vector2 screenSize = screenSize();
		return min(screenSize.x / baseScreenSize.x, screenSize.y / baseScreenSize.y);
	}

	Vector2 getBaseVirtualSize() {
		return screenSize() / getScale();
	}

	/// Converts a scale to virtual coordinates for drawing elements at a scale factor.
	Vector2 scaleToVirtualSize(Vector2 scale) {
		Vector2 screenSize = getBaseVirtualSize();
		return (screenSize.x / scale.x, screenSize.y / scale.y);
	}

	Vector2 texSize(string texture) {
		return TexMan.getScaledSize(TexMan.checkForTexture(texture, TexMan.Type_Any));
	}

	/// Gets the correct position to draw aligned content at.
	Vector2 getAlignedDrawPos(Vector2 boxSize, Vector2 contentSize, AlignType align) {
		Vector2 pos = (0, 0);
		int horzAlign = align &  15;
		int vertAlign = align & (15 << 4);

		if (horzAlign == AlignType_HCenter) {
			pos.x = (boxSize.x - contentSize.x) / 2.0;
		}
		else if (horzAlign == AlignType_Right) {
			pos.x = boxSize.x - contentSize.x;
		}

		if (vertAlign == AlignType_VCenter) {
			pos.y = (boxSize.y - contentSize.y) / 2.0;
		}
		else if (vertAlign == AlignType_Bottom) {
			pos.y = boxSize.y - contentSize.y;
		}

		return pos;
	}

	/// Gets the cumulative alpha value for the element.
	double getAlpha() {
		double calcAlpha = 1;

		TCOTDZFElement elem = self;
		while (elem) {
			calcAlpha *= elem.alpha;
			elem = elem.master;
		}

		return calcAlpha;
	}

	/// Draws text, taking into account relative positioning, and scale factor.
	void drawText(Vector2 relPos, Font fnt, string text, int color = Font.CR_WHITE, double scale = 1, double alpha = 1) {
		if (scale == 0) return;

		Vector2 drawPos = relToScreen(relPos) / scale;
		Vector2 virtualSize = scaleToVirtualSize((scale, scale));
		Screen.drawText(fnt, color, drawPos.x, drawPos.y, text, DTA_VirtualWidthF, virtualSize.x, DTA_VirtualHeightF, virtualSize.y, DTA_KeepRatio, true, DTA_Alpha, alpha * getAlpha());
	}

	/// Draws an image, taking into account relative positioning, and scale factor.
	void drawImage(Vector2 relPos, string imageName, bool animate, Vector2 scale = (1, 1), double alpha = 1, TCOTDZFAABB clipRect = NULL) {
		if (scale.x == 0 || scale.y == 0) return;

		if (clipRect == NULL) {
			clipRect = getClipAABB();
		}
		TextureID tex = TexMan.checkForTexture(imageName, TexMan.Type_Any);
		Vector2 drawPos = relToScreen(relPos);
		drawPos = (drawPos.x / scale.x, drawPos.y / scale.y);
		Vector2 virtualSize = scaleToVirtualSize(scale);
		Screen.DrawTexture(tex, animate, drawPos.x, drawPos.y, DTA_VirtualWidthF, virtualSize.x, DTA_VirtualHeightF, virtualSize.y, DTA_KeepRatio, true, DTA_Alpha, alpha * getAlpha(), DTA_ClipLeft, int(clipRect.pos.x), DTA_ClipTop, int(clipRect.pos.y), DTA_ClipRight, int(clipRect.pos.x + clipRect.size.x), DTA_ClipBottom, int(clipRect.pos.y + clipRect.size.y), DTA_TopOffset, 0, DTA_LeftOffset, 0);
	}

	Vector2 scaleVec(Vector2 vec, Vector2 scale) {
		return (vec.x * scale.x, vec.y * scale.y);
	}

	/// Adds an axis-aligned quad to a Shape2D instance.
	void shape2DAddQuad(Shape2D shape, Vector2 pos, Vector2 size, Vector2 uvPos, Vector2 uvSize, out int vertCount) {
		shape.pushVertex((pos.x         , pos.y         ));
		shape.pushVertex((pos.x + size.x, pos.y         ));
		shape.pushVertex((pos.x         , pos.y + size.y));
		shape.pushVertex((pos.x + size.x, pos.y + size.y));

		shape.pushTriangle(vertCount + 0, vertCount + 3, vertCount + 1);
		shape.pushTriangle(vertCount + 0, vertCount + 2, vertCount + 3);

		shape.pushCoord((uvPos.x           , uvPos.y           ));
		shape.pushCoord((uvPos.x + uvSize.x, uvPos.y           ));
		shape.pushCoord((uvPos.x           , uvPos.y + uvSize.y));
		shape.pushCoord((uvPos.x + uvSize.x, uvPos.y + uvSize.y));

		vertCount += 4;
	}

	/// Draws a grid of images according to the size Vector2.
	/// Scales the image instead of tiling if possible.
	void drawTiledImage(Vector2 relPos, Vector2 size, string imageName, bool animate, Vector2 scale = (1, 1), double alpha = 1.0) {
		if (scale.x == 0 || scale.y == 0) {
			return;
		}

		Vector2 imageSize = texSize(imageName) * getScale();

		// Abort if the image has an invalid resolution.
		if (imageSize.x < 0 || imageSize.x ~== 0 || imageSize.y < 0 || imageSize.y ~== 0) {
			return;
		}

		TCOTDZFAABB beforeClip = getClipAABB();
		TCOTDZFAABB clipRect = boxToScreen().rectOfIntersection(beforeClip);
		TCOTDZFAABB screenClip = new("TCOTDZFAABB");
		screenClip.size = screenSize();
		clipRect = clipRect.rectOfIntersection(screenClip);

		Vector2 imageScale = scaleVec(imageSize, scale);
		let absPos = relToScreen(relPos) * getScale();
		let scaledSize = size * getScale();
		if (scaledSize ~== (0, 0)) {
			return;
		}

		let shape = new("Shape2D");
		shape.clear();

		double xSize = scaledSize.x / imageScale.x;
		double ySize = scaledSize.y / imageScale.y;
		int vertCount = 0;
		shape2DAddQuad(shape, absPos, scaledSize, (0, 0), (xSize, ySize), vertCount);

		let texID = TexMan.checkForTexture(imageName, TexMan.Type_Any);
		Screen.drawShape(texID, animate, shape, DTA_Alpha, alpha * getAlpha(), DTA_ClipLeft, int(floor(clipRect.pos.x)), DTA_ClipTop, int(floor(clipRect.pos.y)), DTA_ClipRight, int(ceil(clipRect.pos.x + clipRect.size.x)), DTA_ClipBottom, int (ceil(clipRect.pos.y + clipRect.size.y)));

		Screen.setClipRect(int(beforeClip.pos.x), int(beforeClip.pos.y), int(beforeClip.size.x), int(beforeClip.size.y));

		shape.clear();
		shape.destroy();
	}

	private void drawBoxCalcTiledImage(Shape2D shape, Vector2 screenPos, Vector2 screenSize, Vector2 scaledSize,
	                                   Vector2 uvPos, Vector2 uvSize, out int vertCount) {
		if (scaledSize.x ~== 0 || scaledSize.y ~== 0) {
			return;
		}

		double fracX = screenSize.x / scaledSize.x;
		double fracY = screenSize.y / scaledSize.y;
		int countX = int (ceil (fracX));
		int countY = int (ceil (fracY));

		double drawSizeLimitX = fracX;
		double drawPosX = screenPos.x;
		for (int x = 0; x < countX; x++) {
			double drawSizeLimitY = fracY;
			double drawPosY = screenPos.y;

			double drawFracX = min (1, drawSizeLimitX);
			double drawSizeX = scaledSize.x * drawFracX;
			double drawUVSizeX = uvSize.x * drawFracX;

			for (int y = 0; y < countY; y++) {
				double drawFracY = min (1, drawSizeLimitY);
				double drawSizeY = scaledSize.y * drawFracY;
				double drawUVSizeY = uvSize.y * drawFracY;

				shape2DAddQuad(shape, (drawPosX, drawPosY), (drawSizeX, drawSizeY), uvPos, (drawUVSizeX, drawUVSizeY), vertCount);

				drawPosY += drawSizeY;
				drawSizeLimitY -= drawFracY;
			}

			drawPosX += drawSizeX;
			drawSizeLimitX -= drawFracX;
		}
	}

	private Shape2D drawBoxCalc(Vector2 pos, Vector2 size, TCOTDZFBoxTextures textures, Vector2 scale = (1, 1)) {
		double screenScale = getScale();

		Vector2 imageSize = texSize(textures.boxTexture);
		Vector2 imageSizeInv = (1 / imageSize.x, 1 / imageSize.y);

		// Abort if the image has an invalid resolution.
		if (imageSize.x < 0 || imageSize.x ~== 0 || imageSize.y < 0 || imageSize.y ~== 0) {
			return null;
		}

		let absPos = relToScreen(pos) * screenScale;
		let scaledSize = size * screenScale;
		if (scaledSize ~== (0, 0)) {
			return null;
		}

		// Raw
		Vector2 tlRawSize = scaleVec(imageSize, textures.midSliceTopLeft);

		Vector2 brRawPos = scaleVec(imageSize, textures.midSliceBottomRight);
		Vector2 brRawSize = imageSize - brRawPos;

		Vector2 midRawPos = tlRawSize;
		Vector2 midRawSize = brRawPos - tlRawSize;

		// UVs
		Vector2 tlUVSize = scaleVec(tlRawSize, imageSizeInv);

		Vector2 brUVSize = scaleVec(brRawSize, imageSizeInv);
		Vector2 brUVPos = scaleVec(brRawPos, imageSizeInv);

		Vector2 midUVPos = scaleVec(midRawPos, imageSizeInv);
		Vector2 midUVSize = scaleVec(midRawSize, imageSizeInv);

		// Scaled
		Vector2 tlScaledSize = scaleVec(tlRawSize * screenScale, scale);

		Vector2 brScaledPos = scaleVec(brRawPos * screenScale, scale);
		Vector2 brScaledSize = scaleVec(brRawSize * screenScale, scale);

		Vector2 midScaledPos = scaleVec(midRawPos * screenScale, scale);
		Vector2 midScaledSize = scaleVec(midRawSize * screenScale, scale);

		// Screen
		Vector2 tlScreenPos = absPos;
		Vector2 tlScreenSize = tlScaledSize;

		Vector2 brScreenPos = absPos + scaledSize - brScaledSize;
		Vector2 brScreenSize = (absPos + scaledSize) - brScreenPos;

		Vector2 midScreenPos = tlScreenPos + tlScreenSize;
		Vector2 midScreenSize = brScreenPos - midScreenPos;

		let shape = new("Shape2D");
		shape.clear();

		int vertCount = 0;

		/* Corners */ {
			// UVs
			Vector2 trUVPos = (brUVPos.x, 0);
			Vector2 trUVSize = (brUVSize.x, tlUVSize.y);

			Vector2 blUVPos = (0, brUVPos.y);
			Vector2 blUVSize = (tlUVSize.x, brUVSize.y);
			// Screen
			Vector2 trScreenPos = (brScreenPos.x, tlScreenPos.y);
			Vector2 trScreenSize = (brScreenSize.x, tlScreenSize.y);

			Vector2 blScreenPos = (tlScreenPos.x, brScreenPos.y);
			Vector2 blScreenSize = (tlScreenSize.x, brScreenSize.y);

			shape2DAddQuad(shape, tlScreenPos, tlScreenSize,  (0, 0), tlUVSize, vertCount);
			shape2DAddQuad(shape, trScreenPos, trScreenSize, trUVPos, trUVSize, vertCount);
			shape2DAddQuad(shape, brScreenPos, brScreenSize, brUVPos, brUVSize, vertCount);
			shape2DAddQuad(shape, blScreenPos, blScreenSize, blUVPos, blUVSize, vertCount);
		}

		/* Sides */ {
			// UVs
			Vector2 topUVPos = (midUVPos.x, 0);
			Vector2 topUVSize = (midUVSize.x, tlUVSize.y);

			Vector2 bottomUVPos = (midUVPos.x, brUVPos.y);
			Vector2 bottomUVSize = (midUVSize.x, brUVSize.y);

			Vector2 leftUVPos = (0, midUVPos.y);
			Vector2 leftUVSize = (tlUVSize.x, midUVSize.y);

			Vector2 rightUVPos = (brUVPos.x, midUVPos.y);
			Vector2 rightUVSize = (brUVSize.x, midUVSize.y);
			// Screen
			Vector2 topScreenPos = (midScreenPos.x, tlScreenPos.y);
			Vector2 topScreenSize = (midScreenSize.x, tlScreenSize.y);

			Vector2 bottomScreenPos = (midScreenPos.x, brScreenPos.y);
			Vector2 bottomScreenSize = (midScreenSize.x, brScreenSize.y);

			Vector2 leftScreenPos = (tlScreenPos.x, midScreenPos.y);
			Vector2 leftScreenSize = (tlScreenSize.x, midScreenSize.y);

			Vector2 rightScreenPos = (brScreenPos.x, midScreenPos.y);
			Vector2 rightScreenSize = (brScreenSize.x, midScreenSize.y);

			if (textures.scaleSides) {
				shape2DAddQuad(shape, topScreenPos, topScreenSize, topUVPos, topUVSize, vertCount);
				shape2DAddQuad(shape, bottomScreenPos, bottomScreenSize, bottomUVPos, bottomUVSize, vertCount);
				shape2DAddQuad(shape, leftScreenPos, leftScreenSize, leftUVPos, leftUVSize, vertCount);
				shape2DAddQuad(shape, rightScreenPos, rightScreenSize, rightUVPos, rightUVSize, vertCount);
			} else {
				Vector2 topScaledSize = (midScaledSize.x, tlScaledSize.y);
				Vector2 bottomScaledSize = (midScaledSize.x, brScaledSize.y);
				Vector2 leftScaledSize = (tlScaledSize.x, midScaledSize.y);
				Vector2 rightScaledSize = (brScaledSize.x, midScaledSize.y);

				drawBoxCalcTiledImage(shape, topScreenPos, topScreenSize, topScaledSize, topUVPos, topUVSize, vertCount);
				drawBoxCalcTiledImage(shape, bottomScreenPos, bottomScreenSize, bottomScaledSize, bottomUVPos, bottomUVSize, vertCount);
				drawBoxCalcTiledImage(shape, leftScreenPos, leftScreenSize, leftScaledSize, leftUVPos, leftUVSize, vertCount);
				drawBoxCalcTiledImage(shape, rightScreenPos, rightScreenSize, rightScaledSize, rightUVPos, rightUVSize, vertCount);
			}
		}

		if (textures.scaleMiddle) {
			shape2DAddQuad(shape, midScreenPos, midScreenSize, midUVPos, midUVSize, vertCount);
		} else {
			drawBoxCalcTiledImage(shape, midScreenPos, midScreenSize, midScaledSize, midUVPos, midUVSize, vertCount);
		}

		return shape;
	}

	/// Draw a box using a TCOTDZFBoxTextures struct.
	void drawBox(Vector2 pos, Vector2 size, TCOTDZFBoxTextures textures, bool animate, Vector2 scale = (1, 1)) {
		if (textures == NULL) {
			return;
		}

		Shape2D shape = NULL;

		shape = drawBoxCalc(pos, size, textures, scale);

		if (shape == NULL) {
			return;
		}

		TCOTDZFAABB beforeClip = getClipAABB();
		TCOTDZFAABB clipRect = boxToScreen().rectOfIntersection(beforeClip);
		TCOTDZFAABB screenClip = new("TCOTDZFAABB");
		screenClip.size = screenSize();
		clipRect = clipRect.rectOfIntersection(screenClip);

		let texID = TexMan.checkForTexture(textures.boxTexture, TexMan.Type_Any);
		Screen.drawShape(texID, animate, shape, DTA_Alpha, alpha * getAlpha(), DTA_ClipLeft, int(floor(clipRect.pos.x)), DTA_ClipTop, int(floor(clipRect.pos.y)), DTA_ClipRight, int(ceil(clipRect.pos.x + clipRect.size.x)), DTA_ClipBottom, int (ceil(clipRect.pos.y + clipRect.size.y)));

		Screen.setClipRect(int(beforeClip.pos.x), int(beforeClip.pos.y), int(beforeClip.size.x), int(beforeClip.size.y));

		shape.clear();
		shape.destroy();
	}

	/// Draws a coloured region, taking into account relative positioning, and scale factor.
	void fill(Vector2 relStartPos, Vector2 size, Color col, double amount) {
		Vector2 startPos = relToScreen(relStartPos) * getScale();
		size *= getScale();

		TCOTDZFAABB beforeClip = getClipAABB();
		TCOTDZFAABB clipTest = new("TCOTDZFAABB");
		clipTest.pos = startPos;
		clipTest.size = size;
		TCOTDZFAABB clipRect = clipTest.rectOfIntersection(beforeClip);
		Screen.setClipRect(int(clipRect.pos.x), int(clipRect.pos.y), int(clipRect.size.x), int(clipRect.size.y));

		Screen.dim(col, amount * getAlpha(), int(startPos.x), int(startPos.y), int(size.x), int(size.y));

		Screen.setClipRect(int(beforeClip.pos.x), int(beforeClip.pos.y), int(beforeClip.size.x), int(beforeClip.size.y));
	}

	/// Packs the element into the master frame.
	void pack(TCOTDZFFrame master) {
		if (master != NULL) {
			unpack();
		}

		self.master = master;
		master.elements.push(self);
		baseScreenSize = master.baseScreenSize;
	}

	/// Unpacks the element from its master frame.
	void unpack() {
		if (master == NULL) {
			return;
		}

		int index = master.elements.find (self);
		if (index != master.elements.Size ()) {
			master.elements.delete(index, 1);
		}
		master = NULL;
	}

	void setBox(Vector2 pos, Vector2 size) {
		if (box == NULL) {
			box = new("TCOTDZFAABB");
		}
		box.pos = pos;
		box.size = size;
	}

	// methods for overriding in derived elements
	virtual void ticker() {}
	virtual void drawer() {}
	virtual void onUIEvent(TCOTDZFUiEvent ev) {}

	// Added by Chronos "phantombeta" Ouroboros
	bool isEnabled() {
		TCOTDZFElement elem = self;
		while (elem) {
			if (elem.disabled) {
				return false;
			}

			elem = elem.master;
		}

		return true;
	}

	virtual void doHover (Vector2 mousePos) {
		bool hover = boxToScreen().pointCollides(mousePos);

		if (hover && !isHovered) {
			if (cmdHandler) {
				cmdHandler.elementHoverChanged(self, command, false);
			}
			isHovered = true;
		}
		else if (!hover && isHovered) {
			if (cmdHandler) {
				cmdHandler.elementHoverChanged(self, command, true);
			}
			isHovered = false;
		}
	}
}
