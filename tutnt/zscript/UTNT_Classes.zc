/*
 * Copyright (c) 2007-2024 Nash Muhandes, Ozymandias81, Tormentor667
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
**/

class Marine : DoomPlayer
{
	const FOOTSTEP_COUNTER_MAX = 85.; //straight from TCOTD2 Remaster
	double footstepCounter;

	Default
	{	
		Player.WeaponSlot 1,"UTNTFist","UTNTChainsaw";
		Player.WeaponSlot 2,"UTNTPistol";
		Player.WeaponSlot 3,"UTNTShotgun","UTNTSuperShotgun";
		Player.WeaponSlot 4,"UTNTChaingun","UTNTMinigun";
		Player.WeaponSlot 5,"UTNTRocketLauncher";
		Player.WeaponSlot 6,"UTNTPlasmaRifle","UTNTFlamer";
		Player.WeaponSlot 7,"UTNTBFG9000";
		Player.WeaponSlot 8,"UTNTPyroCannon";
		Player.StartItem "UTNTShotgun";
		Player.StartItem "UTNTFist";
		Player.StartItem "Shell",10;
		Player.MaxHealth 100;
	}
	
	States
	{
	Spawn:
		PLA3 A -1;
		Stop;
	See:
		PLA3 ABCD 4;
		Loop;
	Missile:
		"####" E 12;
		"####" E 0 A_Jump(256,"Spawn");
	Melee:
		"####" F 2 BRIGHT LIGHT("ZOMBIEATK");
		"####" F 4 BRIGHT;
		Goto Missile;
	Pain:
		"####" G 4;
		"####" G 4 A_Pain();
		"####" G 0 A_Jump(256,"Spawn");
	Death:
		"####" H 10;
		"####" I 10 A_PlayerScream();
		"####" J 10 A_NoBlocking();
		"####" KLM 10;
		"####" N -1;
		Stop;
	XDeath:
		"####" O 5;
		"####" P 5 A_XScream();
		"####" Q 5 A_NoBlocking();
		"####" RSTUV 5;
		"####" W -1;
		Stop;
	}
	
	override void Tick(void)
	{
		if (!player || !player.mo || player.mo != self)
		{
			Super.Tick();
			return;
		}

		Super.Tick();
		UpdateFootsteps();
	}
	
	private sound GetFootstepSound(void)
	{
		// default sound
		Sound ret = "floor/default";

		// use sound from terrain, if it exists
		let tr = GetFloorTerrain();
		if (tr && tr.LeftStepSound)
		{
			ret = tr.LeftStepSound;
		}

		return ret;
	}

	void UpdateFootsteps(void)
	{
		// immediately play a footstep sound if standing still
		if (player.onground && Vel.XY.Length() ~== 0)
		{
			footstepCounter = FOOTSTEP_COUNTER_MAX;
			return;
		}

		// no need to play footsteps when in deep water
		if (WaterLevel > 1)
			return;

		bool shouldPlayFootstepSound = false;

		// get character velocity
		double aVel = UTNTGameplayStatics.GetVelocity(self, xyOnly: true);

		// don't bother if moving too slow
		if (aVel < 0.1)
			return;

		// set the sound volume
		double vol = min(aVel * 0.1, 1.0);
		//vol *= 0.7;
		if (CheckLocalView())
			vol *= CVar.GetCVar("UTNT_footstepvolume", player).GetFloat();
		vol = clamp(vol, 0.0, 1.0);

		// clamp the velocity value to pleasing values
		// yay magic numbers!
		aVel = clamp(aVel, 2.24, 7.35);

		// add to counter if moving, decrease it otherwise
		if (aVel < 0.01)
			footstepCounter *= 0.5;
		else
			footstepCounter += aVel;

		// play the footstep sound
		if (footstepCounter > FOOTSTEP_COUNTER_MAX)
		{
			shouldPlayFootstepSound = true;
		}

		if (shouldPlayFootstepSound)
		{
			// TO DO: is Z offset portal aware or not?
			Vector3 sPos =
			(
				0.0,
				0.0,
				UTNTFootstep.GetZOffset(self)
			);
			let fs = UTNTFootstep(self.Spawn("UTNTFootstep", self.Pos + sPos, NO_REPLACE));
			if (fs)
			{
				fs.pmo = self;
				fs.vol = vol;
				fs.snd = GetFootstepSound();
			}

			// reset footstep counter
			footstepCounter = 0;
		}
	}
}

class Scout : Marine
{
	Default
	{
		Player.ForwardMove 1.25,1.25;
		Player.SideMove 1.25,1.25;
		Player.DisplayName "Scout";
		Player.StartItem "UTNTPistol";
		Player.StartItem "UTNTFist";
		Player.StartItem "Clip",60;
		Player.MaxHealth 75;
	}
	
	States
	{
	Spawn:
		PLA2 A -1;
		Stop;
	See:
		PLA2 ABCD 4;
		Loop;
	}
}

class Commando : Marine
{
	Default
	{
		Player.ForwardMove 0.85,0.85;
		Player.SideMove 0.85,0.85;
		Player.DisplayName "Commando";
		Player.StartItem "UTNTMinigun";
		Player.StartItem "UTNTFist";
		Player.StartItem "Clip",100;
		Player.MaxHealth 150;
		Health 150;
	}
	
	States
	{
	Spawn:
		PLA4 A -1;
		Stop;
	See:
		PLA4 ABCD 4;
		Loop;
	}
}

class isIntro : Inventory //prevent Motion Blur working over cutscenes if we move mouse, give it to players at start and remove it at level end, or before a cutscene (remove and give again when done)
{
	Default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
	}
}