// Copyright 2020 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// Actors with minimal ticking. Useful for completely non-interactive stuff
//
//===========================================================================

class SaphrDietActor : Actor
{
	bool ticked;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void Tick()
	{
		if (!ticked)
		{
			Super.Tick();
			ticked = true;
			return;
		}

		if (!bNoTimeFreeze && isFrozen()) return;
		if (tics != -1)
		{
			if (--tics <= 0)
			{
				if (!SetState(curstate.NextState)) return;
			}
		}
	}
}

class SaphrDietActorWithVel : SaphrDietActor
{
	override void Tick(void)
	{
		SetXYZ(Vec3Offset(Vel.X, Vel.Y, Vel.Z));
		Super.Tick();
	}
}

//Torm and Ozy codes
Class LightRay_Regular : SwitchableDecoration
{
	Default
	{
		//$Category Sapphire SFX
		//$Title Light Rays, Regular
		DistanceCheck "saphrlod";
		Radius 8;
		Height 16;
		RenderStyle "Translucent";
		Alpha 1.0;
		+NOBLOCKMAP
		+NOGRAVITY
	}
	States
	{
	Spawn:
	Active:
		VOLT A -1 Bright;
		Stop;
	Inactive:
		VOLT A 1;
		TNT1 A -1;
		Stop;
	}
}

Class LightRay_Wallsprite : LightRay_Regular
{
	Default
	{
		//$Title Light Rays, WallSprite
		DistanceCheck "saphrlod";
		+ROLLSPRITE
		+WALLSPRITE
	}
}

Class LightRay2_Regular : LightRay_Regular
{
	Default
	{
		//$Title Light Rays 2, Regular
	}
	
	States
	{
	Spawn:
	Active:
		VOLT B -1 Bright;
		Stop;
	Inactive:
		VOLT B 1;
		TNT1 B -1;
		Stop;
	}
}

Class LightRay2_Wallsprite : LightRay2_Regular
{
	Default
	{
		//$Title Light Rays 2, WallSprite
	}
	
	Default
	{
		+ROLLSPRITE
		+WALLSPRITE
	}
}

Class Grass1 : SaphrDietActor
{
	Default
	{
		Radius 16;
		Height 16;
		Scale 0.5;
		+DONTTHRUST
		+NOTAUTOAIMED
	}
	States
	{
	Spawn:
		GRS1 A -1;
		Stop;
	}
}

Class Grass2 : Grass1
{
	States
	{
	Spawn:
		GRS2 A -1;
		Stop;
	}
}

Class Grass3 : Grass1
{
	States
	{
	Spawn:
		GRS2 A -1;
		Stop;
	}
}

Class GrassSpawner : RandomSpawner
{
	Default
	{
		//$Category Sapphire Props
		//$Title Grass Spawner (random)
		DropItem "Grass1";
		DropItem "Grass2";
		DropItem "Grass3";
		Radius 16;
		Height 16;
		Scale 0.5;
	}
}

Class EndShip : SaphrDietActor
{
	Default
	{
		//$Category Sapphire Models
		//$Title Starship
		DistanceCheck "saphrlod";
		+NOBLOCKMAP
		+NOGRAVITY
	}
	
	States
	{
	Spawn:
		MDLA A -1;
		Stop;
	}
}