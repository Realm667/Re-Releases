version "4.3.3"

const STAT_NashGore_Gore = Thinker.STAT_USER + 1;

// Actor that does the bare minimum of ticking VARIANT, different from DietActor - Use for static, non-interactive actors, derived from bits and pieces of p_mobj.cpp
class SimpleActor : Actor
{
	Vector2 floorxy;
	Vector3 oldpos;

	override void Tick()
	{
		if (IsFrozen()) { return; }

		Vector2 curfloorxy = (curSector.GetXOffset(sector.floor), curSector.GetYOffset(sector.floor)); // Hacky scroll check because MF8_INSCROLLSEC not externalized to ZScript?
		bool dotick = (curfloorxy != floorxy) || curSector.flags & sector.SECF_PUSH || (pos != oldpos);

		if (dotick) // Only run a full Tick once; or if we are on a carrying floor, pushers are enabled in the sector (wind), or if we moved by some external force
		{
			oldpos = pos;
			Super.Tick();
			floorxy = curfloorxy;
			return;
		}

		if (vel != (0, 0, 0)) // Apply velocity as required
		{
			SetXYZ(Vec3Offset(vel.X, vel.Y, vel.Z)); // Vec3Offset is portal-aware; use instead of just pos + vel, which is not
		}

		// Tick through actor states as normal
		if (tics == -1) { return; }
		else if (--tics <= 0)
		{
			SetState(CurState.NextState);
		}
	}
}

class EffectSpawner : SwitchableDecoration //following code has been adapted by Ozymandias81 for this remaster, a bit different from BoA code
{
	transient CVar switchcvar;
	String switchvar;
	int range;
	int chunkx, chunky;

	int flags;

	FlagDef AllowTickDelay:flags, 0;
	FlagDef DoActivation:flags, 1;

	Property Range:range;
	Property SwitchVar:switchvar;

	Default
	{
		+EffectSpawner.DoActivation // Automatically activate/deactivate based on DORMANT flag by default
	}

	States
	{
		Spawn:
		Inactive:
			TNT1 A -1;
			Wait;
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();

		if (switchvar.length()) { switchcvar = CVar.FindCVar(switchvar); }

		if (bDoActivation)
		{
			if (bDormant || SpawnFlags & MTF_DORMANT) { Deactivate(null); }
			else { Activate(null); }
		}

		tics += Random(0, 35);
	}

	override void Activate(Actor activator)
	{
		if (switchcvar && !switchcvar.GetBool()) { SetStateLabel("Inactive"); }
		else
		{
			bDormant = false;
			SetStateLabel("Active");
		}
	}

	override void Deactivate(Actor activator)
	{
		bDormant = true;
		SetStateLabel("Inactive");
	}
}

class ParticleBase : SimpleActor
{
	int checktimer;
	int flags;

	FlagDef CHECKPOSITION:flags, 0;

	States
	{
		Fade:
			"####" "#" 1 A_FadeOut(0.1, FTF_REMOVE);
			Loop;
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();

		// Set the initial check at a random tick so they don't all check at once...
		checktimer = Random(0, 35);
	}

	override void Tick()
	{
		Super.Tick();

		if (bCheckPosition && checktimer-- <= 0)
		{
			// If it's outside the level, remove it
			if (!level.IsPointInLevel(pos)) { Destroy(); return; }

			checktimer = 35; // Check once every second.
		}
	}
}

// Libraries
#include "zscript/INIFile/INIFile.zc"

// Core
#include "zscript/TCOTDGameplayStatics/TCOTDGameplayStatics.zc"
#include "zscript/TCOTDDietActor/TCOTDDietActor.zc"
#include "zscript/TCOTDWeatherFXMixin/TCOTDWeatherFXMixin.zc"

// Sound
#include "zscript/TCOTDSoundPlayer/TCOTDSoundPlayer.zc"
#include "zscript/TCOTDFootstep/TCOTDFootstep.zc"
#include "zscript/TCOTDSiren/TCOTDSiren.zc"

// Items
#include "zscript/TCOTDHealthPickup/TCOTDHealthPickup.zc"
#include "zscript/TCOTDLanternPickup/TCOTDLanternPickup.zc"
#include "zscript/TCOTDLanternOilPickup/TCOTDLanternOilPickup.zc"
#include "zscript/TCOTDPendant/TCOTDPendant.zc"
#include "zscript/TCOTDKey/TCOTDKey.zc"
#include "zscript/TCOTDArmor/TCOTDArmor.zc"

// Bumi (stripped down to snow effects only)
#include "zscript/TCOTDWeatherHandler/TCOTDWeatherHandler.zc"
#include "zscript/TCOTDSnowParticle/TCOTDSnowParticle.zc"

// Weather FX
#include "zscript/TCOTDFogCloud/TCOTDFogCloud.zc"
#include "zscript/TCOTDSnowSpawner/TCOTDSnowSpawner.zc"

// Props and Decorations
#include "zscript/TCOTDSwitchableDecoration/TCOTDSwitchableDecoration.zc"
#include "zscript/TCOTDFireMixin/TCOTDFireMixin.zc"
#include "zscript/TCOTDFireSpawner/TCOTDFireSpawner.zc"
#include "zscript/TCOTDWallTorch/TCOTDWallTorch.zc"
#include "zscript/TCOTDStreetLamp/TCOTDStreetLamp.zc"
#include "zscript/TCOTDMinotaurTorch/TCOTDMinotaurTorch.zc"
#include "zscript/TCOTDTallTorch/TCOTDTallTorch.zc"
#include "zscript/TCOTDInteractiveSwitchableDecoration/TCOTDInteractiveSwitchableDecoration.zc"
#include "zscript/TCOTDCandelabra/TCOTDCandelabra.zc"
#include "zscript/TCOTDCandle/TCOTDCandle.zc"
#include "zscript/TCOTDProp/TCOTDProp.zc"
#include "zscript/TCOTDFlatProp/TCOTDFlatProp.zc"
#include "zscript/TCOTDExplosiveBarrel/TCOTDExplosiveBarrel.zc"
#include "zscript/TCOTDPushPuzz/TCOTDPushPuzz.zc"
#include "zscript/TCOTDMoon/TCOTDMoon.zc"
#include "zscript/TCOTDSOSFlare/TCOTDSOSFlare.zc"

// Dynamic Clutter
#include "zscript/TCOTDClutterHandler/TCOTDClutterHandler.zc"
#include "zscript/TCOTDClutterThinker/TCOTDClutterThinker.zc"

// Foliage
#include "zscript/TCOTDFoliage/TCOTDFoliage.zc"

// Trees
#include "zscript/TCOTDTree/TCOTDTree.zc"

// Player
#include "zscript/TCOTDPlayer/TCOTDPlayer.zc"
#include "zscript/TCOTDPlayerHandler/TCOTDPlayerHandler.zc"

// Monsters
#include "zscript/TCOTDMonster/TCOTDMonster.zc"
#include "zscript/TCOTDMonster/TCOTDCultist.zc"

// Weapons and Ammo
#include "zscript/TCOTDWeapon/TCOTDWeapon.zc"
#include "zscript/TCOTDWeapon/TCOTDWeaponMelee.zc"
#include "zscript/TCOTDWeapon/TCOTDWeaponRevolver.zc"
#include "zscript/TCOTDWeapon/TCOTDWeaponSawedOff.zc"
#include "zscript/TCOTDWeapon/TCOTDWeaponThompson.zc"
#include "zscript/TCOTDWeapon/TCOTDWeaponNapalmLauncher.zc"
#include "zscript/TCOTDAmmo/TCOTDAmmo.zc"
#include "zscript/TCOTDBulletPuff/TCOTDBulletPuff.zc"
#include "zscript/TCOTDEmptyCasing/TCOTDEmptyCasing.zc"

// Misc
#include "zscript/TCOTDExMark/TCOTDExMark.zc"
#include "zscript/TCOTDMoonShelterMarker/TCOTDMoonShelterMarker.zc"
#include "zscript/splashes.zc"
#include "zscript/smoke.zc"

// HUD
#include "zscript/TCOTDHUD/TCOTDHUD.zc"

// NashGore Vengeance
#include "zscript/TCOTDNashgore2/NashGoreCommon.zc"
#include "zscript/TCOTDNashgore2/NashGoreStatics.zc"
#include "zscript/TCOTDNashgore2/NashGoreHandler.zc"
#include "zscript/TCOTDNashgore2/NashGoreBlood.zc"
#include "zscript/TCOTDNashgore2/NashGoreBloodPlane.zc"
#include "zscript/TCOTDNashgore2/NashGoreGibs.zc"
#include "zscript/TCOTDNashgore2/NashGoreCrushedGibs.zc"
#include "zscript/TCOTDNashgore2/NashGoreSquishyGibs.zc"
#include "zscript/TCOTDNashgore2/NashGoreIceChunk.zc"
#include "zscript/TCOTDNashgore2/NashGoreLiquidBlood.zc"
#include "zscript/TCOTDNashgore2/NashGoreWallBlood.zc"
#include "zscript/TCOTDNashgore2/NashGoreActor.zc"
#include "zscript/TCOTDNashgore2/NashGoreMenu.zc"

// Underwater
#include "zscript/underwater.zc"
