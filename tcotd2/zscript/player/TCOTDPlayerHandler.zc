// Copyright 2020 - 2023 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
//
//
//===========================================================================

class TCOTDPlayerHandler : EventHandler
{
	ui double deathAlpha;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void PlayerEntered(PlayerEvent e)
	{
		/*
		PlayerPawn pmo = players[e.PlayerNumber].mo;
		if (pmo)
		{
		}
		*/
	}

	override void PlayerDisconnected(PlayerEvent e)
	{
		/*
		PlayerPawn pmo = players[e.PlayerNumber].mo;
		if (pmo)
		{
		}
		*/
	}

	override void PlayerDied(PlayerEvent e)
	{
		PlayerPawn pmo = players[e.PlayerNumber].mo;

		if (pmo == players[consoleplayer].mo)
		{
			SetMusicVolume(0);
			pmo.A_StartSound("fakemusic/THEEND", CHAN_AUTO, CHANF_UI);
		}
	}

	override void PlayerRespawned(PlayerEvent e)
	{
		PlayerPawn pmo = players[e.PlayerNumber].mo;

		if (pmo == players[consoleplayer].mo)
		{
			SetMusicVolume(snd_musicvolume);
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	/*
	override void WorldLoaded(WorldEvent e)
	{
	}
	*/

	/*
	override void WorldUnloaded(WorldEvent e)
	{
	}
	*/

	override void UITick(void)
	{
		let cplayer = players[consoleplayer];
		let pmo = cplayer.mo;
		if (cplayer && pmo)
		{
			if ((!multiplayer && Menu.GetCurrentMenu()) || paused || TCOTDGameplayStatics.IsConsoleVisible())
				return;

			if (pmo.CountInv("CutsceneEnabled"))
			{
				deathAlpha = 0;
				return;
			}

			if (pmo.player.playerstate == PST_DEAD)
			{
				if (deathAlpha < 1.)
					deathAlpha += 0.00420;

				deathAlpha = clamp(deathAlpha, 0., 1.);
			}
			else
			{
				if (deathAlpha > 0)
					deathAlpha *= 0.666;
			}
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void RenderOverlay(RenderEvent e)
	{
		DrawLowHealth(e);
		DrawDeathScreen(e);
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	ui void DrawDeathScreen(RenderEvent e)
	{
		Color col = Color(0, 0, 0);
		Screen.Dim(col, deathAlpha, 0, 0, Screen.GetWidth(), Screen.GetHeight());
		String txt = StringTable.Localize("$TXT_YOU_DIED");
		Screen.DrawText(BigFont, Font.CR_RED, 160 - (BigFont.StringWidth(txt) / 2), 100, txt, DTA_320x200, true, DTA_Alpha, deathAlpha);
	}

	ui void DrawLowHealth(RenderEvent e)
	{
	}
}
