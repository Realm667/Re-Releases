/*
* TCOTD2 Game Code
* Copyright (C) 2020 - 2023  Nash Muhandes
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//===========================================================================
//
//
//
//===========================================================================

class TCOTDPlayerHandler : EventHandler
{
	const togglemapCmd = "togglemap";
	const useCmd = "+use";
	const journalCmd = "menu_help";

	ui double deathAlpha;

	ui int ticsForTutorial;
	ui bool hasSeenTutorial;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void PlayerEntered(PlayerEvent e)
	{
		let pmo = TCOTDPlayer(players[e.PlayerNumber].mo);
		if (pmo)
		{
			EventHandler.SendInterfaceEvent(pmo.PlayerNumber(), "EV_ClearNoteToRead");
		}
	}

	override void PlayerDisconnected(PlayerEvent e)
	{
		let pmo = TCOTDPlayer(players[e.PlayerNumber].mo);
		if (pmo)
		{
			PlayerCleanup(pmo);
		}
	}

	override void PlayerDied(PlayerEvent e)
	{
		let pmo = TCOTDPlayer(players[e.PlayerNumber].mo);
		if (pmo == players[consoleplayer].mo)
		{
			EventHandler.SendInterfaceEvent(pmo.PlayerNumber(), "EV_ClearNoteToRead");
			SetMusicVolume(0);
			TCOTDSiren.PlayGameOverMusic();
		}
	}

	override void PlayerRespawned(PlayerEvent e)
	{
		if (Level.time == 0)
			return;

		TCOTDPlayer pmo = TCOTDPlayer(players[e.PlayerNumber].mo);
		if (!pmo)
			return;

		if (pmo == players[consoleplayer].mo)
		{
			EventHandler.SendInterfaceEvent(pmo.PlayerNumber(), "EV_ClearNoteToRead");
			SetMusicVolume(snd_musicvolume);
			TCOTDSiren.StopGameOverMusic();
		}

		FindCheckpoint(pmo);

		String txt = String.Format(StringTable.Localize("$COOP_PLAYER_RESPAWN"), pmo.player.GetUserName());

		let campaign = TCOTDCampaign.GetInstance();

		if (tcotd2_survival && campaign.GetSurvivalLives() > -1 && !campaign.GetSurvivalFailed())
		{
			campaign.SetSurvivalLives(campaign.GetSurvivalLives() - 1);
			txt = txt .. "\n\n" .. String.Format(StringTable.Localize("$SURVIVAL_LIVES_LEFT"), campaign.GetSurvivalLives());
		}

		Console.MidPrint(NULL, txt);
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void WorldLoaded(WorldEvent e)
	{
		TCOTDGameplayStatics.DestroyActors("TCOTDPlayerMarker");
	}

	override void WorldUnloaded(WorldEvent e)
	{
		TCOTDGameplayStatics.DestroyActors("TCOTDPlayerMarker");
	}

	/*
	override void WorldTick(void)
	{
	}
	*/

	//===========================================================================
	//
	//
	//
	//===========================================================================

	// didn't want to make a new event handler class just for this lol
	override void WorldThingGround(WorldEvent e)
	{
		// spawn a new actor so that it doesn't inherit the crushed thing's scale
		let mo = e.Thing;
		let gib = mo.Spawn("TCOTDCrushedGib", mo.Pos, ALLOW_REPLACE);
		gib.A_StartSound("gore/gib_squelch", CHAN_BODY);
		gib.Translation = mo.BloodTranslation;
		mo.Destroy();
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void UITick(void)
	{
		let cplayer = players[consoleplayer];
		let pmo = cplayer.mo;
		if (cplayer && pmo)
		{
			if (Menu.GetCurrentMenu() || paused || TCOTDGameplayStatics.IsConsoleVisible())
				return;

			// show the tutorial shortly after reading the note by the boat
			if (!hasSeenTutorial && pmo.CountInv("PickedUpSurvivorNote"))
			{
				if (ticsForTutorial < 15)
				{
					ticsForTutorial++;
				}
				else
				{
					TCOTDTutorialMenu.Show();
					hasSeenTutorial = true;
				}
			}

			if (pmo.CountInv("CutsceneEnabled"))
			{
				deathAlpha = 0;
				return;
			}

			if (pmo.player.playerstate == PST_DEAD)
			{
				if (deathAlpha < 1.)
					deathAlpha += 0.00420;

				deathAlpha = clamp(deathAlpha, 0., 1.);
			}
			else
			{
				if (deathAlpha > 0)
					deathAlpha *= 0.666;
			}
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void RenderOverlay(RenderEvent e)
	{
		DrawLowHealth(e);
		DrawDeathScreen(e);
	}

	override void RenderUnderlay(RenderEvent e)
	{
		DrawPlayerLocator(e);
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void NetworkProcess(ConsoleEvent e)
	{
		TCOTDPlayer pmo = TCOTDPlayer(players[e.Player].mo);
		if (!pmo)
			return;
		if (pmo && !pmo.player)
			return;

		bool isConsolePlayer = (pmo == TCOTDPlayer(players[consoleplayer].mo));

		Array<String> strings;
		strings.Clear();
		e.Name.Split(strings, ":");

		//===========================================================================
		//
		// EV_QuickHealth
		//
		//===========================================================================
		if (e.Name == 'EV_QuickHealth')
		{
			if (pmo.player.playerstate == PST_DEAD)
				return;

			if ((pmo.player.cheats & CF_FROZEN) || (pmo.player.cheats & CF_TOTALLYFROZEN))
				return;

			if (pmo.Health >= 100)
			{
				if (pmo.player == players[consoleplayer])
					Console.Printf(StringTable.Localize("$NONEEDQUICKHEAL"));

				return;
			}

			int pref = CVar.GetCVar("tcotd2_quickhealpref", pmo.player).GetInt();
			pref = clamp(pref, 0, 1);

			HealthPickup hpu;

			if (pref == 0)
			{
				hpu = HealthPickup(pmo.FindInventory("TCOTDHealthPickupStimpack"));
				if (!hpu)
					hpu = HealthPickup(pmo.FindInventory("TCOTDHealthPickupMedikit"));
			}
			else if (pref == 1)
			{
				hpu = HealthPickup(pmo.FindInventory("TCOTDHealthPickupMedikit"));
				if (!hpu)
					hpu = HealthPickup(pmo.FindInventory("TCOTDHealthPickupStimpack"));
			}

			if (!hpu)
			{
				if (pmo.player == players[consoleplayer])
					Console.Printf(StringTable.Localize("$NOQUICKHEAL"));

				return;
			}

			if (hpu && hpu.amount > 0)
			{
				pmo.UseInventory(hpu);

				if (pmo.player == players[consoleplayer])
					Console.Printf(String.Format(StringTable.Localize("$USEDQUICKHEALITEM"), hpu.GetTag().MakeLower()));
			}
		}
		//===========================================================================
		//
		// EV_AddAllObjectives (debug, remove this on release)
		//
		//===========================================================================
		else if (e.Name == 'EV_AddAllObjectives')
		{
			for (int i = AllClasses.Size(); i-- > 0;)
			{
				if (AllClasses[i] is 'TCOTDObjective' && AllClasses[i] != 'TCOTDObjective')
				{
					String objectiveClassName = AllClasses[i].GetClassName();
					TCOTDObjective.Add(objectiveClassName, pmo, true);
				}
			}
		}
		//===========================================================================
		//
		// EV_AddAllNotes (debug, remove this on release)
		//
		//===========================================================================
		else if (e.Name == 'EV_AddAllNotes')
		{
			for (int i = AllClasses.Size(); i-- > 0;)
			{
				if (AllClasses[i] is 'TCOTDNote' && AllClasses[i] != 'TCOTDNote')
				{
					String noteClassName = AllClasses[i].GetClassName();
					pmo.GiveInventory(noteClassName, 1);
				}
			}
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void InterfaceProcess(ConsoleEvent e)
	{
		//===========================================================================
		//
		// EV_RefreshJournalCoop
		//
		//===========================================================================
		if (TCOTDGameplayStatics.IsCoop() && e.Name == 'EV_RefreshJournalCoop')
			TCOTDUIHandler.SetShouldRefreshJournalCoop(true);

		Array<String> strings;
		strings.Clear();
		e.Name.Split(strings, ":");

		let pmo = TCOTDPlayer(players[consoleplayer].mo);
		if (!pmo)
			return;

		if (!e.IsManual && strings.Size() >= 2 && (strings[0] ~== "EV_SetNoteToRead"))
		{
			let cls = strings[1];
			let note = TCOTDNote(pmo.FindInventory(cls));
			if (note)
			{
				pmo.noteToRead = note;
				Menu.SetMenu('TCOTDJournalItemReaderMenu');
			}
		}
		else if (!e.IsManual && (strings[0] ~== "EV_ClearNoteToRead"))
		{
			pmo.noteToRead = NULL;
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override bool InputProcess(InputEvent e)
	{
		/*
		if (CheckUseKey(e))
			return true;
		*/
		if (CheckAutomapKey(e))
			return true;
		if (CheckJournalKey(e))
			return true;
		return Super.InputProcess(e);
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void PlayerCleanup(TCOTDPlayer pmo)
	{
		if (!pmo)
			return;

		pmo.DestroyLantern();
		if (pmo.playerMarker)
			pmo.playerMarker.Destroy();
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void FindCheckpoint(TCOTDPlayer pmo)
	{
		if (!TCOTDGameplayStatics.IsCoop())
			return;

		if (!pmo)
			return;

		let eh = TCOTDCampaignHandler(TCOTDCampaignHandler.Find("TCOTDCampaignHandler"));
		if (eh && eh.checkpoint)
		{
			// to do: vary the respawn pos a bit
			Vector3 sPos =
			(
				eh.checkpoint.Pos.X + cos(eh.checkpoint.Angle) * eh.checkpoint.Radius,
				eh.checkpoint.Pos.Y + sin(eh.checkpoint.Angle) * eh.checkpoint.Radius,
				eh.checkpoint.Pos.Z
			);
			pmo.SetOrigin(sPos, false);
			pmo.Spawn("TCOTDTeleportFog", pmo.Pos, ALLOW_REPLACE);
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	ui void DrawDeathScreen(RenderEvent e)
	{
		if (!TCOTDGameplayStatics.IsCoop() || (TCOTDGameplayStatics.IsCoop() && !tcotd2_survival))
		{
			if (e.Camera != players[consoleplayer].mo)
				return;

			Color col = Color(0, 0, 0);
			Screen.Dim(col, deathAlpha, 0, 0, Screen.GetWidth(), Screen.GetHeight());
			String txt = StringTable.Localize("$TXT_YOU_DIED");
			Screen.DrawText(BigFont, Font.CR_RED, 160 - (BigFont.StringWidth(txt) / 2), 100, txt, DTA_320x200, true, DTA_Alpha, deathAlpha);
		}
	}

	ui void DrawLowHealth(RenderEvent e)
	{
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	ui bool CheckAutomapKey(InputEvent e)
	{
		let pmo = TCOTDPlayer(players[consoleplayer].mo);
		if (!pmo)
			return false;

		if (e.type == InputEvent.Type_KeyDown)
		{
			if (TCOTDGameplayStatics.IsKeyForCommand(e.KeyScan, togglemapCmd))
			{
				//Console.Printf("Pressed the automap key");
				if (pmo.player.playerstate == PST_DEAD || pmo.CountInv("CutsceneEnabled"))
					return true;
			}
		}

		return false;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	/*
	ui bool CheckUseKey(InputEvent e)
	{
		let pmo = TCOTDPlayer(players[consoleplayer].mo);
		if (!pmo)
			return false;

		if (e.type == InputEvent.Type_KeyDown)
		{
			if (TCOTDGameplayStatics.IsKeyForCommand(e.KeyScan, useCmd))
			{
				// don't allow resurrection if the shared pool of lives have run out
				let campaign = TCOTDCampaign.GetInstance();
				if (TCOTDGameplayStatics.IsCoop() && tcotd2_survival && campaign.GetSurvivalLives() <= 0 && pmo.player.playerstate == PST_DEAD)
					return true;
			}
		}

		return false;
	}
	*/

	ui bool CheckJournalKey(InputEvent e)
	{
		let pmo = TCOTDPlayer(players[consoleplayer].mo);
		if (!pmo)
			return false;

		if (e.type == InputEvent.Type_KeyDown)
		{
			if (TCOTDGameplayStatics.IsKeyForCommand(e.KeyScan, journalCmd) && (pmo.player.playerstate == PST_DEAD || pmo.CountInv("CutsceneEnabled")))
			{
				return true;
			}
		}

		return false;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	ui void DrawPlayerLocator(RenderEvent e)
	{
		if (!CVar.GetCVar("tcotd2_playerlocator", players[consoleplayer]).GetBool())
			return;

		if (automapactive)
			return;

		double alpha = 1.0;

		let mnu = Menu.GetCurrentMenu();
		if (mnu)
		{
			alpha = 0.2;

			if (mnu is "ConversationMenu")
				alpha = 0.0;
		}

		let cam = TCOTDPlayer(e.Camera);
		if (!cam)
			return;

		if (!cam.player)
			return;

		if (TCOTDGameplayStatics.IsInCutscene(cam))
			return;

		// store old view clip
		int ox, oy, ow, oh;
		[ox, oy, ow, oh] = Screen.GetClipRect();

		// temporarily set new view clip
		int nx, ny, nw, nh;
		[nx, ny, nw, nh] = Screen.GetViewWindow();
		Screen.SetClipRect(nx, ny, nw, nh);

		TCOTDGutamaticsMatrix worldToClip = TCOTDGutamaticsMatrix.WorldToClip(e.ViewPos, e.ViewAngle, e.ViewPitch, e.ViewRoll, players[consoleplayer].FOV, Screen.GetAspectRatio());

		Actor projActor;
		ThinkerIterator it = ThinkerIterator.Create("TCOTDPlayer");
		while ((projActor = Actor(it.Next())) != NULL)
		{
			// player can't be found
			if (!projActor.player)
				continue;

			// don't draw your own name
			if (projActor == cam)
				continue;

			// fade alpha by distance
			double maxDist = 2000.0;
			double distFade = cam.Distance3D(projActor);
			double distFarFadeStart = maxDist * 0.2;
			if (distFade >= distFarFadeStart)
			{
				double fade = 1.0 - (distFade - distFarFadeStart) / distFarFadeStart;
				alpha *= fade;
			}
			if (alpha < 0.2) alpha = 0.2;

			Vector3 adjustedWorldPos = e.ViewPos + Level.Vec3Diff(e.ViewPos, projActor.Pos);
			Vector3 ndcPos = worldToClip.MultiplyVector3(adjustedWorldPos + (0, 0, projActor.Height)).AsVector3();
			if (ndcPos.Z <= 1 && ndcPos.Z >= -1)
			{
				Vector2 drawPos = TCOTDGutamaticsGlobalMaths.NDCToViewPort(ndcPos);
				String playerName = projActor.player.GetUserName();
				let fnt = SmallFont;
				Screen.DrawText(fnt, Font.CR_White,
					drawPos.X - (fnt.StringWidth(playerName) * CleanXFac / 2.0),
					drawPos.Y - (fnt.GetHeight() * CleanYFac / 2.0),
					playerName,
					DTA_CleanNoMove, true,
					DTA_Alpha, alpha);
			}
		}

		// restore view clip
		Screen.SetClipRect(ox, oy, ow, oh);
	}
}
