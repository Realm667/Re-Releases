/*
* TCOTD2 Game Code
* Copyright (C) 2020 - 2023  Nash Muhandes
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//===========================================================================
//
// TCOTDPlayer
//
//===========================================================================

class TCOTDPlayer : PlayerPawn
{
	// slow walk speed is to help with the church puzzle
	// run speed is original TCOTD2 speed
	const WALK_SPEED = 0.3;
	const RUN_SPEED = 0.6;

	// makes platforming easier by almost eliminating the delay before being able to jump repeatedly
	const EASY_JUMPING = 1;

	const CHAN_AMB_OUTSIDE = 777;
	const CHAN_AMB_INSIDE = 778;

	const SND_VOL_DYNAMIC = 0.00001;

	double strafeInput;
	double moveTiltOsc, underwaterTiltOsc;
	double deathTiltOsc;
	double deathTiltAngle;
	double lastRoll;

	// damage flinching
	double flinchAmount;
	bool wasDamaged;

	int poisonBuildup;

	TCOTDPlayerLanternLight myLantern;
	TCOTDPlayerMarker playerMarker;
	double ambSoundVolOut;

	const FOOTSTEP_COUNTER_MAX = 85.;
	double footstepCounter;

	TCOTDNote noteToRead;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		Scale 1.1;
		Player.DamageScreenColor "000001", 0, "PoisonAilment";
		Player.AttackZOffset 28.0;
		Player.ViewHeight 56.0;
		Player.ForwardMove WALK_SPEED, RUN_SPEED;
		Player.SideMove WALK_SPEED, RUN_SPEED;
		Player.JumpZ 8.00001;
		Player.ViewBob 0.75;
		Player.DisplayName "$TCOTDPLAYER_DISPLAYNAME";
		Player.CrouchSprite "PLAY";
		Player.StartItem "TCOTDWeaponMelee";
		Player.StartItem "TCOTDJournalItem";
		Player.StartItem "TCOTDGhostDamageHandler";
		Player.WeaponSlot 1, "TCOTDWeaponMelee";
		Player.WeaponSlot 2, "TCOTDWeaponRevolver";
		Player.WeaponSlot 3, "TCOTDWeaponSawedOff";
		Player.WeaponSlot 4, "TCOTDWeaponThompson";
		Player.WeaponSlot 5, "TCOTDWeaponNapalmLauncher";
		+CASTSPRITESHADOW
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void Tick(void)
	{
		if (!player || !player.mo || player.mo != self)
		{
			Super.Tick();
			return;
		}

		Super.Tick();

		DoFootSteps();
		UpdateAmbientSoundLoop();
		UpdateViewRoll();
		UpdateLantern();
		DoPlayerMarker();

		// reset damage indicator
		wasDamaged = false;
	}

	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		if (inflictor)
		{
			// flinch view
			flinchAmount = double(damage);
			wasDamaged = true;
		}

		int dmg = Super.DamageMobj(inflictor, source, damage, mod, flags, angle);

		if (dmg > 0)
		{
			if (health > 0 && mod == 'Poison')
			{
				poisonBuildup += dmg;

				if (poisonBuildup > 50)
				{
					GiveInventory("TCOTDPoisonAilment", 1);
				}
			}

			if (inflictor)
			{
				// Nightmare's blinding effect.
				if (inflictor is 'KDiZDNightmare')
				{
					A_SetBlend("Black", 0.85, 190);
				}

				// Soul Harvester's life steal ability. The damage dealt returns as health to the monster.
				if (source && inflictor is 'SoulHarvesterBall')
				{
					source.GiveBody(dmg);
				}
			}
		}

		return dmg;
	}

	override void PlayerThink(void)
	{
		Super.PlayerThink();

		if (!(player.cheats & CF_PREDICTING))
		{
			if (tcotd2_debug)
			{
				A_SetSpeed(2.0);
				A_SetHealth(666);
				A_GiveInventory("TCOTDPlayerDebugDamagePower", 1);
			}
			else
			{
				if (CountInv("TCOTDPlayerDebugDamagePower"))
				{
					A_SetSpeed(Default.Speed);
					A_SetHealth(100);
					TakeInventory("TCOTDPlayerDebugDamagePower", int.max);
				}
			}

			// handle lantern dynamic light
			let lp = TCOTDLanternPickup(FindInventory("TCOTDLanternPickup", true));
			if (lp)
			{
				if (lp.active)
				{
					SpawnLantern();
				}
				else
				{
					DestroyLantern();
				}
			}

			// [Blue Shadow] Reduce poison buildup every 12 seconds.
			if (poisonBuildup > 0 && !(Level.maptime % (12 * TICRATE)))
			{
				poisonBuildup -= 2;
				if (poisonBuildup < 0) poisonBuildup = 0;
			}
		}
	}

	override void CheckJump(void)
	{
		// [Nash] auto-bunnyhopping
		if (EASY_JUMPING)
		{
			if (player.onground && player.jumpTics > 0)
				player.jumpTics = 1;
		}

		Super.CheckJump();
	}

	override Vector2 BobWeapon(double ticfrac)
	{
		// [Nash] scale the weapon bobbing to player movement speed
		Vector2 bob = Super.BobWeapon(ticfrac);
		bob.X *= Vel.XY.Length() / 10.0;
		bob.Y *= Vel.XY.Length() / 10.0;
		return bob;
	}

	override void CalcHeight(void)
	{
		// currently just a straight copy/paste with only faster Z viewbob
		// really customize this shit in future pls

		let player = self.player;
		double angle;
		double bob;
		bool still = false;

		// Regular movement bobbing
		// (needs to be calculated for gun swing even if not on ground)

		// killough 10/98: Make bobbing depend only on player-applied motion.
		//
		// Note: don't reduce bobbing here if on ice: if you reduce bobbing here,
		// it causes bobbing jerkiness when the player moves from ice to non-ice,
		// and vice-versa.

		if (player.cheats & CF_NOCLIP2)
		{
			player.bob = 0;
		}
		else if (bNoGravity && !player.onground)
		{
			player.bob = 0.5;
		}
		else
		{
			player.bob = player.Vel dot player.Vel;
			if (player.bob == 0)
			{
				still = true;
			}
			else
			{
				player.bob *= player.GetMoveBob();

				if (player.bob > MAXBOB)
					player.bob = MAXBOB;
			}
		}

		double defaultviewheight = ViewHeight + player.crouchviewdelta;

		if (player.cheats & CF_NOVELOCITY)
		{
			player.viewz = pos.Z + defaultviewheight;

			if (player.viewz > ceilingz-4)
				player.viewz = ceilingz-4;

			return;
		}

		if (still)
		{
			if (player.health > 0)
			{
				angle = Level.maptime / (120 * TICRATE / 35.) * 360.;
				bob = player.GetStillBob() * sin(angle);
			}
			else
			{
				bob = 0;
			}
		}
		else
		{
			// [Nash] I only changed these for now, heh
			angle = Level.maptime / (13 * TICRATE / 35.) * 360.;
			bob = player.bob * sin(angle) * (WaterLevel > 1 ? 0.15f : 0.17f);

			// scale the bobbing by movement speed
			bob *= Vel.XY.Length() / 10.0;
		}

		// move viewheight
		if (player.playerstate == PST_LIVE)
		{
			player.viewheight += player.deltaviewheight;

			if (player.viewheight > defaultviewheight)
			{
				player.viewheight = defaultviewheight;
				player.deltaviewheight = 0;
			}
			else if (player.viewheight < (defaultviewheight/2))
			{
				player.viewheight = defaultviewheight/2;
				if (player.deltaviewheight <= 0)
					player.deltaviewheight = 1 / 65536.;
			}

			if (player.deltaviewheight)
			{
				player.deltaviewheight += 0.25;
				if (!player.deltaviewheight)
					player.deltaviewheight = 1/65536.;
			}
		}

		if (player.morphTics)
		{
			bob = 0;
		}
		player.viewz = pos.Z + player.viewheight + (bob * clamp(ViewBob, 0. , 1.5)); // [SP] Allow DECORATE changes to view bobbing speed.
		if (Floorclip && player.playerstate != PST_DEAD
			&& pos.Z <= floorz)
		{
			player.viewz -= Floorclip;
		}
		if (player.viewz > ceilingz - 4)
		{
			player.viewz = ceilingz - 4;
		}
		if (player.viewz < floorz + 4)
		{
			player.viewz = floorz + 4;
		}
	}

	override void DeathThink(void)
	{
		let player = self.player;
		int dir;
		double delta;

		player.Uncrouch();
		TickPSprites();

		player.onground = (pos.Z <= floorz);
		if (self is "PlayerChunk")
		{
			// Flying bloody skull or flying ice chunk
			player.viewheight = 6;
			player.deltaviewheight = 0;
			if (player.onground)
			{
				if (Pitch > -19.)
				{
					double lookDelta = (-19. - Pitch) / 8;
					Pitch += lookDelta;
				}
			}
		}
		else if (!bIceCorpse)
		{ // Fall to ground (if not frozen)
			player.deltaviewheight = 0;
			if (player.viewheight > 6)
			{
				player.viewheight -= 1;
			}
			if (player.viewheight < 6)
			{
				player.viewheight = 6;
			}
			if (Pitch < 0)
			{
				Pitch += 3;
			}
			else if (Pitch > 0)
			{
				Pitch -= 3;
			}
			if (abs(Pitch) < 3)
			{
				Pitch = 0.;
			}
		}
		player.mo.CalcHeight ();

		if (player.attacker && player.attacker != self)
		{
			// Watch killer
			double diff = deltaangle(angle, AngleTo(player.attacker));
			double delta = abs(diff);

			if (delta < 10)
			{
				// Looking at killer, so fade damage and poison counters
				if (player.damagecount)
				{
					player.damagecount--;
				}
				if (player.poisoncount)
				{
					player.poisoncount--;
				}
			}
			delta /= 8;
			Angle += clamp(diff, -5., 5.);
		}
		else
		{
			if (player.damagecount)
			{
				player.damagecount--;
			}
			if (player.poisoncount)
			{
				player.poisoncount--;
			}
		}

		// [TCOTD2] coop survival mode
		// don't allow resurrection if the shared pool of lives have run out
		// TO DO: make this a virtual (CheckRespawn(), needs GZDoom PR) so that we don't have to copy/paste all of DeathThink just to get here
		// also add bRespawn to easily enable lives system without a custom PlayerPawn (for universal mods)
		let campaign = TCOTDCampaign.GetInstance();
		if (TCOTDGameplayStatics.IsCoop() && tcotd2_survival && campaign.GetSurvivalLives() <= 0 && player.playerstate == PST_DEAD)
			return;

		if ((player.cmd.buttons & BT_USE ||
			((deathmatch || alwaysapplydmflags) && sv_forcerespawn)) && !sv_norespawn)
		{
			if (Level.maptime >= player.respawn_time || ((player.cmd.buttons & BT_USE) && player.Bot == NULL))
			{
				// Force a new class if the player is using a random class
				player.cls = NULL;
				player.playerstate = (multiplayer || level.AllowRespawn || sv_singleplayerrespawn || G_SkillPropertyInt(SKILLP_PlayerRespawn)) ? PST_REBORN : PST_ENTER;
				if (special1 > 2)
				{
					special1 = 0;
				}
			}
		}
	}

	override void CheatGive (String name, int amount)
	{
		if (player.mo == null || player.health <= 0)
		{
			return;
		}

		int giveall = ALL_NO;

		if (name ~== "all")
		{
			giveall = ALL_YES;
		}
		else if (name ~== "everything")
		{
			giveall = ALL_YESYES;
		}

		if (giveall || name ~== "pitchfork")
		{
			GiveInventory("TCOTDPitchforkPickup", 1, true);

			if (!giveall)
				return;
		}

		if (giveall || name ~== "armor")
		{
			GiveInventory("TCOTDSuperArmor", 1, true);

			if (!giveall)
				return;
		}

		Super.CheatGive(name, amount);
	}

	override void CheatTake (String name, int amount)
	{
		if (player.mo == NULL || player.health <= 0)
		{
			return;
		}

		bool takeall = name ~== "all";

		if (takeall || name ~== "pitchfork")
		{
			TakeInventory("TCOTDPitchforkPickup", 1);

			if (!takeall)
				return;
		}

		Super.CheatTake(name, amount);
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void UpdateViewRoll(void)
	{
		// CVARS ///////////////////////////////////////////////////////////////
		// CVars don't need to be cached anymore and can be called every tick with no performance impact >8]
		bool enableTiltEffects =  CVar.GetCVar("tcotd2_tilteffects", player).GetBool();
		bool strafeTiltEnabled = enableTiltEffects;
		bool moveTiltEnabled = false;
		bool turnTiltEnabled = enableTiltEffects;
		bool underwaterTiltEnabled = enableTiltEffects;
		bool deathTiltEnabled = true;

		double strafeTiltSpeed = 0.25;
		double strafeTiltAngle = 2.5;
		bool strafeTiltReversed = false;

		double moveTiltScalar = 0.4;
		double moveTiltAngle = 0.033;
		double moveTiltSpeed = 18.0;

		double turnTiltScalar = 2.0;
		bool turnTiltReversed = false;

		double underwaterTiltSpeed = 0.8;
		double underwaterTiltAngle = 0.05;
		double underwaterTiltScalar = 1.0;

		double flinchFactor = double(enableTiltEffects);

		// Shared variables we'll need later
		double r = 0.0, v = 0.0;

		//===========================================================================
		//
		// Strafe Tilting
		//
		//===========================================================================

		// normalized strafe input
		if (strafeTiltEnabled && TCOTDGameplayStatics.IsOnFloor(self) && Health > 0)
		{
			int dir;
			if (strafeTiltReversed) dir = -1;
			else dir = 1;
			strafeInput = strafeTiltSpeed * (GetPlayerInput(MODINPUT_SIDEMOVE) / 10240.0);
			strafeInput *= strafeTiltAngle;
			strafeInput *= dir;

			// tilt!
			lastRoll += strafeInput;
		}

		//===========================================================================
		//
		// Movement Tilting
		//
		//===========================================================================

		if (moveTiltEnabled && TCOTDGameplayStatics.IsOnFloor(self) && Health > 0)
		{
			// get player's velocity
			v = TCOTDGameplayStatics.GetVelocity(self) * moveTiltScalar;

			// increment angle
			moveTiltOsc += moveTiltSpeed;

			// clamp angle
			if (moveTiltOsc >= 360. || moveTiltOsc < 0.)
			{
				moveTiltOsc = 0.;
			}

			// calculate roll
			r = sin(moveTiltOsc);
			r *= moveTiltAngle;
			r *= v;

			// tilt!
			double movebobfac = (1.0 * GetCVar("movebob") / 0.25);
			r *= movebobfac;
			lastRoll += r;
		}

		//===========================================================================
		//
		// Turn Tilting
		//
		//===========================================================================

		if (turnTiltEnabled && Health > 0)
		{
			// get player look input
			double xinput = GetPlayerInput(MODINPUT_YAW) * (turnTiltReversed ? -1 : 1);
			xinput = turnTiltScalar * xinput / 32767.0;
			r = xinput;

			// tilt!
			double movebobfac = (1.0 * GetCVar("movebob") / 0.25);
			r *= movebobfac;
			lastRoll += r;
		}

		//===========================================================================
		//
		// Underwater Tilting
		//
		//===========================================================================

		if (WaterLevel >= 3 && underwaterTiltEnabled)
		{
			// fixed rate of 15
			v = 15. * underwaterTiltScalar;

			// increment angle
			underwaterTiltOsc += underwaterTiltSpeed;

			// clamp angle
			if (underwaterTiltOsc >= 360. || underwaterTiltOsc < 0.)
			{
				underwaterTiltOsc = 0.;
			}

			// calculate roll
			r = sin(underwaterTiltOsc);
			r *= underwaterTiltAngle;
			r *= v;

			// tilt!
			lastRoll += r;
		}

		//===========================================================================
		//
		// Death Tilting by Nash + & Siren Attack check by Ozy81
		//
		//===========================================================================

		if (Health <= 0 && deathTiltEnabled)
		{
			double deathTiltSpeed = 1.0;

			if (deathTiltAngle == 0)
			{
				// vary the angle a little
				deathTiltAngle = -90.f;
				deathTiltAngle += frandom[rnd_TiltPlusPlus](-45.f, 45.f);
				deathTiltAngle *= RandomPick[rnd_TiltPlusPlus](-1, 1);
			}

			if (deathTiltOsc < 22.5)
			{
				deathTiltOsc += deathTiltSpeed;
			}

			r = sin(deathTiltOsc);
			r *= deathTiltAngle;

			// tilt!
			lastRoll += r;
		}
		else
		{
			deathTiltOsc = 0;
			deathTiltAngle = 0;
		}

		//===========================================================================
		//
		// Damage flinching
		//
		//===========================================================================
		if (wasDamaged)
		{
			// cap the tilt amount
			flinchAmount = clamp(flinchAmount, 0, 45);

			flinchAmount *= flinchFactor;

			lastRoll += frandomPick[rnd_TiltPlusPlus](-flinchAmount, flinchAmount);
			flinchAmount = 0;
		}

		//===========================================================================
		//
		// Tilt Post Processing
		//
		//===========================================================================

		if (abs(lastRoll) > 0.000001)
		{
			// Stabilize tilt
			lastRoll *= 0.75;
		}

		// Apply the sum of all rolling routines
		// (including after stabilization)
		A_SetViewRoll((ViewRoll + lastRoll) * 0.5, SPF_INTERPOLATE);
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void SpawnLantern(void)
	{
		if (!myLantern)
		{
			myLantern = TCOTDPlayerLanternLight(Spawn("TCOTDPlayerLanternLight", Pos, NO_REPLACE));

			if (myLantern)
			{
				// A_Warp needs a built-in pointer
				myLantern.Tracer = self;
			}
		}
	}

	void DestroyLantern(void)
	{
		if (myLantern)
		{
			myLantern.Destroy();
		}
	}

	void UpdateLantern(void)
	{
		// to do: use a line trace to offset the light position
		// this will fix the big where the light will disappear when
		// getting too close to walls
		if (!myLantern)
			return;
		double forwardOffset = 6.0;
		double sideOffset = 10.0;
		double heightOffset = player.ViewHeight - 8.0;
		double angleOffset = 9.0;
		double pitchOffset = -5.0;
		int warpFlags = WARPF_BOB | WARPF_INTERPOLATE | WARPF_COPYPITCH | WARPF_COPYVELOCITY;
		myLantern.A_Warp
		(
			AAPTR_TRACER,
			forwardOffset, sideOffset, heightOffset,
			angle: angleOffset,
			warpFlags,
			pitch: pitchOffset
		);
	}

	static bool ACS_IsLanternLit(Actor activator)
	{
		bool ret = false;
		if (activator && activator.player)
		{
			let pmo = TCOTDPlayer(activator);
			if (pmo && pmo.myLantern)
			{
				ret = true;
			}
		}
		return ret;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void UpdateAmbientSoundLoop(void)
	{
		if (Level.maptime < 35)
			return;

		if (self == players[consoleplayer].mo)
		{
			if (!IsActorPlayingSound(CHAN_AMB_OUTSIDE, "playerambient/wind"))
				A_StartSound("playerambient/wind", CHAN_AMB_OUTSIDE, CHANF_LOOP, volume: SND_VOL_DYNAMIC, attenuation: ATTN_NONE);

			if (!IsActorPlayingSound(CHAN_AMB_INSIDE, "playerambient/darkroom"))
				A_StartSound("playerambient/darkroom", CHAN_AMB_INSIDE, CHANF_LOOP, volume: SND_VOL_DYNAMIC, attenuation: ATTN_NONE);

			let cam = players[consoleplayer].camera;
			if (cam)
			{
				if (cam.ceilingpic == skyflatnum)
					ambSoundVolOut += 0.05;
				else
					ambSoundVolOut -= 0.05;

				ambSoundVolOut = clamp(ambSoundVolOut, 0, 1);

				A_SoundVolume(CHAN_AMB_OUTSIDE, ambSoundVolOut * 0.17);
				A_SoundVolume(CHAN_AMB_INSIDE, (1. - ambSoundVolOut) * 0.33);
			}
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	private sound GetFootstepSound(void)
	{
		// default sound
		Sound ret = "floor/default";

		// use sound from terrain, if it exists
		let tr = GetFloorTerrain();
		if (tr && tr.LeftStepSound)
		{
			ret = tr.LeftStepSound;
		}

		return ret;
	}

	void DoFootsteps(void)
	{
		// immediately play a footstep sound if standing still
		if (player.onground && Vel.XY.Length() ~== 0)
		{
			footstepCounter = FOOTSTEP_COUNTER_MAX;
			return;
		}

		// no need to play footsteps when in deep water
		if (WaterLevel > 1)
			return;

		bool shouldPlayFootstepSound = false;

		// get character velocity
		double aVel = TCOTDGameplayStatics.GetVelocity(self, xyOnly: true);

		// don't bother if moving too slow
		if (aVel < 0.1)
			return;

		// set the sound volume
		double vol = min(aVel * 0.1, 1.0);
		//vol *= 0.7;
		if (CheckLocalView())
			vol *= CVar.GetCVar("tcotd2_footstepvolume", player).GetFloat();
		vol = clamp(vol, 0.0, 1.0);

		// clamp the velocity value to pleasing values
		// yay magic numbers!
		aVel = clamp(aVel, 2.24, 7.35);

		// add to counter if moving, decrease it otherwise
		if (aVel < 0.01)
			footstepCounter *= 0.5;
		else
			footstepCounter += aVel;

		// play the footstep sound
		if (footstepCounter > FOOTSTEP_COUNTER_MAX)
		{
			shouldPlayFootstepSound = true;
		}

		if (shouldPlayFootstepSound)
		{
			// TO DO: is Z offset portal aware or not?
			Vector3 sPos =
			(
				0.0,
				0.0,
				TCOTDFootstep.GetZOffset(self)
			);
			let fs = TCOTDFootstep(self.Spawn("TCOTDFootstep", self.Pos + sPos, NO_REPLACE));
			if (fs)
			{
				fs.pmo = self;
				fs.vol = vol;
				fs.snd = GetFootstepSound();
			}

			// reset footstep counter
			footstepCounter = 0;
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void DoPlayerMarker(void)
	{
		if (!multiplayer || TCOTDGameplayStatics.IsDeathmatch() || player.playerstate == PST_DEAD)
			return;

		if (!playerMarker)
		{
			playerMarker = TCOTDPlayerMarker(Spawn("TCOTDPlayerMarker", Pos, ALLOW_REPLACE));
			//playerMarker.args[2] = 1;
		}

		if (playerMarker)
		{
			playerMarker.SetXYZ(Pos);
			if (player.playerstate == PST_DEAD)
				playerMarker.Destroy();
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		PLAY A -1;
		Loop;
	See:
		PLAY ABCD 4;
		Loop;
	Missile:
		PLAY E 12;
		Goto Spawn;
	Melee:
		PLAY F 6 Bright;
		Goto Missile;
	Pain.Fear2:
		PLAY G 0 A_SetBlend("White",0.85,190);
		Goto Pain;
	Pain:
		PLAY G 4;
		PLAY G 4 A_Pain();
		Goto Spawn;
	Death.Fear2: //only from Siren
		PLAY H 0 A_SetBlend("White",-1,999);
		PLAY H 35; //let's wait so we can see the roll death effect
		PLAY H 0 A_GiveInventory("Madness", 1);
	Death:
		PLAY H 10;
		PLAY I 10 A_PlayerScream();
		PLAY J 10 A_NoBlocking();
		PLAY KLM 10;
		PLAY N -1;
		Stop;
	XDeath:
		PLAY O 5;
		PLAY P 5 A_XScream();
		PLAY Q 5 A_NoBlocking();
		PLAY RST 5;
		PLAY U -1;
		Stop;
	}
}

class TCOTDPlayerDebugDamagePower : PowerDamage
{
	Default
	{
		DamageFactor "Normal", 6666;
	}
}

class TCOTDPlayerLanternLight : Actor
{
	Default
	{
		+NOINTERACTION
	}

	States
	{
		Spawn:
			TNT1 A 4 NoDelay Light("LANT01");
			TNT1 A 4 Light("LANT02");
		SpawnLoop:
			TNT1 A 4 Light("LANT03") A_SetTics(random[rnd_PLanternLight](1, 3));
			Loop;
	}
}

// Dummy item for hiding the HUD
class CutsceneEnabled : Inventory
{
	override void AttachToOwner(Actor other)
	{
		Super.AttachToOwner(other);
		if (Owner && Owner is "PlayerPawn")
		{
			Owner.A_StopAllSounds();
		}
	}

	States
	{
	Spawn:
		TNT1 A -1;
		Stop;
	}
}

class isIntro : Inventory //prevent Motion Blur working over cutscenes if we move mouse, give it to players at start and remove it at level start
{
	Default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
	}
}

//for Nightmare
class PowerFear : PowerSpeed
{
	Default
	{
		Powerup.Duration -4;
		Speed 0.33;
	}
}

class Madness : PowerupGiver
{
	Default
	{
		+Inventory.AUTOACTIVATE
		+Inventory.ADDITIVETIME
		-Inventory.INVBAR
		Powerup.Type "PowerFear";
	}
}
