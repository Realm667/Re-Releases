// Copyright 2020 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// The Pendant of Ill Omen
//
//===========================================================================

class TCOTDPendant : Inventory
{
	int next;
	int nextMax;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		//$Category New Items (TCOTD2)
		//$Title Pendant of Ill Omen
		//$Color 6
		Tag "$TAG_PENDANT";
		Inventory.PickupMessage "$IP_PENDANT";
		Inventory.MaxAmount 1;
		+Inventory.UNDROPPABLE
		-Inventory.INVBAR
	}

	override void DoEffect(void)
	{
		next = ACS_ScriptCall("NightmareGetCountdown", 0) / 35;
		nextMax = ACS_ScriptCall("NightmareGetCountdownMax", 0) / 35;
		//Console.Printf("next nightmare in %d seconds", next);
	}

	States
	{
	Spawn:
		PEND A -1 Bright;
		Stop;
	}
}
