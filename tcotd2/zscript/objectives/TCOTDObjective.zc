/*
* TCOTD2 Game Code
* Copyright (C) 2020 - 2023  Nash Muhandes
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//===========================================================================
//
// TCOTDObjective
//
//===========================================================================

class TCOTDObjective : Inventory abstract
{
	enum EObjectiveState
	{
		OBJECTIVE_INCOMPLETE,
		OBJECTIVE_COMPLETE,
		OBJECTIVE_FAIL
	}

	private uint objectiveState;

	Default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		+Inventory.UNDROPPABLE
		+Inventory.UNTOSSABLE
		-Inventory.INVBAR
	}

	override void AttachToOwner(Actor other)
	{
		Super.AttachToOwner(other);

		if (Owner && Owner is "PlayerPawn")
		{
			String newTag = "";

			if (GetClass() == "TCOTDObjective")
				newTag = "$OBJECTIVE_DEFAULT";
			else
				newTag = "$OBJECTIVE_" .. String.Format("%s", String.Format("%s", GetClassName()).Mid("TCOTDObjective".Length())).MakeUpper();

			SetTag(newTag);
		}
	}

	static void Add(class<TCOTDObjective> cls, PlayerPawn pmo = NULL)
	{
		if (!pmo || !cls)
			return;

		// if no player is specified, add it to all players
		if (pmo)
		{
			pmo.GiveInventory(cls, 1);
		}
		else
		{
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (playeringame[i])
				{
					let pmo = players[i].mo;
					pmo.GiveInventory(cls, 1);
				}
			}
		}
	}

	static void Delete(class<TCOTDObjective> cls, PlayerPawn pmo = NULL)
	{
		if (!pmo || !cls)
			return;

		// if no player is specified, delete it from all players
		if (pmo)
		{
			pmo.TakeInventory(cls, int.max);
		}
		else
		{
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (playeringame[i])
				{
					let pmo = players[i].mo;
					pmo.TakeInventory(cls, int.max);
				}
			}
		}
	}

	private static void SetCompletion(class<TCOTDObjective> cls, uint set, PlayerPawn pmo = NULL)
	{
		if (!pmo || !cls)
			return;

		// if no player is specified, complete it for all players
		if (pmo)
		{
			let obj = TCOTDObjective(pmo.FindInventory(cls));
			if (obj)
			{
				obj.objectiveState = set;
			}
		}
		else
		{
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (playeringame[i])
				{
					let pmo = players[i].mo;
					let obj = TCOTDObjective(pmo.FindInventory(cls));
					if (obj)
					{
						obj.objectiveState = set;
					}
				}
			}
		}
	}

	static void Complete(class<TCOTDObjective> cls, PlayerPawn pmo = NULL)
	{
		SetCompletion(cls, TCOTDObjective.OBJECTIVE_COMPLETE, pmo);
	}

	static void Incomplete(class<TCOTDObjective> cls, PlayerPawn pmo = NULL)
	{
		SetCompletion(cls, TCOTDObjective.OBJECTIVE_INCOMPLETE, pmo);
	}

	static void Fail(class<TCOTDObjective> cls, PlayerPawn pmo = NULL)
	{
		SetCompletion(cls, TCOTDObjective.OBJECTIVE_FAIL, pmo);
	}
}
