/*
* TCOTD2 Game Code
* Copyright (C) 2020 - 2023  Nash Muhandes
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//===========================================================================
//
// TCOTDObjective
//
//===========================================================================

class TCOTDObjective : Inventory abstract
{
	enum EObjectiveState
	{
		OBJECTIVE_INCOMPLETE,
		OBJECTIVE_COMPLETE,
		OBJECTIVE_FAIL
	}

	private uint objectiveState;

	Default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		+Inventory.UNDROPPABLE
		+Inventory.UNTOSSABLE
		-Inventory.INVBAR
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void AttachToOwner(Actor other)
	{
		Super.AttachToOwner(other);

		if (Owner && Owner is "TCOTDPlayer")
		{
			String newTag = "";

			if (GetClass() == "TCOTDObjective")
				newTag = "$OBJECTIVE_DEFAULT";
			else
				newTag = "$OBJECTIVE_" .. String.Format("%s", String.Format("%s", GetClassName()).Mid("TCOTDObjective".Length())).MakeUpper();

			SetTag(newTag);

			NotifyObjectiveAdded();
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	clearscope uint GetObjectiveState(void)
	{
		return objectiveState;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	static void AddFromACS(Actor activator, String clsName, bool allPlayers)
	{
		TCOTDObjective.Add(clsName, activator, allPlayers);
	}

	static void CompleteFromACS(Actor activator, String clsName, bool allPlayers)
	{
		TCOTDObjective.Complete(clsName, activator, allPlayers);
	}

	static void FailFromACS(Actor activator, String clsName, bool allPlayers)
	{
		TCOTDObjective.Fail(clsName, activator, allPlayers);
	}

	static void DeleteFromACS(Actor activator, String clsName, bool allPlayers)
	{
		TCOTDObjective.Delete(clsName, activator, allPlayers);
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	static void Add(String clsName, Actor activator, bool allPlayers)
	{
		class<TCOTDObjective> cls = clsName;
		if (!cls)
			return;

		let pmo = TCOTDPlayer(activator);
		if (!pmo)
			return;

		if (allPlayers)
		{
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (playeringame[i])
				{
					let apmo = players[i].mo;
					apmo.GiveInventory(cls, 1);
				}
			}
		}
		else
		{
			pmo.GiveInventory(cls, 1);
		}

		EventHandler.SendInterfaceEvent(consoleplayer, "EV_RefreshJournalCoop");
	}

	static void Delete(class<TCOTDObjective> cls, Actor activator, bool allPlayers)
	{
		if (!cls)
			return;

		let pmo = TCOTDPlayer(activator);
		if (!pmo)
			return;

		if (allPlayers)
		{
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (playeringame[i])
				{
					let apmo = players[i].mo;
					apmo.TakeInventory(cls, int.max);
				}
			}
		}
		else
		{
			pmo.TakeInventory(cls, int.max);
		}

		EventHandler.SendInterfaceEvent(consoleplayer, "EV_RefreshJournalCoop");
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	private static void SetCompletion(class<TCOTDObjective> cls, uint set, Actor activator, bool allPlayers)
	{
		if (!cls)
			return;

		let pmo = TCOTDPlayer(activator);
		if (!pmo)
			return;

		if (allPlayers)
		{
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (playeringame[i])
				{
					let apmo = players[i].mo;
					let obj = TCOTDObjective(apmo.FindInventory(cls));

					// the player doesn't have the objective, so forcefully add it
					if (!obj)
					{
						apmo.GiveInventory(cls, 1);
						obj = TCOTDObjective(apmo.FindInventory(cls));
					}

					if (obj)
					{
						if (obj.objectiveState != set)
						{
							obj.objectiveState = set;
							obj.NotifyCompletion(set);
						}
					}
				}
			}
		}
		else
		{
			let obj = TCOTDObjective(pmo.FindInventory(cls));
			if (obj)
			{
				if (obj.objectiveState != set)
				{
					obj.objectiveState = set;
					obj.NotifyCompletion(set);
				}
			}
		}

		EventHandler.SendInterfaceEvent(consoleplayer, "EV_RefreshJournalCoop");
	}

	static void Complete(class<TCOTDObjective> cls, Actor activator, bool allPlayers)
	{
		if (!cls)
			return;

		SetCompletion(cls, TCOTDObjective.OBJECTIVE_COMPLETE, activator, allPlayers);
	}

	static void Incomplete(class<TCOTDObjective> cls, Actor activator, bool allPlayers)
	{
		if (!cls)
			return;

		SetCompletion(cls, TCOTDObjective.OBJECTIVE_INCOMPLETE, activator, allPlayers);
	}

	static void Fail(class<TCOTDObjective> cls, Actor activator, bool allPlayers)
	{
		if (!cls)
			return;

		SetCompletion(cls, TCOTDObjective.OBJECTIVE_FAIL, activator, allPlayers);
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	private void NotifyObjectiveAdded(void)
	{
		if (Owner == players[consoleplayer].mo)
		{
			// to do: make this queued, add a fancy text drawer and sound like in the Bethesda games?
			String txt = String.Format(StringTable.Localize("$JRNL_OBJECTIVE_ADDED"), GetTag());
			Console.Printf(txt);
		}
	}

	private void NotifyCompletion(uint set)
	{
		if (!Owner)
			return;

		String txt = "";
		if (set == TCOTDObjective.OBJECTIVE_COMPLETE)
		{
			txt = String.Format(StringTable.Localize("$JRNL_OBJECTIVE_COMPLETE"), GetTag());
		}
		else if (set == TCOTDObjective.OBJECTIVE_FAIL)
		{
			txt = String.Format(StringTable.Localize("$JRNL_OBJECTIVE_FAIL"), GetTag());
		}

		if (Owner == players[consoleplayer].mo)
		{
			Console.Printf(txt);
		}
	}
}
