// Copyright 2023 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// TCOTDCampaign
// A persistent singleton to store info about the current campaign
//
//===========================================================================

class TCOTDCampaign : Thinker
{
	// mark this game as a multiplayer game.
	// this is to prevent loading a single player save into a multiplayer session,
	// which would most likely break things, so we don't allow it.
	bool isCoopGame;

	// mark this game as survival coop
	bool isSurvival;
	bool survivalFailed;
	int8 survivalLives;

	bool initDone;

	int campaignTime;

	bool shouldAutosave;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	TCOTDCampaign Init(void)
	{
		ChangeStatNum(STAT_STATIC);

		if (!initDone)
		{
			if (TCOTDGameplayStatics.IsCoop())
			{
				isCoopGame = true;
				isSurvival = tcotd_survival;

				if (isSurvival)
				{
					SetSurvivalLives(tcotd_survival_lives);
				}
			}
			initDone = true;
		}

		return self;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	static clearscope TCOTDCampaign GetInstance(void)
	{
		ThinkerIterator it = ThinkerIterator.Create("TCOTDCampaign", STAT_STATIC);
		let p = TCOTDCampaign(it.Next());
		if (p)
		{
			return p;
		}

		return NULL;
	}

	clearscope int GetTimeInSeconds(void)
	{
		return (campaignTime / Thinker.TICRATE);
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void Tick(void)
	{
		// STAT_STATIC thinkers don't automatically tick.
		// This would usually be called by TCOTDHandler::WorldTick
		campaignTime++;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	clearscope int GetSurvivalLives(void)
	{
		return survivalLives;
	}

	void SetSurvivalLives(int i)
	{
		survivalLives = i;
	}
}
