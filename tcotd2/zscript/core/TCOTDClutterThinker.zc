// Copyright 2020 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
//
//
//===========================================================================

struct TCOTDClutterData
{
	class<Actor> cls;
	Vector3 pos;

	Actor mo;
}

class TCOTDClutterThinker : Thinker
{
	const MAX_RANGE = 1200 * 1200.0;
	const MAX_CLUTTER = 10000;
	const TICK_INTERVAL_MAX = TICRATE / 2;

	private TCOTDClutterData clutters[MAX_CLUTTER];
	private uint index;
	private uint tickInterval;

	void Add(Vector3 location, class<Actor> cls)
	{
		clutters[index].cls = cls;
		clutters[index++].pos = location;
		if (index >= MAX_CLUTTER)
		{
			index = MAX_CLUTTER - 1;
		}
	}

	override void Tick(void)
	{
		if (tickInterval-- > 0) return;

		Vector3 diff;
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (!playeringame[i]) continue;

			for (int j = 0; j < index; j++)
			{
				if (!clutters[j].cls) continue;

				diff = level.Vec3Diff(clutters[j].pos, players[i].camera.Pos);
				if ((diff dot diff) <= MAX_RANGE)
				{
					if (!clutters[j].mo)
					{
						clutters[j].mo = Actor.Spawn(clutters[j].cls, clutters[j].pos);
					}
				}
				else if (clutters[j].mo)
				{
					clutters[j].mo.Destroy();
				}
			}
		}

		tickInterval = TICK_INTERVAL_MAX;
	}
}
