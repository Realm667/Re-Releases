// Copyright 2020 - 2023 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
//
//
//===========================================================================

class TCOTDGameplayStatics play
{
	static bool IsOnFloor(Actor self)
	{
		if (self is "PlayerPawn")
			return PlayerPawn(self).player.onground;
		return self.Pos.Z <= self.FloorZ || self.bOnMObj || self.bMBFBouncer;
	}

	static bool IsCrouching(PlayerPawn self)
	{
		if (!self.player)
			return false;
		double ch = double((self.player.mo.ViewHeight / 2));
		return self.GetCameraHeight() <= ch;
	}

	static double GetVelocity(Actor self, bool xyOnly = false)
	{
		if (xyOnly)
			return self.Vel.XY.Length();
		return self.Vel.Length();
	}

	static void DestroyActors(class<Actor> cls)
	{
		ThinkerIterator it = ThinkerIterator.Create(cls);
		Actor mo;
		while (mo = Actor(it.Next()))
		{
			mo.Destroy();
		}
	}

	static void GiveItemToAllPlayers(class<Inventory> cls)
	{
		if (!cls)
			return;

		if (!TCOTDGameplayStatics.IsCoop())
			return;


		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (playeringame[i] && players[i].mo && !players[i].mo.CountInv(cls))
				players[i].mo.GiveInventory(cls, 1);
		}
	}

	static void TakeItemFromAllPlayers(String clsName)
	{
		class<Inventory> cls = clsName;
		if (!cls)
			return;

		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (playeringame[i] && players[i].mo && players[i].mo.CountInv(cls))
				players[i].mo.TakeInventory(cls, int.max);
		}
	}

	static int SeedFromLevelChecksum(void)
	{
		String checksum = Level.GetChecksum();

		// should be always 32 for MD5 checksum
		int length = checksum.Length();

		int seed = 0;

		for (int i = 0; i < length; ++i)
		{
			seed ^= checksum.ByteAt(i) << 8 * (i % 4);
		}

		return seed;
	}

	clearscope static bool IsConsoleVisible(void)
	{
		return (!multiplayer && (ConsoleState == c_down || ConsoleState == c_falling));
	}

	clearscope static bool IsSkillNormal(void)
	{
		return (skill == 0);
	}

	clearscope static bool IsSkillHard(void)
	{
		return (skill == 1);
	}

	clearscope static bool IsSkillNightmare(void)
	{
		return (skill >= 2);
	}

	clearscope static bool IsCoop(void)
	{
		return (multiplayer && !deathmatch);
	}

	clearscope static bool IsDeathmatch(void)
	{
		return (multiplayer && deathmatch);
	}
}
