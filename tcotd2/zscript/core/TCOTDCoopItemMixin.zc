/*
* TCOTD2 Game Code
* Copyright (C) 2020 - 2023  Nash Muhandes
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//===========================================================================
//
// TCOTDCoopItemMixin
// Handles item pickups in coop mode
// Each player will have their own copy of the item to pick up
// Implementation is a little janky, and probably doesn't properly account
// in-game hop in/hop out - but for GZDoom's P2P netcode, it works fine
//
//===========================================================================

mixin class TCOTDCoopItemMixin
{
	// the alpha value to set the item to when it's picked up in coop
	const COOP_ITEM_ALPHA = 0.1;

	bool[MAXPLAYERS] playerHasPickedUp;
	bool allPlayersHavePickedUp;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void Tick(void)
	{
		Super.Tick();

		if (TCOTDGameplayStatics.IsCoop() && !bDropped)
		{
			double a = Default.Alpha;
			let rs = Default.GetRenderStyle();

			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (playeringame[i])
				{
					// handle item visibility for local player
					if (players[i].mo.CheckLocalView())
					{
						if (playerHasPickedup[i])
						{
							a = COOP_ITEM_ALPHA;
							rs = STYLE_TRANSLUCENT;
							//SetState(ResolveState('Held'));
						}
					}
				}
				else
				{
					// if a player doesn't exist, just consider it picked up lol (hack)
					playerHasPickedup[i] = true;
				}
			}

			if (!bInvisible)
			{
				A_SetRenderStyle(a, rs);
			}

			// check that every player has already picked it up, so that hiding can commence
			int pickedUp = 0;
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (playerHasPickedUp[i])
				{
					pickedUp++;
				}
			}

			if (pickedUp == (MAXPLAYERS - 1))
			{
				allPlayersHavePickedUp = true;
			}
		}
	}

	override void Touch(Actor toucher)
	{
		Super.Touch(toucher);

		// clear the secret flag after it has been picked up by whoever picked it up first
		// to prevent secret counter overflow
		if (TCOTDGameplayStatics.IsCoop() && bCountSecret)
		{
			bCountSecret = false;
		}
	}

	override bool TryPickup(in out Actor toucher)
	{
		// in other game modes than coop, or if the item isn't map-placed, use the standard behavior
		if (!TCOTDGameplayStatics.IsCoop() || bDropped)
		{
			return Super.TryPickup(toucher);
		}

		bool ret = false;
		if (toucher && toucher is "TCOTDPlayer")
		{
			let pmo = TCOTDPlayer(toucher);
			if (pmo && pmo.player && playeringame[pmo.PlayerNumber()])
			{
				// only pick the item up if the player hasn't actually picked it up yet
				if (!playerHasPickedUp[pmo.PlayerNumber()])
				{
					// mark the item as being picked up by that specific player,
					// then actually pick the item up
					if (Super.TryPickup(toucher))
					{
						playerHasPickedUp[pmo.PlayerNumber()] = true;
						ret = true;
					}
				}
			}
		}
		return ret;
	}

	override bool ShouldStay(void)
	{
		if (TCOTDGameplayStatics.IsCoop() && !bDropped)
		{
			// if all players have already picked it up, let it be gone from the world
			return !allPlayersHavePickedUp;
		}

		// in other game modes than coop, use the standard behavior
		return Super.ShouldStay();
	}

	override bool ShouldRespawn(void)
	{
		if (TCOTDGameplayStatics.IsCoop())
			return false;
		return Super.ShouldRespawn();
	}

	override void Hide(void)
	{
		// reset everything before hiding the item
		if (TCOTDGameplayStatics.IsCoop())
		{
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				playerHasPickedUp[i] = false;
			}
			allPlayersHavePickedUp = false;
		}

		Super.Hide();
	}
}
