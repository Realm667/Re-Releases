// Copyright 2008 - 2023 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// This is a stripped down version of the precipitation system from Bumi, an
// all-encompassing real-time weather and time cycle solution for GZDoom by
// Nash Muhandes.
// Bumi is (C) 2008 - 2023 Nash Muhandes
//
//===========================================================================

class TCOTDWeatherHandler : EventHandler
{
	const SNOW_SPAWN_RADIUS = 1000.0;
	const SNOW_SPAWN_HEIGHT = 400.0;

	FSpawnParticleParams snow;

	override void WorldTick(void)
	{
		SpawnSnowParticles();
		//SpawnSnowActors();
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void SpawnSnowParticles(void)
	{
		if (!CVar.GetCVar("tcotd2_weatherfx", players[consoleplayer]).GetBool())
			return;

		if (Level.IsFrozen())
			return;

		Actor cam = players[consoleplayer].camera;

		// cheap hack
		if (cam.WaterLevel >= 3)
			return;

		if (!snow.texture)
		{
			snow.color1 = "FFFFFF";
			snow.texture = TexMan.CheckForTexture("SNOWA0");
			snow.style = STYLE_Add;
			snow.flags = SPF_REPLACE;
			snow.lifetime = 400;
			snow.size = 6.;
			//snow.size = 0.;
			//snow.sizestep = 0.05;
			snow.startalpha = 1.;
			snow.fadestep = -0.01;
		}

		int density = 6;
		while (density--)
		{
			double spx = frandom[rnd_SpawnPrecip](-SNOW_SPAWN_RADIUS, SNOW_SPAWN_RADIUS);
			double spy = frandom[rnd_SpawnPrecip](-SNOW_SPAWN_RADIUS, SNOW_SPAWN_RADIUS);
			Vector3 sPos = cam.Vec3Offset(spx, spy, cam.Pos.Z);
			Sector sec = Level.PointInSector(sPos.XY);
			double spz = sec.NextHighestCeilingAt(sPos.X, sPos.Y, cam.Pos.Z, cam.Pos.Z, 0) - 2.;
			sPos.Z = min(spz, SNOW_SPAWN_HEIGHT);

			snow.pos = sPos;
			snow.vel =
			(
				frandom[rnd_SpawnPrecip](-0.2, 0.2),
				frandom[rnd_SpawnPrecip](-0.2, 0.2),
				frandom[rnd_SpawnPrecip](-4.0, -2.0)
			);
			snow.accel.X = frandom[rnd_SpawnPrecip](-0.01, 0.01);
			snow.accel.Y = frandom[rnd_SpawnPrecip](-0.01, 0.01);

			Level.SpawnParticle(snow);
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void SpawnSnowActors(void)
	{
		if (Level.IsFrozen())
			return;

		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (playeringame[i] && players[i].mo && players[i].mo.player)
			{
				if (gameaction == ga_savegame)
					continue;

				if (!CVar.GetCVar("tcotd2_weatherfx", players[consoleplayer]).GetBool())
					continue;

				Actor cam = players[i].camera;

				// cheap hack
				if (cam.WaterLevel >= 3)
					continue;

				int density = 6;
				while (density--)
				{
					double spx = frandom[rnd_SpawnPrecip](-SNOW_SPAWN_RADIUS, SNOW_SPAWN_RADIUS);
					double spy = frandom[rnd_SpawnPrecip](-SNOW_SPAWN_RADIUS, SNOW_SPAWN_RADIUS);
					Vector3 sPos = cam.Vec3Offset(spx, spy, SNOW_SPAWN_HEIGHT);

					let snow = cam.Spawn("TCOTDSnowParticle", sPos, NO_REPLACE);
					if (snow)
					{
						snow.SetZ(min(snow.CeilingZ, sPos.Z));
						snow.Tracer = cam;
						snow.Vel.X = frandom[rnd_SpawnPrecip](-0.8, 0.8);
						snow.Vel.Y = frandom[rnd_SpawnPrecip](-0.8, 0.8);
						snow.Vel.Z = frandom[rnd_SpawnPrecip](-4.0, -1.5);
					}
				}
			}
		}

		// don't serialize the snow particles
		if (gameaction == ga_savegame)
		{
			TCOTDGameplayStatics.DestroyActors("TCOTDSnowParticle");
		}
	}
}
