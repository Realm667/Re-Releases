// Copyright 2020 - 2023 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
//
//
//===========================================================================

class TCOTDLODHandler : EventHandler
{
	const MAX_RANGE = 2000 * 2000.;
	const MAX_OBJECTS = 5000;
	const TICK_INTERVAL_MAX = Thinker.TICRATE / 2;

	struct TCOTDLODActorData
	{
		class<Actor> cls;
		Vector3 Pos;
		Actor mo;
	}

	private TCOTDLODActorData objects[MAX_OBJECTS];
	private uint index;
	private uint tickInterval;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void WorldTick(void)
	{
		if (tickInterval-- > 0)
			return;

		Vector3 diff;
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (!playeringame[i])
				continue;

			for (uint j = 0; j < index; j++)
			{
				if (!objects[j].cls)
					continue;

				diff = Level.Vec3Diff(objects[j].Pos, players[i].camera.Pos);
				if ((diff dot diff) <= MAX_RANGE)
				{
					if (!objects[j].mo)
					{
						objects[j].mo = Actor.Spawn(objects[j].cls, objects[j].Pos);
						objects[j].mo.ChangeStatNum(Thinker.STAT_INFO);
					}
				}
				else if (objects[j].mo)
					objects[j].mo.Destroy();
			}
		}

		tickInterval = TICK_INTERVAL_MAX;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	private void MakeLODObject(class<Actor> cls)
	{
		ThinkerIterator it = ThinkerIterator.Create(cls);
		Actor mo;
		while (mo = Actor(it.Next()))
		{
			objects[index].cls = mo.GetClass();
			objects[index++].Pos = mo.Pos;
			if (index >= MAX_OBJECTS)
				index = MAX_OBJECTS - 1;
			mo.Destroy();
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	static void CreateLevelLODObjects(void)
	{
		let eh = TCOTDLODHandler(TCOTDLODHandler.Find("TCOTDLODHandler"));
		if (!eh)
			return;

		eh.MakeLODObject("TCOTDGrass01");
		eh.MakeLODObject("TCOTDGrass02");
		eh.MakeLODObject("TCOTDGrass03");
		eh.MakeLODObject("TCOTDBigBush");
		eh.MakeLODObject("TCOTDMushroom01");
		eh.MakeLODObject("TCOTDMushroom02");
		eh.MakeLODObject("TCOTDMushroom03");
		eh.MakeLODObject("TCOTDRock01");
		eh.MakeLODObject("TCOTDRock02");
		eh.MakeLODObject("TCOTDRock03");
		eh.MakeLODObject("TCOTDRock04");
		eh.MakeLODObject("TCOTDTree01");
		eh.MakeLODObject("TCOTDTree02");
		eh.MakeLODObject("TCOTDTree03");
		eh.MakeLODObject("TCOTDTree04");
		eh.MakeLODObject("TCOTDTree05");
		eh.MakeLODObject("TCOTDTree06");
		eh.MakeLODObject("TCOTDTree07");
		eh.MakeLODObject("TCOTDTree08");
	}
}
