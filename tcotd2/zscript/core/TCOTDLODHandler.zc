/*
* TCOTD2 Game Code
* Copyright (C) 2020 - 2023  Nash Muhandes
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//===========================================================================
//
// TCOTDLODHandler
//
//===========================================================================

class TCOTDLODHandler : EventHandler
{
	const MAX_RANGE = 2000 * 2000.;
	const MAX_OBJECTS = 5000;
	const TICK_INTERVAL_MAX = Thinker.TICRATE / 2;

	struct TCOTDLODActorData
	{
		class<Actor> cls;
		Actor mo;
		Vector3 mPos;
		double mAng;
	}

	private TCOTDLODActorData objects[MAX_OBJECTS];
	private uint index;
	private uint tickInterval;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void WorldTick(void)
	{
		if (tickInterval-- > 0)
			return;

		Vector3 diff;
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (!playeringame[i])
				continue;

			for (uint j = 0; j < index; j++)
			{
				if (!objects[j].cls)
					continue;

				diff = Level.Vec3Diff(objects[j].mPos, players[i].camera.Pos);
				if ((diff dot diff) <= MAX_RANGE)
				{
					if (!objects[j].mo)
					{
						objects[j].mo = Actor.Spawn(objects[j].cls, objects[j].mPos);
						objects[j].mo.Angle = objects[j].mAng;
						objects[j].mo.BeginPlay();
						objects[j].mo.ChangeStatNum(Thinker.STAT_INFO);
						objects[j].mo.PostBeginPlay();
					}
				}
				else if (objects[j].mo)
				{
					objects[j].mo.Destroy();
				}
			}
		}

		tickInterval = TICK_INTERVAL_MAX;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	private void MakeLODObject(class<Actor> cls)
	{
		ThinkerIterator it = ThinkerIterator.Create(cls);
		Actor mo;
		while (mo = Actor(it.Next()))
		{
			objects[index].cls = mo.GetClass();
			objects[index].mPos = mo.Pos;
			objects[index].mAng = mo.Angle;
			index++;
			if (index >= MAX_OBJECTS)
				index = MAX_OBJECTS - 1;
			mo.Destroy();
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	static void CreateLevelLODObjects(void)
	{
		let eh = TCOTDLODHandler(TCOTDLODHandler.Find("TCOTDLODHandler"));
		if (!eh)
			return;

		eh.MakeLODObject("TCOTDGrass01");
		eh.MakeLODObject("TCOTDGrass02");
		eh.MakeLODObject("TCOTDGrass03");
		eh.MakeLODObject("TCOTDBigBush");
		eh.MakeLODObject("TCOTDMushroom01");
		eh.MakeLODObject("TCOTDMushroom02");
		eh.MakeLODObject("TCOTDMushroom03");
		eh.MakeLODObject("TCOTDRock01");
		eh.MakeLODObject("TCOTDRock02");
		eh.MakeLODObject("TCOTDRock03");
		eh.MakeLODObject("TCOTDRock04");
		eh.MakeLODObject("TCOTDTree01");
		eh.MakeLODObject("TCOTDTree02");
		eh.MakeLODObject("TCOTDTree03");
		eh.MakeLODObject("TCOTDTree04");
		eh.MakeLODObject("TCOTDTree05");
		eh.MakeLODObject("TCOTDTree06");
		eh.MakeLODObject("TCOTDTree07");
		eh.MakeLODObject("TCOTDTree08");

		// TO DO: a bunch of stuff in TCOTDProp.zc could probably go here too... ?
	}
}
