/*
Credits:
-Revolver Sprites by Mike12
-Sounds from Clive Baker's Undying
-Bullet Puff sprites from Blood

Original code inherited from the original TCoTD 2, modified by Gothic.
*/

// ZScript rewrite by Nash Muhandes
// Mechanics rework by Blue Shadow

class TCOTDWeaponRevolver : TCOTDWeapon replaces Pistol
{
	const MAXCAPACITY = 6; // How many bullets the weapon can hold at maximum.

	private int loadedAmmo; // Tracks the current number of bullets loaded in the weapon.
	private double shotSpread;

	Default
	{
		//$Title Revolver
		Scale 0.6;
		AttackSound "revolver/fire";
		Tag "$TAG_PIST";
		Obituary "$OB_PIST";
		Inventory.PickupMessage "$IP_PIST";
		Weapon.Ammotype "TCOTDAmmoBullet";
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 12;
		Weapon.SelectionOrder 190;
		+WEAPON.WIMPY_WEAPON
		+WEAPON.NOAUTOFIRE
	}

	// -------------------------------------------------------------------------------------------------
	//
	// -------------------------------------------------------------------------------------------------

	override void BeginPlay ()
	{
		Super.BeginPlay();

		// The weapon is fully loaded initially.
		loadedAmmo = MAXCAPACITY;
	}

	// -------------------------------------------------------------------------------------------------
	//
	// -------------------------------------------------------------------------------------------------

	override bool CheckAmmo (int fireMode, bool autoSwitch, bool requireAmmo, int ammocount)
	{
		if (sv_infiniteammo || Owner.FindInventory('PowerInfiniteAmmo', true) || (Ammo1 ? Ammo1.Amount : 0) >= AmmoUse1)
		{
			// There's enough ammo.
			return true;
		}

		// Out of ammo, pick a weapon to change to.
		if (autoSwitch)
		{
			PlayerPawn(Owner).PickNewWeapon(nullptr);
		}

		return false;
	}

	// -------------------------------------------------------------------------------------------------
	//
	// -------------------------------------------------------------------------------------------------

	override bool DepleteAmmo (bool altFire, bool checkEnough, int ammouse, bool forceammouse)
	{
		if (sv_infiniteammo || Owner.FindInventory('PowerInfiniteAmmo', true))
		{
			// Consume the loaded ammo in the weapon as normal, even if infinite ammo is enabled.
			loadedAmmo -= AmmoUse1;
		}
		else if (CheckAmmo(PrimaryFire, false) && Ammo1)
		{
			// There's enough ammo, consume it.
			Ammo1.Amount -= AmmoUse1;
			loadedAmmo -= AmmoUse1;
			return true;
		}
		else
		{
			// Ammo couldn't be consumed.
			return false;
		}

		return true;
	}

	// -------------------------------------------------------------------------------------------------
	//
	// -------------------------------------------------------------------------------------------------

	protected action void A_RevolverReady ()
	{
		// reset spread once you've stopped firing
		invoker.shotSpread = 0;

		int flags = 0;
		bool infiniteammo = sv_infiniteammo || FindInventory('PowerInfiniteAmmo', true);
		int ammoAmount = invoker.Ammo1 ? invoker.Ammo1.Amount : 0;

		// Depending on whether or not infinite ammo is enabled, the checks are a little different:
		// - If it's enabled, reload is allowed if the weapon isn't fully loaded. Whether there is pistol
		//   ammo or not is irrelevant.
		// - If it isn't enabled, reload is allowed depending on the availability of pistol ammo.
		if ((infiniteammo && invoker.loadedAmmo < MAXCAPACITY) || (!infiniteammo && invoker.loadedAmmo < Min(ammoAmount, MAXCAPACITY)))
		{
			flags |= WRF_ALLOWRELOAD;
		}

		A_WeaponReady(flags);
	}

	// -------------------------------------------------------------------------------------------------
	//
	// -------------------------------------------------------------------------------------------------

	protected action void A_RevolverRefire ()
	{
		int flags = WRF_NOSWITCH;

		if (!invoker.CheckAmmo(PrimaryFire, false) || invoker.loadedAmmo <= 0)
		{
			flags |= WRF_NOFIRE;
		}

		A_WeaponReady(flags);
	}

	// -------------------------------------------------------------------------------------------------
	//
	// -------------------------------------------------------------------------------------------------

	private double GetDamage (double baseDamage)
	{
		return shotSpread == 0 && random[rnd_RevCriticalHit]() < (256 / 6) ? baseDamage * 3 : baseDamage;
	}

	protected action State A_FireRevolver ()
	{
		if (invoker.loadedAmmo <= 0)
		{
			return ResolveState("Reload");
		}

		A_Overlay(-2, "RevolverSmoke");
		A_ViewKick();
		Fire3DBullets(invoker.shotSpread * 1.05, invoker.shotSpread, 1, invoker.GetDamage(18), "TCOTDBulletPuff");
		invoker.shotSpread += frandom[rnd_RevSpread](0.1, 0.5);
		return nullptr;
	}

	// -------------------------------------------------------------------------------------------------
	//
	// -------------------------------------------------------------------------------------------------

	protected action State A_RevolverCheckReload ()
	{
		if (!invoker.CheckAmmo(PrimaryFire, true) || invoker.loadedAmmo > 0)
		{
			return nullptr;
		}

		return ResolveState("Reload");
	}

	// -------------------------------------------------------------------------------------------------
	//
	// -------------------------------------------------------------------------------------------------

	protected action void A_RevolverDoReload ()
	{
		// If infinite ammo is enabled, always fully reload the weapon. Otherwise reload it depending on the
		// availability of ammo.
		bool infiniteammo = sv_infiniteammo || FindInventory('PowerInfiniteAmmo', true);
		int ammoAmount = invoker.Ammo1 ? invoker.Ammo1.Amount : 0;
		invoker.loadedAmmo = infiniteammo ? MAXCAPACITY : Min(ammoAmount, MAXCAPACITY);
	}

	// -------------------------------------------------------------------------------------------------
	//
	// -------------------------------------------------------------------------------------------------

	States
	{
	Select:
		REVL A 1 A_Raise(RAISELOWERSPEED);
		Loop;
	Deselect:
		REVL A 1 A_Lower(RAISELOWERSPEED);
		Loop;
	Ready:
		REVL A 1 A_RevolverReady();
		Loop;
	Fire:
		REVL B 3 A_FireRevolver();
		REVL CD 2;
		REVL E 1 { A_WeaponOffset(4, 33); A_RevolverRefire(); }
		REVL F 1 { A_WeaponOffset(5, 38); A_RevolverRefire(); }
		REVL G 1 { A_WeaponOffset(6, 42); A_RevolverRefire(); }
		REVL H 1 { A_WeaponOffset(6, 28); A_RevolverRefire(); }
		REVL H 1 { A_WeaponOffset(2, 32); A_RevolverRefire(); }
		REVL H 1 { A_WeaponOffset(-1, 36); A_RevolverRefire(); }
		REVL A 1 { A_WeaponOffset(2, 30); A_RevolverRefire(); }
		REVL A 3 { A_WeaponOffset(0, 32); A_RevolverRefire(); }
		REVL A 1 A_RevolverRefire();
		REVL A 0 A_RevolverCheckReload();
		Goto Ready;
	Reload:
		REVL A 2 { A_WeaponOffset(-30, 35, WOF_INTERPOLATE); A_OverlayRotate(PSP_WEAPON, 10, WOF_INTERPOLATE); }
		REVL A 2 { A_WeaponOffset(-50, 45, WOF_INTERPOLATE); A_OverlayRotate(PSP_WEAPON, 25, WOF_INTERPOLATE); }
		REVL A 2 { A_WeaponOffset(-75, 65, WOF_INTERPOLATE); A_OverlayRotate(PSP_WEAPON, 28, WOF_INTERPOLATE); }
		REVL A 0 A_StartSound("lantern/pickup", CHAN_AUTO); // TO DO: this is a placeholder sound. find a better one!!
		REVL A 8 A_WeaponOffset(-75, 80, WOF_INTERPOLATE);
		REVL A 3 A_WeaponOffset(-75, 78, WOF_INTERPOLATE);
		REVL A 8 A_WeaponOffset(-75, 80, WOF_INTERPOLATE);
		REVL A 3 A_WeaponOffset(-75, 78, WOF_INTERPOLATE);
		REVL A 0 { A_RevolverDoReload(); A_StartSound("lantern/pickup", CHAN_AUTO); } // TO DO: this is a placeholder sound. find a better one!!
		REVL A 8 A_WeaponOffset(-75, 80, WOF_INTERPOLATE);
		REVL A 3 A_WeaponOffset(-75, 78, WOF_INTERPOLATE);
		REVL A 2 { A_WeaponOffset(-75, 65, WOF_INTERPOLATE); A_OverlayRotate(PSP_WEAPON, 25, WOF_INTERPOLATE); }
		REVL A 2 { A_WeaponOffset(-50, 45, WOF_INTERPOLATE); A_OverlayRotate(PSP_WEAPON, 10, WOF_INTERPOLATE); }
		REVL A 2 { A_WeaponOffset(-30, 35, WOF_INTERPOLATE); A_OverlayRotate(PSP_WEAPON, 0, WOF_INTERPOLATE); }
		Goto Ready;
	RevolverSmoke:
		RVFL A 2 Bright A_Light2();
		RVFL B 2 Bright A_Light1();
		RVFL C 2 Bright A_Light0();
		Stop;
	ViewKick:
		TNT1 A 3 A_SetViewPitch(ViewPitch - 1.73);
		TNT1 A 1 A_SetViewPitch(ViewPitch + 0.4325);
		TNT1 A 1 A_SetViewPitch(ViewPitch + 0.4325);
		TNT1 A 1 A_SetViewPitch(ViewPitch + 0.4325);
		TNT1 A 1 A_SetViewPitch(ViewPitch + 0.4325);
		Stop;
	Spawn:
		RPCK A -1;
		Stop;
	}
}
