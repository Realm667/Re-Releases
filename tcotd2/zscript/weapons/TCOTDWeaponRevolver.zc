/*
Credits:
-Revolver Sprites by Mike12
-Sounds from Clive Baker's Undying
-Bullet Puff sprites from Blood

Original code inherited from the original TCoTD 2, modified by Gothic.
*/

// ZScript rewrite by Nash Muhandes

class TCOTDWeaponRevolver : TCOTDWeapon replaces Pistol
{
	uint8 shotsToReload;
	double shotSpread;
	bool canCancelReload;

	Default
	{
		//$Title Revolver
		Scale 0.6;
		AttackSound "revolver/fire";
		Tag "$TAG_PIST";
		Obituary "$OB_PIST";
		Inventory.PickupMessage "$IP_PIST";
		Weapon.Ammotype "TCOTDAmmoBullet";
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 12;
		Weapon.SelectionOrder 190;
		+WEAPON.WIMPY_WEAPON
		+WEAPON.NOAUTOFIRE
	}

	private action void ResetSpread(void)
	{
		invoker.shotSpread = 0;
	}

	private action void A_CheckCancelReload(void)
	{
		ResetSpread();

		if (!invoker.canCancelReload)
			return;

		let psp = player.FindPSprite(PSP_WEAPON);

		if ((player.PendingWeapon is "TCOTDWeapon"))
			psp.SetState(ResolveState("ReloadCancel"));

		if ((player.mo.GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) && (invoker.shotsToReload > 0 && invoker.shotsToReload <= 6))
			psp.SetState(ResolveState("ReloadCancelFire"));
	}

	States
	{
	Select:
		REVL A 1 A_Raise(RAISELOWERSPEED);
		Loop;
	Deselect:
		REVL A 1 A_Lower(RAISELOWERSPEED);
		Loop;
	Ready:
		REVL A 1
		{
			// reset spread once you've stopped firing
			ResetSpread();

			// check for empty chamber
			State st = NULL;
			if (invoker.shotsToReload >= 6)
			{
				st = ResolveState("Reload");
				return st;
			}

			int flags = (invoker.shotsToReload != 0) ? WRF_ALLOWRELOAD : 0;
			A_WeaponReady(flags);

			return st;
		}
		REVL A 0 A_CheckReload();
		Loop;
	Fire:
		REVL A 0 A_CheckReload();
		REVL A 0
		{
			// check for empty chamber
			State st = NULL;
			if (invoker.shotsToReload >= 6)
				st = ResolveState("Reload");
			return st;
		}
		REVL B 3
		{
			A_Overlay(-2, "RevolverSmoke");
			A_ViewKick();
			Fire3DBullets(invoker.shotSpread * 1.05, invoker.shotSpread, 1, 18, "TCOTDBulletPuff");
			invoker.shotsToReload++;
			invoker.shotSpread += frandom[rnd_RevSpread](0.1, 0.5);
		}
		REVL CD 2;
		REVL E 1 { A_WeaponOffset(4, 33); A_WeaponReady(WRF_NOSWITCH); }
		REVL F 1 { A_WeaponOffset(5, 38); A_WeaponReady(WRF_NOSWITCH); }
		REVL G 1 { A_WeaponOffset(6, 42); A_WeaponReady(WRF_NOSWITCH); }
		REVL H 1 { A_WeaponOffset(6, 28); A_WeaponReady(WRF_NOSWITCH); }
		REVL H 1 { A_WeaponOffset(2, 32); A_WeaponReady(WRF_NOSWITCH); }
		REVL H 1 { A_WeaponOffset(-1, 36); A_WeaponReady(WRF_NOSWITCH); }
		REVL A 1 { A_WeaponOffset(2, 30); A_WeaponReady(WRF_NOSWITCH); }
		REVL A 3 { A_WeaponOffset(0, 32); A_WeaponReady(WRF_NOSWITCH); }
		REVL A 1 A_WeaponReady(WRF_NOSWITCH);
		goto Ready;
	Reload:
		TNT1 A 0
		{
			if (invoker.canCancelReload)
				invoker.canCancelReload = false;
		}
		REVL A 2 { A_WeaponOffset(-30, 35, WOF_INTERPOLATE); A_OverlayRotate(PSP_WEAPON, 10, WOF_INTERPOLATE); }
		REVL A 2 { A_WeaponOffset(-50, 45, WOF_INTERPOLATE); A_OverlayRotate(PSP_WEAPON, 25, WOF_INTERPOLATE); }
		REVL A 2 { A_WeaponOffset(-75, 65, WOF_INTERPOLATE); A_OverlayRotate(PSP_WEAPON, 28, WOF_INTERPOLATE); }
	Reload2:
		REVL A 8 { A_WeaponOffset(-75, 80, WOF_INTERPOLATE); A_CheckCancelReload(); }
		REVL A 3 { A_WeaponOffset(-75, 78, WOF_INTERPOLATE); A_CheckCancelReload(); }
		TNT1 A 0
		{
			State st = NULL;
			if (invoker.shotsToReload > 0)
			{
				invoker.shotsToReload--;
				st = ResolveState("Reload2");

				// TO DO: this is a placeholder sound. find a better one!!
				A_StartSound("lantern/pickup", CHAN_AUTO);

				invoker.canCancelReload = true;
			}
			return st;
		}
	ReloadDone:
		REVL A 2 { A_WeaponOffset(-75, 65, WOF_INTERPOLATE); A_OverlayRotate(PSP_WEAPON, 25, WOF_INTERPOLATE); }
		REVL A 2 { A_WeaponOffset(-50, 45, WOF_INTERPOLATE); A_OverlayRotate(PSP_WEAPON, 10, WOF_INTERPOLATE); }
		REVL A 2 { A_WeaponOffset(-30, 35, WOF_INTERPOLATE); A_OverlayRotate(PSP_WEAPON, 0, WOF_INTERPOLATE); }
		Goto Ready;
	ReloadCancel:
		REVL A 1 { A_WeaponOffset(-75, 65, WOF_INTERPOLATE); A_OverlayRotate(PSP_WEAPON, 25, WOF_INTERPOLATE); }
		REVL A 1 { A_WeaponOffset(-50, 45, WOF_INTERPOLATE); A_OverlayRotate(PSP_WEAPON, 10, WOF_INTERPOLATE); }
		REVL A 1 { A_WeaponOffset(-30, 35, WOF_INTERPOLATE); A_OverlayRotate(PSP_WEAPON, 0, WOF_INTERPOLATE); }
		Goto Ready;
	ReloadCancelFire:
		REVL A 1 { A_WeaponOffset(-75, 65, WOF_INTERPOLATE); A_OverlayRotate(PSP_WEAPON, 25, WOF_INTERPOLATE); }
		REVL A 1 { A_WeaponOffset(-50, 45, WOF_INTERPOLATE); A_OverlayRotate(PSP_WEAPON, 10, WOF_INTERPOLATE); }
		REVL A 1 { A_WeaponOffset(-30, 35, WOF_INTERPOLATE); A_OverlayRotate(PSP_WEAPON, 0, WOF_INTERPOLATE); }
		Goto Fire;
	RevolverSmoke:
		RVFL A 2 Bright A_Light2();
		RVFL B 2 Bright A_Light1();
		RVFL C 2 Bright A_Light0();
		Stop;
	ViewKick:
		TNT1 A 3 A_SetViewPitch(ViewPitch - 1.73);
		TNT1 A 1 A_SetViewPitch(ViewPitch + 0.4325);
		TNT1 A 1 A_SetViewPitch(ViewPitch + 0.4325);
		TNT1 A 1 A_SetViewPitch(ViewPitch + 0.4325);
		TNT1 A 1 A_SetViewPitch(ViewPitch + 0.4325);
		Stop;
	Spawn:
		RPCK A -1;
		Stop;
	}
}
