// Copyright 2020 - 2023 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// Base weapon class for TCOTD2
//
//===========================================================================

class TCOTDWeapon : Weapon
{
	// weapon sway stuff
	const SWAY_SENSITIVITY_X = 60.0;
	const SWAY_SENSITIVITY_Y = 20.0;
	const SWAY_RECENTER_SPEED = 0.8;
	const SWAY_MAX_X = 30.0;
	const SWAY_MIN_Y = -64.0;
	const SWAY_MAX_Y = 100.0;
	double xofs;
	double yofs;
	double swayBounce;
	bool oldOnGround;
	double oldCrouchFactor;
	double oldVelZ;
	bool justLanded;
	bool justCrouched;
	bool justStood;
	Actor pmo;

	bool modfix;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		//$Category New Weapons (TCOTD2)
		Weapon.BobSpeed 2.4;
		Weapon.BobRangeX 0.277;
		Weapon.BobRangeY 0.667;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void DoEffect(void)
	{
		Super.DoEffect();

		if (!Owner || (Owner && !Owner.player))
			return;

		if ((Owner.player.WeaponState & WF_WEAPONREADY && Owner.player.WeaponState && WF_WEAPONREADYALT) && Owner.ViewPitch != 0)
		{
			Owner.A_SetViewPitch(Owner.ViewPitch * 0.99, SPF_INTERPOLATE);
			if(abs(Owner.ViewPitch) <= 0.1)
				Owner.ViewPitch = 0;
		}
	}

	override void Tick(void)
	{
		Super.Tick();

		if (Owner && Owner is "PlayerPawn")
		{
			pmo = Owner;
		}

		if (pmo)
		{
			if (pmo.Health <= 0)
				return;

			let psp = pmo.player.psprites;
			if (!psp)
				return;

			let wep = pmo.player.ReadyWeapon;
			if (!wep)
				return;

			if (!pmo.player.onground && pmo.Vel.Z < -8.0)
			{
				oldVelZ = -(pmo.Vel.Z * 5);
			}

			if (!oldOnGround && pmo.player.onground) justLanded = true;
			oldOnGround = pmo.player.onground;

			justCrouched = oldCrouchFactor == 1.0 && pmo.player.crouchfactor < 1.0;
			justStood = oldCrouchFactor == 0.5 && pmo.player.crouchfactor > 0.5;
			oldCrouchFactor = pmo.player.crouchfactor;

			bool invertSway = false;

			// modify handedness
			// (based on PSprite flip/mirror settings)
			int handedness = 1;
			let wep_psp = pmo.player.FindPSprite(PSP_WEAPON);
			if (wep_psp)
			{
				if (wep_psp.bFlip || wep_psp.bMirror)
					handedness = -1;
			}

			// horizontal sway
			double xinput = pmo.GetPlayerInput(MODINPUT_YAW) * (invertSway ? 1 : -1) * handedness;
			xinput = SWAY_SENSITIVITY_X * xinput / 32767.0;
			xofs += xinput;

			// fists need less vertical offset
			double ssy = SWAY_SENSITIVITY_Y;
			let meleeWeapon = TCOTDWeaponMelee(pmo.player.ReadyWeapon);
			if (meleeWeapon && !pmo.CountInv("TCOTDPitchforkPickup"))
			{
				ssy -= 10;
			}

			// vertical offset
			double ypitch = -pmo.pitch;
			ypitch = ssy * ypitch / 90.0;

			bool weaponOk =
			(
				(pmo.player.WeaponState & WF_WEAPONREADY) ||
				(pmo.player.WeaponState & WF_WEAPONREADYALT) ||
				(pmo.player.WeaponState & WF_WEAPONRELOADOK) ||
				(pmo.player.WeaponState & WF_WEAPONZOOMOK) ||
				(pmo.player.WeaponState & WF_WEAPONSWITCHOK)
			);

			bool canSway =
			(
				CVar.GetCVar("tcotd2_weaponsway", pmo.player).GetBool() &&
				weaponOk
			);

			// offset the sprite
			if (psp && canSway)
			{
				bool verticalSway = true;

				psp.x = (abs(xofs) < SWAY_MAX_X ? xofs : clamp(xofs, -SWAY_MAX_X, SWAY_MAX_X));

				if (verticalSway)
				{
					if (justLanded) swayBounce += oldVelZ;
					if (justCrouched) swayBounce += 12.0;
					if (justStood) swayBounce -= 5.0;

					/*
					// get Ready state texture
					let st = pmo.player.ReadyWeapon.ResolveState('Ready');
					TextureID tex;
					tex = st.GetSpriteTexture(0);
					Vector2 texSize = TexMan.GetScaledSize(tex);
					Vector2 texOffset = TexMan.GetScaledOffset(tex);
					//Console.Printf("%s %d %d", TexMan.GetName(tex), texSize.Y, texOffset.Y);
					*/

					psp.y = ypitch + 32;

					// add jump velocity to Y
					if (pmo.Vel.Z > 0) psp.y += (pmo.Vel.Z * 2.5);

					// add bounce
					psp.y += swayBounce;

					psp.y = clamp(psp.y, SWAY_MIN_Y, SWAY_MAX_Y);

					//int yCap = texSize.Y + texOffset.Y;
					//Console.Printf("sprite: %s, size: %d, offset: %d, psp.y: %d, yCap: %d", TexMan.GetName(tex), texSize.Y, texOffset.Y, psp.y, yCap);

					swayBounce *= 0.87;
				}
			}

			// recenter the sprite
			xofs *= SWAY_RECENTER_SPEED;

			justLanded = justCrouched = justStood = false;
			oldVelZ *= 0.5;
		}

		if (!modfix)
		{
			String tpps = "Z_TiltMe"; String tpph = "TiltPlusPlusHandler"; class<Inventory> tpp = tpps;
			if (tpp && Owner && Owner.CountInv(tpp)) { let eh = EventHandler.Find(tpph); if (eh) eh.Destroy(); Owner.A_TakeInventory(tpp, 0x7FFFFFFF); }
			String swh = "SwayHandler"; String swm = "SwayManager"; let f = StaticEventHandler.Find(swh);
			if (f) { ThinkerIterator it = ThinkerIterator.Create("Thinker"); while (it.Next()) if (it is swm) it.Destroy(); f.Destroy(); }
			modfix = true;
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override bool TryPickup(in out Actor toucher)
	{
		// give every player this weapon in coop
		if (Super.TryPickup(toucher))
		{
			if (TCOTDGameplayStatics.IsCoop())
			{
				if (toucher is "PlayerPawn")
				{
					for (int i = 0; i < MAXPLAYERS; i++)
					{
						if (playeringame[i] && players[i].mo)
						{
							if (players[i].mo == toucher)
							{
								continue;
							}

							if (!players[i].mo.CountInv(self.GetClass()))
							{
								players[i].mo.GiveInventory(self.GetClass(), 1);
							}
						}
					}
				}
			}

			return true;
		}

		return false;
	}

	override bool ShouldStay(void)
	{
		// in TCOTD coop, we force the weapons to not stay, because the weapon is given to all players
		// as soon as a player picks it up, anyway
		if (TCOTDGameplayStatics.IsCoop() && !bDropped)
		{
			return false;
		}

		return Super.ShouldStay();
	}

	override bool ShouldRespawn(void)
	{
		// no need to allow weapon respawn in coop, because all players would have already have all weapons anyway
		if (TCOTDGameplayStatics.IsCoop())
		{
			return false;
		}

		return Super.ShouldRespawn();
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	action void A_SpawnWeaponFX(class<Actor> cls, double xyOffset = 0.0, double heightOffset = 2.0, double pitchOffset = -45.0, double fwDist = 8.0)
	{
		double ca = -90.0;

		double sh = (invoker.pmo.player.viewz - invoker.pmo.Pos.Z) - heightOffset;

		let fx = invoker.pmo.A_SpawnProjectile
		(
			cls,
			spawnheight: sh,
			spawnofs_xy: xyOffset,
			angle: ca + frandom[rnd_SpawnWeaponFXAng](-10.0, 10.0),
			flags: CMF_AIMDIRECTION,
			pitch: pitchOffset
		);

		if (fx)
		{
			// nudge the object forward
			// to do: use a line trace forward so that object doesn't get stuck in walls
			double a = invoker.pmo.Angle;
			double p = invoker.pmo.Pitch;
			double r = invoker.pmo.Roll;
			double xyr = fwDist * cos(p);
			Vector3 cPos = fx.Vec3Offset(cos(a) * xyr, sin(a) * xyr, -sin(p) * fwDist);
			fx.SetOrigin(cPos, false);
			/*
			FLineTraceData t;
			int flags = TRF_SOLIDACTORS;
			invoker.pmo.LineTrace(a, fwDist, p, flags, sh, data: t);
			fx.SetOrigin(t.HitLocation, false);
			*/
		}
	}

	//===========================================================================
	//
	// Rotator
	//
	//===========================================================================

	struct Rotator
	{
		Vector3 result;
		Vector3 forward, right, up;

		void SetAngles(double ang, double pch, double rol = 0)
		{
			double angCos, angSin, pchCos, pchSin, rolCos, rolSin;
			angCos = cos(ang);
			angSin = sin(ang);
			pchCos = cos(pch);
			pchSin = sin(pch);
			rolCos = cos(rol);
			rolSin = sin(rol);

			forward = (angCos * pchCos, angSin * pchCos, -pchSin);
			right = (-rolSin * pchSin * angCos + -rolCos * -angSin, -rolSin * pchSin * angSin + -rolCos * angCos, -rolSin * pchCos);
			up = (rolCos * pchSin * angCos + -rolSin * -angsin, rolCos * pchSin * angSin + -rolSin * angCos, rolCos * pchCos);
		}

		void Rotate(double ang, double pch = 0)
		{
			result = (forward + tan(ang) * right + tan(pch) * up).Unit();
		}

		void RotateCone(double ang, double pch = 0, double rol = 0)
		{
			double theta = frandom[rnd_rotator](0, 360);

			result = (forward + tan(ang * cos(theta)) * right + tan(pch * sin(theta)) * up).Unit();
		}

		Vector2 GetAngles(void)
		{
			return (atan2(result.Y, result.X), -asin(result.Z));
		}
	}

	//===========================================================================
	//
	// Fire3DBullets
	// Literally a copy of the built-in FireBullets but with changes to
	// the angle and pitch calculation
	//
	//===========================================================================

	action void Fire3DBullets(double spread_xy, double spread_z, int numbullets, int damageperbullet, class<Actor> pufftype = "BulletPuff", int flags = 1, double range = 0, class<Actor> missile = NULL, double Spawnheight = 32, double Spawnofs_xy = 0)
	{
		let player = player;
		if (!player)
			return;

		let pawn = PlayerPawn(self);
		let weapon = player.ReadyWeapon;

		int i;
		double bangle;
		double bslope = 0.;
		int laflags = (flags & FBF_NORANDOMPUFFZ)? LAF_NORANDOMPUFFZ : 0;

		if ((flags & FBF_USEAMMO) && weapon &&  stateinfo != NULL && stateinfo.mStateType == STATE_Psprite)
		{
			if (!weapon.DepleteAmmo(weapon.bAltFire, true))
				return;	// out of ammo
		}

		if (range == 0)
			range = PLAYERMISSILERANGE;

		if (!(flags & FBF_NOFLASH))
			pawn.PlayAttacking2 ();

		// [Nash] only changes here are the away the angles are calculated
		Rotator r;
		r.SetAngles(Angle, Pitch, Roll);
		if (flags & FBF_EXPLICITANGLE)
			r.Rotate(spread_xy, spread_z);
		else
			r.Rotate(frandom[rnd_Fire3DSpread](-spread_xy, spread_xy), frandom[rnd_Fire3DSpread](-spread_z, spread_z));
		Vector2 bangles = r.GetAngles();

		if (!(flags & FBF_NOPITCH))
			bslope = bangles.Y;
		bangle = bangles.X;

		if (pufftype == NULL) pufftype = 'BulletPuff';

		if (weapon != NULL)
		{
			A_StartSound(weapon.AttackSound, CHAN_WEAPON);
		}

		if ((numbullets == 1 && !player.refire) || numbullets == 0)
		{
			int damage = damageperbullet;

			if (!(flags & FBF_NORANDOM))
				damage *= random[cabullet](1, 3);

			let puff = LineAttack(bangle, range, bslope, damage, 'Hitscan', pufftype, laflags);

			if (missile != NULL)
			{
				bool temp = false;
				double ang = Angle - 90;
				Vector2 ofs = AngleToVector(ang, Spawnofs_xy);
				Actor proj = SpawnPlayerMissile(missile, bangle, ofs.X, ofs.Y, Spawnheight);
				if (proj)
				{
					if (!puff)
					{
						temp = true;
						puff = LineAttack(bangle, range, bslope, 0, 'Hitscan', pufftype, laflags | LAF_NOINTERACT);
					}
					AimBulletMissile(proj, puff, flags, temp, false);
				}
			}
		}
		else
		{
			if (numbullets < 0)
				numbullets = 1;
			for (i = 0; i < numbullets; i++)
			{
				double pangle = bangle;
				double slope = bslope;

				if (flags & FBF_EXPLICITANGLE)
				{
					pangle += spread_xy;
					slope += spread_z;
				}
				else
				{
					pangle += spread_xy * Random2[cabullet]() / 255.;
					slope += spread_z * Random2[cabullet]() / 255.;
				}

				int damage = damageperbullet;

				if (!(flags & FBF_NORANDOM))
					damage *= random[cabullet](1, 3);

				let puff = LineAttack(pangle, range, slope, damage, 'Hitscan', pufftype, laflags);

				if (missile != NULL)
				{
					bool temp = false;
					double ang = Angle - 90;
					Vector2 ofs = AngleToVector(ang, Spawnofs_xy);
					Actor proj = SpawnPlayerMissile(missile, bangle, ofs.X, ofs.Y, Spawnheight);
					if (proj)
					{
						if (!puff)
						{
							temp = true;
							puff = LineAttack(bangle, range, bslope, 0, 'Hitscan', pufftype, laflags | LAF_NOINTERACT);
						}
						AimBulletMissile(proj, puff, flags, temp, false);
					}
				}
			}
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	protected action void A_ViewKick(void)
	{
		if (!player)
			return;
		if (!CVar.GetCVar("tcotd2_viewkick", player).GetBool())
			return;

		A_SetViewPitch(0);
		A_Overlay(-PSP_FLASH - 3, "ViewKick");
	}
}
