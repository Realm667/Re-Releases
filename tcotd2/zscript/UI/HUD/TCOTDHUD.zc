/*
* TCOTD2 Game Code
* Copyright (C) 2020 - 2023  Nash Muhandes
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//===========================================================================
//
// TCOTDHUD
//
//===========================================================================

class TCOTDHUD : DoomStatusBar
{
	HUDFont mHUDSmallNum;
	HUDFont mHUDBigNum;

	DynamicValueInterpolator mOilInterpolator;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void Init(void)
	{
		Super.Init();
		SetSize(0, 320, 200);
		mHUDSmallNum = HUDFont.Create(Font.GetFont("SmallNumFn"));
		mHUDBigNum = HUDFont.Create(Font.GetFont("BigNumFn"));
		mOilInterpolator = DynamicValueInterpolator.Create(0, 0.125, 1, 5000);
	}

	override void NewGame(void)
	{
		Super.NewGame();
		mOilInterpolator.Reset(0);
	}

	override void Tick(void)
	{
		Super.Tick();

		let oil = CPlayer.mo.FindInventory("TCOTDLanternOil");
		if (oil)
		{
			mOilInterpolator.Update(oil.Amount);
		}
	}

	override void Draw(int state, double TicFrac)
	{
		BaseStatusBar.Draw(state, TicFrac);

		if (TCOTDGameplayStatics.IsInCutscene(CPlayer.mo))
			return;

		if (TCOTDJournalMenu.IsOpen())
			return;

		if (state == HUD_StatusBar || state == HUD_Fullscreen)
		{

			BeginHUD();
			DrawFullscreenHUD();
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void DrawFullscreenHUD(void)
	{
		if (automapactive) return;

		int flags = DI_SCREEN_LEFT_BOTTOM;

		// Health
		DrawImage("graphics/hud/HUDHealth.png", (12, -4), flags);
		DrawString(mHUDBigNum, FormatNumber(CPlayer.health, 3), (24, -15), flags);

		// Armor
		int ypos = -24;
		let armor = CPlayer.mo.FindInventory("BasicArmor");
		if (armor && armor.Amount > 0)
		{
			DrawInventoryIcon(armor, (12, ypos));
			DrawString(mHUDBigNum, FormatNumber(armor.Amount, 3), (24, ypos - 11), flags);
			ypos -= 22;
		}

		// Air
		if (CPlayer.health > 0 && CPlayer.mo.waterlevel > 2 && Level.airsupply > 0 && CPlayer.mo.AirCapacity > 0 &&
			(CPlayer.air_finished + 1 - Level.maptime) < int(Level.airsupply * CPlayer.mo.AirCapacity))
		{
			int curpnts = Max(CPlayer.air_finished - Level.maptime, 0);
			int maxpnts = int(Level.airsupply * CPlayer.mo.AirCapacity);
			int ratio = curpnts * 100 / maxpnts;
			DrawImage("graphics/hud/HUDAir.png", (12, ypos), flags);
			DrawString(mHUDBigNum, FormatNumber(ratio, 3), (24, ypos - 11), flags);
			ypos -= 22;
		}

		// Pendant
		let pendant = TCOTDPendant(CPlayer.mo.FindInventory("TCOTDPendant"));
		if (pendant)
		{
			DrawImage("PENDB0", (16, ypos), flags);
			int next = pendant.next;
			int nextMax = pendant.nextMax > 0 ? pendant.nextMax : 1;
			double a = 1.0 - (1.0 * next / nextMax);
			if (pendant.nextMax <= 0) a = 0.0;
			DrawImage("graphics/hud/PendantGlow.png", (12.5, ypos - 2), flags, alpha: a);
		}

		// Right panel
		flags = DI_SCREEN_RIGHT_BOTTOM;
		DrawImage("graphics/hud/HUDStuff.png", (-28, 0), flags);

		// Ammo
		Inventory ammotype1, ammotype2;
		[ammotype1, ammotype2] = GetCurrentAmmo();
		if (ammotype1)
		{
			DrawInventoryIcon(ammotype1, (-48, -4), flags);
			DrawString(mHUDBigNum, FormatNumber(ammotype1.Amount, 3), (-85, -15), flags);
		}

		// Arms
		if (CPlayer.mo.FindInventory("TCOTDWeaponRevolver"))		DrawString(mHUDSmallNum, "2", (-57, -24), flags);
		if (CPlayer.mo.FindInventory("TCOTDWeaponSawedOff"))		DrawString(mHUDSmallNum, "3", (-53, -24), flags);
		if (CPlayer.mo.FindInventory("TCOTDWeaponThompson"))		DrawString(mHUDSmallNum, "4", (-49, -24), flags);
		if (CPlayer.mo.FindInventory("TCOTDWeaponNapalmLauncher"))	DrawString(mHUDSmallNum, "5", (-45, -24), flags);

		// Keys
		if (CPlayer.mo.FindInventory("TCOTDKeySkullKey"))	DrawImage("M_KEY1", (-28, -46), flags);
		if (CPlayer.mo.FindInventory("TCOTDKeyEyeKey"))		DrawImage("M_KEY2", (-17, -46), flags);
		if (CPlayer.mo.FindInventory("TCOTDKeyFireKey"))	DrawImage("M_KEY3", (-6, -46), flags);
		if (CPlayer.mo.FindInventory("TCOTDKeyKnifeKey"))	DrawImage("M_KEY4", (-28, -36), flags);
		if (CPlayer.mo.FindInventory("TCOTDKeySpiderKey"))	DrawImage("M_KEY5", (-17, -36), flags);
		if (CPlayer.mo.FindInventory("TCOTDKeyMoonKey"))	DrawImage("M_KEY6", (-6, -36), flags);

		// Inventory
		CPlayer.InventoryTics = 0;
		if (!Level.NoInventoryBar && CPlayer.mo.InvSel != NULL)
		{
			DrawInventoryIcon(CPlayer.mo.InvSel, (-18, 0), flags, boxsize: (30, 30));
			if (CPlayer.mo.InvSel.MaxAmount > 1)
			{
				DrawString(mHUDSmallNum, FormatNumber(CPlayer.mo.InvSel.Amount, 3), (-42, -8), flags);
			}
		}

		// Lantern Oil
		int oil = mOilInterpolator.GetValue();
		int oilMax = 12 * 1000;
		DrawBar("LANTBARF", "LANTBARB", oil, oilMax, (-18, -62), 0, SHADER_HORZ, flags);
	}
}
