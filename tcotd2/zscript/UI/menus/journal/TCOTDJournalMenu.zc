/*
* TCOTD2 Game Code
* Copyright (C) 2020 - 2023  Nash Muhandes
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//===========================================================================
//
// TCOTDJournalMenu
//
//===========================================================================

class TCOTDJournalMenu : TCOTDZFGenericMenu
{
	const RES_WIDTH = 1280;
	const RES_HEIGHT = 720;

	TCOTDZFJournalHandler handler;
	PlayerPawn pmo;

	TCOTDZFImage mainBackground;
	TCOTDZFItemList objectivesFrame;
	TCOTDZFItemList notesFrame;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void Init(Menu parent)
	{
		menuactive = Menu.OnNoPause;
		DontDim = true;

		Super.Init(parent);

		SetBaseResolution((RES_WIDTH, RES_HEIGHT));

		pmo = players[consoleplayer].mo;
		handler = new('TCOTDZFJournalHandler');
		handler.menu = self;

		//===========================================================================
		//
		// background pic
		//
		//===========================================================================

		mainBackground = TCOTDZFImage.Create
		(
			(196, 80),
			(RES_WIDTH, RES_HEIGHT),
			"graphics/journal/journal_main.png",
			TCOTDZFImage.AlignType_TopLeft
		);
		mainBackground.Pack(mainFrame);

		//===========================================================================
		//
		// objectives
		//
		//===========================================================================

		objectivesFrame = TCOTDZFItemList.Create
		(
			(241, 166),
			(362, 428),
			"TCOTDObjective",
			self
		);
		objectivesFrame.Pack(mainFrame);
		objectivesFrame.Refresh();

		String objectivesHeaderTxt = StringTable.Localize("$JRNL_OBJECTIVES");
		let objectivesHeader = TCOTDZFLabel.Create
		(
			(objectivesFrame.box.pos.X + (objectivesFrame.box.size.X / 2.) - (SmallFont.StringWidth(objectivesHeaderTxt) / 2), objectivesFrame.box.pos.Y - (SmallFont.GetHeight() * 2)),
			(0, 0),
			text: objectivesHeaderTxt,
			fnt: SmallFont,
			wrap: false,
			autoSize: true,
			textColor: SmallFont.FindFontColor('TCOTDJournalTextColor')
		);
		objectivesHeader.Pack(mainFrame);

		//===========================================================================
		//
		// notes
		//
		//===========================================================================

		notesFrame = TCOTDZFItemList.Create
		(
			(677, 166),
			(362, 428),
			"TCOTDNote",
			self
		);
		notesFrame.Pack(mainFrame);
		notesFrame.Refresh();

		String notesHeaderTxt = StringTable.Localize("$JRNL_NOTES");
		let notesHeader = TCOTDZFLabel.Create
		(
			(notesFrame.box.pos.X + (notesFrame.box.size.X / 2.) - (SmallFont.StringWidth(notesHeaderTxt) / 2), notesFrame.box.pos.Y - (SmallFont.GetHeight() * 2)),
			(0, 0),
			text: notesHeaderTxt,
			fnt: SmallFont,
			wrap: false,
			autoSize: true,
			textColor: SmallFont.FindFontColor('TCOTDJournalTextColor')
		);
		notesHeader.Pack(mainFrame);
	}

	override void Drawer(void)
	{
		Super.Drawer();

		if (pmo.player.playerstate == PST_DEAD || pmo.CountInv("CutsceneEnabled"))
		{
			Close();
			return;
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	static bool IsOpen ()
	{
		let mnu = Menu.GetCurrentMenu();
		return mnu &&
			(mnu is 'TCOTDJournalMenu' || mnu is 'TCOTDJournalItemReaderMenu');
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	static double GetScaleFactor(void)
	{
		//return Screen.GetHeight() / double(TCOTDJournalMenu.RES_HEIGHT);
		return Screen.GetHeight() / double(400);
	}
}
