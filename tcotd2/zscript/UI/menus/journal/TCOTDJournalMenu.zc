/*
* TCOTD2 Game Code
* Copyright (C) 2020 - 2023  Nash Muhandes
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//===========================================================================
//
// TCOTDJournalMenu
//
//===========================================================================

class TCOTDJournalMenu : TCOTDZFGenericMenu
{
	const RES_WIDTH = 960;
	const RES_HEIGHT = 540;

	// the frame size of "contents"
	const SUB_FRAME_WIDTH = 362;
	const SUB_FRAME_HEIGHT = 428;

	const TXT_SCALE = 1.5;

	TCOTDZFJournalHandler handler;
	TCOTDPlayer pmo;

	TCOTDZFImage mainBackground;
	TCOTDZFItemList objectivesFrame;
	TCOTDZFItemList notesFrame;

	// The list that's currently in focus and will react to inputs
	TCOTDZFItemList mCurrentlyFocused;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void Init(Menu parent)
	{
		menuactive = Menu.OnNoPause;

		Super.Init(parent);

		SetBaseResolution((RES_WIDTH, RES_HEIGHT));

		pmo = TCOTDPlayer(players[consoleplayer].mo);
		if (!pmo)
		{
			ThrowAbortException("Tried to open TCOTDJournalMenu with an invalid player");
		}

		handler = new('TCOTDZFJournalHandler');
		handler.menu = self;

		//===========================================================================
		//
		// background pic
		//
		//===========================================================================

		mainBackground = TCOTDZFImage.Create
		(
			(37, -6),
			(RES_WIDTH, RES_HEIGHT),
			"graphics/journal/journal_main.png",
			TCOTDZFImage.AlignType_TopLeft
		);
		mainBackground.Pack(mainFrame);

		//===========================================================================
		//
		// objectives
		//
		//===========================================================================

		objectivesFrame = TCOTDZFItemList.Create
		(
			(81, 76),
			(SUB_FRAME_WIDTH, SUB_FRAME_HEIGHT),
			"TCOTDObjective",
			self
		);
		objectivesFrame.box.size.Y -= ((SUB_FRAME_HEIGHT / GetMaxShowableLines()) / 2);
		objectivesFrame.mID = 'LIST_OBJECTIVES';
		objectivesFrame.Pack(mainFrame);
		objectivesFrame.Refresh();

		String objectivesHeaderTxt = StringTable.Localize("$JRNL_OBJECTIVES");
		let objectivesHeader = TCOTDZFLabel.Create
		(
			(objectivesFrame.box.pos.X + (objectivesFrame.box.size.X / 2.) - ((SmallFont.StringWidth(objectivesHeaderTxt) * TXT_SCALE) / 2), objectivesFrame.box.pos.Y - ((SmallFont.GetHeight() * TXT_SCALE) * 2)),
			(0, 0),
			text: objectivesHeaderTxt,
			fnt: SmallFont,
			wrap: false,
			autoSize: true,
			textScale: TXT_SCALE,
			textColor: SmallFont.FindFontColor('TCOTDJournalTextColor')
		);
		objectivesHeader.Pack(mainFrame);

		//===========================================================================
		//
		// notes
		//
		//===========================================================================

		notesFrame = TCOTDZFItemList.Create
		(
			(517, 76),
			(SUB_FRAME_WIDTH, SUB_FRAME_HEIGHT),
			"TCOTDNote",
			self
		);
		notesFrame.box.size.Y -= ((SUB_FRAME_HEIGHT / GetMaxShowableLines()) / 2);
		notesFrame.mID = 'LIST_NOTES';
		notesFrame.Pack(mainFrame);
		notesFrame.Refresh();

		String notesHeaderTxt = StringTable.Localize("$JRNL_NOTES");
		let notesHeader = TCOTDZFLabel.Create
		(
			(notesFrame.box.pos.X + (notesFrame.box.size.X / 2.) - ((SmallFont.StringWidth(notesHeaderTxt) * TXT_SCALE) / 2), notesFrame.box.pos.Y - ((SmallFont.GetHeight() * TXT_SCALE) * 2)),
			(0, 0),
			text: notesHeaderTxt,
			fnt: SmallFont,
			wrap: false,
			autoSize: true,
			textScale: TXT_SCALE,
			textColor: SmallFont.FindFontColor('TCOTDJournalTextColor')
		);
		notesHeader.Pack(mainFrame);

		//===========================================================================
		//
		// scroll up/down arrows
		//
		//===========================================================================

		let arrowSizeX = 29;
		let arrowSizeY = 34;

		let scrollUpImageObjectives = TCOTDZFImage.Create
		(
			((objectivesFrame.box.pos.X + objectivesFrame.box.size.X / 2) - (arrowSizeX / 2) - arrowSizeX, objectivesFrame.box.size.Y + (arrowSizeY * 2.125)),
			(arrowSizeX, arrowSizeY),
			"graphics/journal/journal_ScrollUp.png"
		);
		scrollUpImageObjectives.Pack(mainFrame);

		let scrollDownImageObjectives = TCOTDZFImage.Create
		(
			((objectivesFrame.box.pos.X + objectivesFrame.box.size.X / 2) - (arrowSizeX / 2) + arrowSizeX, objectivesFrame.box.size.Y + (arrowSizeY * 2.125)),
			(arrowSizeX, arrowSizeY),
			"graphics/journal/journal_ScrollDown.png"
		);
		scrollDownImageObjectives.Pack(mainFrame);

		let scrollUpImageNotes = TCOTDZFImage.Create
		(
			((notesFrame.box.pos.X + notesFrame.box.size.X / 2) - (arrowSizeX / 2) - arrowSizeX, notesFrame.box.size.Y + (arrowSizeY * 2.125)),
			(arrowSizeX, arrowSizeY),
			"graphics/journal/journal_ScrollUp.png"
		);
		scrollUpImageNotes.Pack(mainFrame);

		let scrollDownImageNotes = TCOTDZFImage.Create
		(
			((notesFrame.box.pos.X + notesFrame.box.size.X / 2) - (arrowSizeX / 2) + arrowSizeX, notesFrame.box.size.Y + (arrowSizeY * 2.125)),
			(arrowSizeX, arrowSizeY),
			"graphics/journal/journal_ScrollDown.png"
		);
		scrollDownImageNotes.Pack(mainFrame);

		// make invisible clickable buttons for the scrolling
		let bt = TCOTDZFBoxTextures.CreateSingleTexture("TNT1A0", false);
		TCOTDZFItemListButton btn = NULL;

		btn = TCOTDZFItemListButton.Create
		(
			scrollUpImageObjectives.box.pos,
			scrollUpImageObjectives.box.size,
			cmdHandler: handler,
			command: "TCOTDZFHandlerCommandScrollUpObjectives",
			bt,
			bt,
			bt,
			bt
		);
		btn.Pack(mainFrame);

		btn = TCOTDZFItemListButton.Create
		(
			scrollDownImageObjectives.box.pos,
			scrollDownImageObjectives.box.size,
			cmdHandler: handler,
			command: "TCOTDZFHandlerCommandScrollDownObjectives",
			bt,
			bt,
			bt,
			bt
		);
		btn.Pack(mainFrame);

		btn = TCOTDZFItemListButton.Create
		(
			scrollUpImageNotes.box.pos,
			scrollUpImageNotes.box.size,
			cmdHandler: handler,
			command: "TCOTDZFHandlerCommandScrollUpNotes",
			bt,
			bt,
			bt,
			bt
		);
		btn.Pack(mainFrame);

		btn = TCOTDZFItemListButton.Create
		(
			scrollDownImageNotes.box.pos,
			scrollDownImageNotes.box.size,
			cmdHandler: handler,
			command: "TCOTDZFHandlerCommandScrollDownNotes",
			bt,
			bt,
			bt,
			bt
		);
		btn.Pack(mainFrame);

		//===========================================================================
		//
		//
		//
		//===========================================================================

		// Default focus is on the notes, as it's the only one now that is actually activatable
		mCurrentlyFocused = notesFrame;
		mCurrentlyFocused.UpdateHighlighted();
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void Ticker(void)
	{
		Super.Ticker();

		if (pmo.player.playerstate == PST_DEAD || pmo.CountInv("CutsceneEnabled"))
		{
			Close();
			return;
		}
	}

	override void OnReturn(void)
	{
		if (TCOTDGameplayStatics.IsCoop())
		{
			objectivesFrame.RefreshJournalCoop();
			notesFrame.RefreshJournalCoop();
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override bool MenuEvent(int mkey, bool fromcontroller)
	{
		bool switchedSides = false;

		switch (mkey)
		{
		case MKEY_Enter:
			ActivateSelection();
			break;
		case MKEY_Up:
			SelectUp();
			break;
		case MKEY_Down:
			SelectDown();
			break;
		case MKEY_Left:
			mCurrentlyFocused = objectivesFrame;
			switchedSides = true;
			break;
		case MKEY_Right:
			mCurrentlyFocused = notesFrame;
			switchedSides = true;
			break;
		case MKEY_PageUp:
			ScrollUp(true);
			break;
		case MKEY_PageDown:
			ScrollDown(true);
			break;
		case MKEY_Back:
			break;
		}

		if (switchedSides)
		{

			for (int i = 0; i < objectivesFrame.mClickableItems.Size(); i++)
			{
				objectivesFrame.mClickableItems[i].isHighlighted = false;
			}

			for (int i = 0; i < notesFrame.mClickableItems.Size(); i++)
			{
				notesFrame.mClickableItems[i].isHighlighted = false;
			}

			mCurrentlyFocused.UpdateHover();
			mCurrentlyFocused.UpdateHighlighted();
		}

		return Super.MenuEvent(mkey, fromcontroller);
	}

	override bool OnUIEvent(UIEvent ev)
	{
		objectivesFrame.UpdateHover();
		notesFrame.UpdateHover();

		if (mCurrentlyFocused && mCurrentlyFocused.mClickableItems.Size() > 0)
		{
			if (ev.type == UIEvent.Type_MouseMove || ev.type == UIEvent.Type_LButtonClick)
			{
				// force recalculate highlighted stuff
				for (int i = 0; i < objectivesFrame.mClickableItems.Size(); i++)
				{
					objectivesFrame.mClickableItems[i].isHighlighted = false;
					objectivesFrame.mClickableItems[i].mButton.UpdateHover();

					if (objectivesFrame.mClickableItems[i].isHighlighted)
						objectivesFrame.mSelected = i;
				}

				for (int i = 0; i < notesFrame.mClickableItems.Size(); i++)
				{
					notesFrame.mClickableItems[i].isHighlighted = false;
					notesFrame.mClickableItems[i].mButton.UpdateHover();

					if (notesFrame.mClickableItems[i].isHighlighted)
						notesFrame.mSelected = i;
				}
			}
		}

		if (ev.Type == UIEvent.Type_WheelUp)
		{
			ScrollUp();
			return Super.OnUIEvent(ev);
		}
		else if (ev.Type == UIEvent.Type_WheelDown)
		{
			ScrollDown();
			return Super.OnUIEvent(ev);
		}

		return Super.OnUIEvent(ev);
	}

	override void Drawer(void)
	{
		Super.Drawer();

		if (pmo.player.playerstate == PST_DEAD || pmo.CountInv("CutsceneEnabled"))
		{
			Close();
			return;
		}

		DontDim = true;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void ActivateSelection(void)
	{
		if (!mCurrentlyFocused)
			return;

		if (mCurrentlyFocused.mClickableItems.Size() == 0)
			return;

		int i = mCurrentlyFocused.mSelected;
		let btn = mCurrentlyFocused.mClickableItems[i].mButton;
		handler.ButtonClickCommand(btn, btn.command);
	}

	void ChangeSelection(int i)
	{
		if (!mCurrentlyFocused)
			return;

		mCurrentlyFocused.mSelected += i;
		mCurrentlyFocused.mSelected = clamp(mCurrentlyFocused.mSelected, 0, mCurrentlyFocused.GetTotalItems() - 1);

		mCurrentlyFocused.UpdateHighlighted();
	}

	void SelectUp(void)
	{
		ChangeSelection(-1);
		ScrollUp();
	}

	void SelectDown(void)
	{
		ChangeSelection(1);
		ScrollDown();
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void ScrollUp(bool fromButton = false)
	{
		if (mCurrentlyFocused.currentScrollPos == 0)
			return;

		for (int i = 0; i < mCurrentlyFocused.mClickableItems.Size(); i++)
		{
			mCurrentlyFocused.mClickableItems[i].box.pos.Y += SmallFont.GetHeight() * TXT_SCALE;
			mCurrentlyFocused.mClickableItems[i].mButton.box.pos.Y += SmallFont.GetHeight() * TXT_SCALE;
			mCurrentlyFocused.mClickableItems[i].mShadow.box.pos.Y += SmallFont.GetHeight() * TXT_SCALE;
		}

		mCurrentlyFocused.currentScrollPos++;

		if (fromButton)
		{
			mCurrentlyFocused.mSelected--;
			mCurrentlyFocused.UpdateHighlighted();
		}
	}

	void ScrollDown(bool fromButton = false)
	{
		int lc = 0;
		for (int i = 0; i < mCurrentlyFocused.mClickableItems.Size(); i++)
		{
			lc += 1 * (mCurrentlyFocused.mClickableItems[i].GetLineCount());
		}
		if (abs(mCurrentlyFocused.currentScrollPos) >= abs(lc - GetMaxShowableLines()))
			return;

		for (int i = 0; i < mCurrentlyFocused.mClickableItems.Size(); i++)
		{
			mCurrentlyFocused.mClickableItems[i].box.pos.Y -= SmallFont.GetHeight() * TXT_SCALE;
			mCurrentlyFocused.mClickableItems[i].mButton.box.pos.Y -= SmallFont.GetHeight() * TXT_SCALE;
			mCurrentlyFocused.mClickableItems[i].mShadow.box.pos.Y -= SmallFont.GetHeight() * TXT_SCALE;
		}

		mCurrentlyFocused.currentScrollPos--;

		if (fromButton)
		{
			mCurrentlyFocused.mSelected++;
			mCurrentlyFocused.UpdateHighlighted();
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	static bool IsOpen ()
	{
		let mnu = Menu.GetCurrentMenu();
		return mnu &&
			(mnu is 'TCOTDJournalMenu' || mnu is 'TCOTDJournalItemReaderMenu');
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	static double GetScaleFactor(void)
	{
		//return Screen.GetHeight() / double(TCOTDJournalMenu.RES_HEIGHT);
		return Screen.GetHeight() / double(400);
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	static int GetMaxShowableLines(void)
	{
		double fontHeight = SmallFont.GetHeight() * TXT_SCALE;
		return int(SUB_FRAME_HEIGHT / fontHeight);
	}
}
