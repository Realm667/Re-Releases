/*
* TCOTD2 Game Code
* Copyright (C) 2020 - 2023  Nash Muhandes
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//===========================================================================
//
// TCOTDZFClickableItem
//
//===========================================================================

class TCOTDZFClickableItem : TCOTDZFLabel
{
	TCOTDZFItemListButton mButton;
	TCOTDZFLabel mShadow;
	bool isHighlighted;
	Inventory mItem;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	static TCOTDZFClickableItem Create(Vector2 pos, Vector2 size, string text = "", Font fnt = NULL, AlignType alignment = AlignType_TopLeft,
		bool wrap = true, bool autoSize = false, double textScale = 1, int textColor = Font.CR_WHITE,
		double lineSpacing = 0,
		Inventory item = NULL, TCOTDZFLabel shadow = NULL)
	{
		let ret = new('TCOTDZFClickableItem');

		ret.Config(text, fnt, alignment, wrap, autoSize, textScale, textColor, lineSpacing);
		ret.SetBox(pos, size);

		ret.mItem = item;
		ret.mShadow = shadow;

		return ret;
	}

	override void Drawer(void)
	{
		Super.Drawer();

		if (isHighlighted)
		{
			textColor = SmallFont.FindFontColor('TCOTDJournalTextHighlighted');
			mShadow.hidden = false;
		}
		else
		{
			if (mItem is 'TCOTDObjective')
			{
				if (TCOTDObjective(mItem).GetObjectiveState() == TCOTDObjective.OBJECTIVE_COMPLETE)
					textColor = SmallFont.FindFontColor('TCOTDJournalTextObjectiveComplete');
				else if (TCOTDObjective(mItem).GetObjectiveState() == TCOTDObjective.OBJECTIVE_FAIL)
					textColor = SmallFont.FindFontColor('TCOTDJournalTextObjectiveFailed');
				else
					textColor = SmallFont.FindFontColor('TCOTDJournalTextColor');
			}
			else
			{
				textColor = SmallFont.FindFontColor('TCOTDJournalTextColor');
			}
			mShadow.hidden = true;
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void MakeButton(TCOTDZFJournalHandler handler, int lineCount, String cmdName, String itemClassName)
	{
		// create a clickable zone using an invisible button
		let bt = TCOTDZFBoxTextures.CreateSingleTexture("TNT1A0", false);
		let btn = TCOTDZFItemListButton.Create
		(
			self.box.pos,
			self.box.size,
			cmdHandler: handler,
			command: "TCOTDZFHandlerCommand" .. cmdName .. ":" .. itemClassName,
			bt,
			bt,
			bt,
			bt,
			clickableItem: self
		);
		btn.box.size.Y = (SmallFont.GetHeight() * textScale) * lineCount;
		btn.Pack(master);
		mButton = btn;
	}
}
