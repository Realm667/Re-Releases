/*
* TCOTD2 Game Code
* Copyright (C) 2020 - 2023  Nash Muhandes
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//===========================================================================
//
// TCOTDZFJournalHandler
//
//===========================================================================

class TCOTDZFJournalHandler : TCOTDZFHandler
{
	TCOTDJournalMenu menu;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void ButtonClickCommand(TCOTDZFButton caller, String command)
	{
		if (!menu)
			return;

		if (!menu.objectivesFrame || !menu.notesFrame)
			return;

		// Parse the command
		Array<String> strings;
		strings.Clear();
		command.Split(strings, ":");

		// Return if the array has less than 2 strings
		if (strings.Size() < 2)
			return;

		/*
		if ((strings[0] ~== "ActivatePDA"))
		{
			// Play activate sound
			Menu.MenuSound("journal/click");

			// Mark as read
			let pda = PDA(menu.pmo.FindInventory(strings[1], true));
			if (pda)
			{
				EventHandler.SendNetworkEvent("EV_MarkPDARead:" .. strings[1]);
			}

			class<PDA> cls = strings[1];
			String txt = GetDefaultByType((class<PDA>)(cls)).pdaText;
			String pdaText = StringTable.Localize(txt);

			// Update content image and text
			menu.pdaContentBackground.image = GetDefaultByType((class<PDA>)(cls)).pdaImage;
			menu.pdaContentText.SetText(pdaText);

			// Update current selection
			int index = menu.pdaList.items.Find(PDAColoredButton(caller));
			menu.pdaList.currentSelection = index;
			menu.pdaList.UpdateSelection();

			// Play sound if available
			Sound snd = GetDefaultByType((class<PDA>)(cls)).pdaAudio;
			if (snd)
			{
				// Find the PDA reader and play the sound from it (lol hack)
				let pdaReader = menu.pmo.FindInventory("PDAReader", true);
				if (pdaReader && menu.pmo == players[consoleplayer].mo)
				{
					pdaReader.A_StartSound(snd, CHAN_VOICE, CHANF_UI, snd_menuvolume, ATTN_NONE);
				}
			}
			else
			{
				// Stop all sounds when clicking on a soundless PDA
				EventHandler.SendNetworkEvent("EV_StopPDASound");
			}
		}
		*/
	}

	override void ElementHoverChanged(TCOTDZFElement caller, string command, bool unhovered)
	{
		if (!unhovered && !caller.disabled)
		{
			Menu.MenuSound("journal/hover");
		}
		Super.ElementHoverChanged(caller, command, unhovered);
	}
}
