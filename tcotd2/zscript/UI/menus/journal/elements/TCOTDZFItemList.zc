/*
* TCOTD2 Game Code
* Copyright (C) 2020 - 2023  Nash Muhandes
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//===========================================================================
//
// TCOTDZFItemList
//
//===========================================================================

class TCOTDZFItemList : TCOTDZFFrame
{
	TCOTDJournalMenu mJournalMenu;
	String mFilterClassName;
	Array<Inventory> mItems;
	Array<TCOTDZFClickableItem> mClickableItems;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	TCOTDZFItemList Init(Vector2 pos, Vector2 size, String className, TCOTDJournalMenu mnu)
	{
		Super.Init(pos, size);
		mFilterClassName = className;
		mJournalMenu = mnu;
		return self;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void Refresh(void)
	{
		class<Inventory> cls = mFilterClassName;
		if (!cls)
			return;

		// clear the array
		if (mItems.Size() > 0)
			mItems.Clear();

		if (mClickableItems.Size() > 0)
		{
			for (int i = mClickableItems.Size(); i --> 0;)
			{
				mClickableItems[i].Unpack();
			}
			mClickableItems.Clear();
		}

		// find the items on the player
		Array<Inventory> tmpItems;
		tmpItems.Clear();
		//int count = GetItemCount();
		for (Inventory item = mJournalMenu.pmo.Inv; item != NULL; item = item.Inv)
		{
			if (item is cls)
			{
				tmpItems.Push(item);
			}
		}

		// sort by age
		for (int x = 0; x < tmpItems.Size(); x++)
		{
			for (int y = 0; y < tmpItems.Size() - 1; y++)
			{
				if (tmpItems[y + 1].GetAge() > tmpItems[y].GetAge())
				{
					let p = tmpItems[y + 1];
					tmpItems[y + 1] = tmpItems[y];
					tmpItems[y] = p;
				}
			}
		}

		// actually add the items to the member array
		for (int i = 0; i < tmpItems.Size(); i++)
		{
			if (tmpItems[i])
			{
				mItems.Push(tmpItems[i]);
			}
		}

		// rebuild the list
		if (mItems.Size() > 0)
		{
			double nextY = 0;
			for (int i = 0; i < mItems.Size(); i++)
			{
				if (mItems[i])
				{
					String txt = String.Format("- %s", StringTable.Localize(mItems[i].GetTag()));
					let newItem = TCOTDZFClickableItem(new('TCOTDZFClickableItem').Init
					(
						(0, nextY),
						(self.box.size.X, 0),
						text: txt,
						fnt: SmallFont,
						wrap: true,
						autoSize: true,
						textColor: SmallFont.FindFontColor('TCOTDJournalTextColor')
					));

					newItem.mItem = mItems[i];

					newItem.Pack(self);

					BrokenLines textLines = SmallFont.BreakLines(newItem.text, int(newItem.box.size.X / newItem.textScale));
					int prevLineCount = textLines.Count();
					nextY += (SmallFont.GetHeight() * newItem.textScale * prevLineCount);

					newItem.MakeButton(mJournalMenu.handler, prevLineCount, mFilterClassName, mItems[i].GetClassName());

					mClickableItems.Push(newItem);
				}
			}
		}
	}

	/*
	int GetItemCount(void)
	{
		class<Inventory> cls = mFilterClassName;
		if (!cls)
			return 0;

		int count = 0;
		for (Inventory item = mJournalMenu.pmo.Inv; item != NULL; item = item.Inv)
		{
			if (item is cls)
				count++;
		}
		return count;
	}
	*/
}
