/////////////
// SPIDERS //
/////////////
class MiniSpider : TCOTDMonster
{
	Default
	{
		//$Title Spider (Small)
		Radius 7;
		Height 15;
		Speed 2.5;
		Health 8;
		MeleeRange 48;
		Scale 0.25;
		Translation 0;
		SeeSound "spider/sight";
		AttackSound "spider/attack";
		PainSound "spider/pain";
		DeathSound "spider/death";
		ActiveSound "spider/sight";
		Obituary "$OB_MSPID";
		Tag "$FN_MSPID";
		+NOSPRITESHADOW
	}

	States
	{
	Spawn:
		MNTR AB 10 A_Look();
		Loop;
	See:
		MNTR A 1 A_Chase();
		MNTR AAA 1 A_Chase2();
		MNTR B 1 A_Chase();
		MNTR BBB 1 A_Chase2();
		MNTR C 1 A_Chase();
		MNTR CCC 1 A_Chase2();
		MNTR D 1 A_Chase();
		MNTR DDD 1 A_Chase2();
		Loop;
	Melee:
		MNTR UW 5 A_FaceTarget();
		MNTR X 5 A_MonsterMeleeAttack(3, hitSound: "spider/pain");
		Goto See;
	Death:
		MNTS F 5;
		MNTS E 5 A_Scream();
		MNTS D 5;
		MNTS C 5 A_NoBlocking();
		MNTS B 5;
		MNTS A -1;
		Stop;
	}
}

class LargeSpider : MiniSpider
{
	Default
	{
		//$Title Spider (Large)
		Radius 14;
		Height 30;
		Speed 4.5;
		MeleeRange 56;
		MeleeThreshold 128;
		Health 150;
		Scale 0.50;
		Translation 1;
		Obituary "$OB_BSPID";
		Tag "$FN_BSPID";
		DropItem "TCOTDHealthPickupHeart", 160;
	}

	override int DamageMobj (Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		int dmg = Super.DamageMobj(inflictor, source, damage, mod, flags, angle);

		// [Blue Shadow] Prevent the monster from drifting backwards if it was charging.
		if (bSkullFly && health > 0)
		{
			Vel = (0, 0, 0);
		}

		return dmg;
	}

	States
	{
	Missile:
		MNTR UWW 5 A_FaceTarget();
		MNTR A 0 A_SkullAttack();
	ChargeLoop:
		MNTR ABCD 2;
		Loop;
	Melee:
		MNTR UW 5 A_FaceTarget();
		MNTR X 5 A_MonsterMeleeAttack(8, hitSound: "spider/pain", damageType: 'Poison');
		Goto See;
	}
}
