class TCOTDMonster : Actor abstract
{
	const HEARTDROPCHANCE = int(0.333335 * 255);

	// [Blue Shadow] Set this in the editor to 'true' so the monster dies upon spawning. This is for
	// monsters which get resurrected later via scripting.
	bool user_SpawnDead;

	// [Blue Shadow] Set this in the editor to 'true' so the monster can only revive itself (a monster
	// being brought back from the dead via Thing_Raise is treated as reviving itself).
	bool user_ReviveSelfOnly;

	Default
	{
		//$Category New Monsters (TCOTD2)
		//$Color 12
		Monster;
		MeleeRange 56;
		+FLOORCLIP
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();

		if (user_SpawnDead)
		{
			ClearCounters();
			A_Die();
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	/*
	override void Tick(void)
	{
		Super.Tick();

		// do billboarding when dead
		bForceXYBillboard = (Health <= 0);
	}
	*/

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override bool CanResurrect(Actor other, bool passive)
	{
		return !(passive && user_ReviveSelfOnly);
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	// will be called frequently to simulate smoother movement
	protected void A_Chase2(void)
	{
		A_Chase('Melee', NULL, CHF_NOPLAYACTIVE);
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	protected void A_MonsterMeleeAttack(double baseDamage, double range = 0, Sound hitSound = "", Sound missSound = "", Name damageType = 'None')
	{
		if (target == nullptr)
		{
			return;
		}

		if (range == 0)
		{
			range = 92;
		}

		A_FaceTarget();

		if (CheckMeleeRange(range))
		{
			if (hitSound)
			{
				A_StartSound(hitSound, CHAN_WEAPON);
			}

			int damage = TCOTDGameplayStatics.GetAttackDamage(baseDamage);
			int newdam = target.DamageMobj(self, self, damage, damageType == 'None' ? 'Melee' : damageType);
			target.TraceBleed(newdam > 0 ? newdam : damage, self);
		}
		else if (missSound)
		{
			A_StartSound(missSound, CHAN_WEAPON);
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	protected void A_SpawnGibs(void)
	{
		int size = int(Radius) / 2;
		for (int i = 0; i < size; i++)
		{
			bool ret;
			Actor mo;
			[ret, mo] =
			A_SpawnItemEx("TCOTDGib",
				xofs: frandom[rnd_SpawnGibs](-(Radius / 2), (Radius / 2)),
				yofs: frandom[rnd_SpawnGibs](-(Radius / 2), (Radius / 2)),
				zofs: Default.Height / 2 + frandom[rnd_SpawnGibs](-5, 5),
				xvel: frandom[rnd_SpawnGibs](-2, 2),
				yvel: frandom[rnd_SpawnGibs](-2, 2),
				zvel: frandom[rnd_SpawnGibs](6, 12),
				angle: frandom[rnd_SpawnGibs](0, 360),
				flags: SXF_NOCHECKPOSITION | SXF_USEBLOODCOLOR,
				failchance: 77);
			if (mo && ret)
				mo.CopyBloodColor(self);
		}
	}
}
