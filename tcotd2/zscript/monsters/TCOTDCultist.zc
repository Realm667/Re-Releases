class TCOTDCultist : TCOTDMonster
{
	Default
	{
		Health 60;
		Radius 18;
		Height 70;
		Mass 100;
		Scale 0.7;
		PainChance 192;
		PainChance "Stab", 192 / 3;
		SeeSound "cultist/sight";
		PainSound "cultist/pain";
		DeathSound "cultist/death";
		ActiveSound "cultist/active";
		+CASTSPRITESHADOW
	}

	override void Tick(void)
	{
		Super.Tick();

		bFrightened = health < (GetMaxHealth() / 4);
	}

	protected void A_CultistDropItem(class<Actor> cls, int chance)
	{
		// don't drop ammo if meant to be spawned dead, to reduce ammo abundance
		if (user_SpawnDead || !cls)
			return;

		A_DropItem(cls, 0, chance);
	}

	States
	{
	Spawn:
		GCUL A 0;
		Goto SpawnLoop;
	SpawnLoop:
		#### AB 10 A_Look();
		Loop;
	Cowardly:
		#### A 0
		{
			ActiveSound = "cultist/flee";
		}
		Goto See + 1;
	See:
		#### A 1 A_Chase();
		#### AA 1 A_Chase2();
		#### A 1 A_Chase();
		#### AA 1 A_Chase2();
		#### B 1 A_Chase();
		#### BB 1 A_Chase2();
		#### B 1 A_Chase();
		#### BB 1 A_Chase2();
		#### C 1 A_Chase();
		#### CC 1 A_Chase2();
		#### C 1 A_Chase();
		#### CC 1 A_Chase2();
		#### D 1 A_Chase();
		#### DD 1 A_Chase2();
		#### D 1 A_Chase();
		#### DD 1 A_Chase2();
		#### E 1 A_Chase();
		#### EE 1 A_Chase2();
		#### E 1 A_Chase();
		#### E 1 A_Chase2();
		#### F 1 A_Chase();
		#### FF 1 A_Chase2();
		#### F 1 A_Chase();
		#### FF 1 A_Chase2();
		Loop;
	Pain:
		#### I 3;
		#### I 3 A_Pain();
		Goto See;
	Death:
		#### J 5;
		#### K 5 A_Scream();
		#### L 5 A_NoBlocking();
		#### MNOP 5;
		#### Q -1;
		Stop;
	XDeath:
		#### R 5;
		#### S 5 A_XScream();
		#### T 5
		{
			A_SpawnGibs();
			A_NoBlocking();
		}
		#### UVW 5;
		#### X -1;
		Stop;
	Raise:
		#### QPONMLKJ 5;
		Goto See;
	}
}

class TCOTDCultistTommy : TCOTDCultist
{
	private int attackCount;

	Default
	{
		//$Title Cultist TommyGun
		Speed 3;
		AttackSound "cultist/tommyatk";
		Obituary "$OB_CULT";
		Tag "$FN_CULT";
	}

	protected void A_CultistTommySetAttackCount(void)
	{
		attackCount = random[rnd_CultistTommyAttackCount](5, 8);
	}

	protected bool A_CultistTommyShouldAbortAttck(void)
	{
		return (--attackCount <= 0 || (target && target.health <= 0));
	}

	protected void A_CultistTommyAttack(void)
	{
		A_CustomBulletAttack(5.625 * 1.375, 3.5485 * 1.375, 1, TCOTDGameplayStatics.GetAttackDamage(5), "TCOTDBulletPuff", 0, CBAF_NORANDOM);
	}

	States
	{
	Death:
		#### # 0 A_CultistDropItem("TCOTDAmmoTommy", 80);
		Goto Super::Death;
	Missile:
		#### G 17 { A_CultistTommySetAttackCount(); A_FaceTarget(); }
		#### H 2 Light("CultistLight") A_CultistTommyAttack();
		#### G random(1, 2);
		#### G 0 { if (A_CultistTommyShouldAbortAttck()) SetStateLabel("See"); }
		Goto Missile + 1;
	}
}

class TCOTDCultistShotgun : TCOTDCultist
{
	Default
	{
		//$Title Cultist Sawed-Off
		Speed 4;
		AttackSound "shotguy/attack";
		Obituary "$OB_CUL2";
		Tag "$FN_CUL2";
	}

	protected void A_CultistShotgunAttack(void)
	{
		if (target)
		{
			A_StartSound(AttackSound, CHAN_WEAPON);
			A_FaceTarget();
			double bangle = self.Angle;
			double bslope = AimLineAttack(bangle, MISSILERANGE);

			for (int i = 0; i < 7; i++)
			{
				double ang = bangle + random2[CultistShotgunAttack]() * (5.625 * 1.75 / 256);
				double pit = bslope + random2[CultistShotgunAttack]() * (3.5485 * 1.75 / 256);
				int damage = TCOTDGameplayStatics.GetAttackDamage(5);
				LineAttack(ang, MISSILERANGE, pit, damage, 'Hitscan', "TCOTDBulletPuff");
			}
		}
	}

	States
	{
	Spawn:
		BCUL A 0;
		Goto SpawnLoop;
	Missile:
		#### G 17 A_FaceTarget();
		#### H 2 Light("CultistLight") A_CultistShotgunAttack();
		#### G 15;
		Goto See;
	Death:
		#### # 0 A_CultistDropItem("TCOTDAmmoShell", 80); // even if he does, he drops only 2 shells, so you don't get too much ammo
		Goto Super::Death;
	}
}
