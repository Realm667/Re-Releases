// Copypaste the following code to TCOTDPlayer.zc to playtest - Ozy81
/*
	SpawnEffect(class<PlayerEffect>)
	RemoveEffect(class<PlayerEffect>)
	- Used to spawn/remove an effect actor that follows the player around (e.g., glow for FireBrand)
	- See PlayerEffect class information below
	- Checks should be performed in DoTokenChecks:

		// If current weapon is BFG9000, spawn swirlysparkles that follow the player
		if (player && player.ReadyWeapon is "BFG9000") { SpawnEffect("SwirlySparkles"); }
		else { RemoveEffect("SwirlySparkles"); }
*/

		//===========================================================================
		//
		// Lantern Effects - Code by AFADoomer and Talon1024 - Adapted by Ozy81
		//
		//===========================================================================

	void DoTokenChecks()
	{
		if (health <= 0) { return; } // Don't change sprites if the player is dead
		
		// Lantern effect handling
		LanternPickup lantern = LanternPickup(FindInventory("LanternPickup"));

		if (player && lantern && lantern.active) { SpawnEffect("LanternEffect"); }
		else { RemoveEffect("LanternEffect"); }
	}

	// Function to spawn no more than a single copy of an effect actor as a child of the player
	void SpawnEffect(class<PlayerEffect> effect)
	{
		ThinkerIterator it = ThinkerIterator.Create("PlayerEffect", Thinker.STAT_DEFAULT - 4);
		PlayerEffect mo;

		while (mo = PlayerEffect(it.Next()))
		{
			if (mo.master && mo.master != self) { continue; } // Only look at effects that belong to this player actor
			if (mo is effect) { return; } // The effect already exists, so abort so we don't spawn it again
		}

		// If it wasn't already there, spawn this effect
		Actor newEffect = Spawn(effect);
		if (newEffect) { newEffect.master = self; }
	}

	// Function to remove any spawned copy of an effect that is a child of the player
	void RemoveEffect(class<PlayerEffect> effect)
	{
		ThinkerIterator it = ThinkerIterator.Create("PlayerEffect", Thinker.STAT_DEFAULT - 4);
		PlayerEffect mo;

		while (mo = PlayerEffect(it.Next()))
		{
			if (mo.master && mo.master != self) { continue; } // Only look at effects that belong to this player actor
			if (mo is effect) { mo.SetStateLabel('null'); } // Remove the effect, if found
		}
	}

	States
	{
	Spawn:
		PLAY A 0 DoTokenChecks(); // Must run the check once here because it can miss a frame somehow otherwise.  All other states are taken care of in the Tick function.
	SpawnLoop:
		"####" A -1;
		Loop;
	See:
		PLAY AABBCCDD 4;
		Loop;
	Missile:
		PLAY E 12;
		Goto Spawn;
	Melee:
		PLAY F 6 BRIGHT;
		Goto Missile;
	Pain:
		PLAY G 4;
		PLAY G 4 A_Pain();
		Goto Spawn;
	Death:
		PLAY H 10;
		PLAY I 10 A_PlayerScream();
		PLAY J 10 A_NoBlocking();
		PLAY KLM 10;
		PLAY N -1;
		Stop;
	XDeath:
		PLAY O 5;
		PLAY P 5 A_XScream();
		PLAY Q 5 A_NoBlocking();
		PLAY RST 5;
		PLAY U -1;
		Stop;
	}
}

class TCOTDPlayerDebugDamagePower : PowerDamage
{
	Default
	{
		DamageFactor "Normal", 6666;
	}
}

class LanternPickup : CustomInventory
{
	bool active;

	Default
	{
		//$Category TCOTD2 Powerups
		//$Title Useable Lantern (requires Oil)
		//$Color 6
		Scale 0.5;
		Tag "Lantern";
		Inventory.Icon "LANTB0";
		Inventory.PickupMessage "$IP_LANT";
		Inventory.MaxAmount 1;
		Inventory.PickupSound "misc/gadget_pickup"; //requires sound
		+INVENTORY.INVBAR
		+INVENTORY.UNDROPPABLE
	}

	States
	{
		Spawn:
			LANT A -1;
			Stop;
		Pickup:
			"####" A 0 A_GiveInventory("LanternOil", 1000);
			Stop;
		Use:
			"####" A 0 {
				invoker.active = !invoker.active;

				if (invoker.active && !FindInventory("LanternOil")) { invoker.active = false; }
			}
			Fail;
	}

	override void Tick()
	{
		if (globalfreeze || level.Frozen) { return; }

		if (owner && active)
		{
			if (owner.waterlevel >= 3)
			{
				A_StartSound("flamer/steam", CHAN_AUTO, Random(15, 45)); //requires sound
				active = false;
			}
			else if (owner.FindInventory("LanternOil")) { owner.TakeInventory("LanternOil", 1); }
			else { active = false; }
		}
	}
}

// Base class for simple visual effects that will always follow the player until removed
class PlayerEffect : Actor
{
	Default
	{
		+NOINTERACTION
	}

	States
	{
		Spawn:
			// This state should be replaced in child classes
			UNKN A 1;
			Loop;
	}

	override void BeginPlay()
	{
		ChangeStatNum(Thinker.STAT_DEFAULT - 4);
	}

	override void Tick()
	{
		// If a master is assigned, always move to its location
		if (master) { A_Warp(AAPTR_MASTER, flags:WARPF_COPYPITCH | WARPF_COPYINTERPOLATION | WARPF_NOCHECKPOSITION); }
		Super.Tick();
	}

}

class LanternEffect : PlayerEffect
{
	States
	{
		Spawn:
			TNT1 A 4 NODELAY Light("LANT01");
			TNT1 A 4 Light("LANT02");
		SpawnLoop:
			TNT1 A 4 Light("LANT03") A_SetTics(Random(1, 3));
			Loop;
	}
}

class LanternOil : Inventory
{
	Default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 12000; //Near 5 mins maximum - ozy81
	}
}

class OilPickup : CustomInventory
{
	Default
	{
		//$Category TCOTD2 Powerups
		//$Title Lantern Oil
		//$Color 6
		Scale 0.50;
		-INVENTORY.INVBAR
		Inventory.MaxAmount 12; //1000x12=12000
		Inventory.PickupMessage "$IP_LOIL";
		Inventory.PickupSound "misc/ammo_pkup";
	}
	
	States
	{
		Spawn:
			LANT C -1;
			Loop;
		Pickup:
			TNT1 A 0 A_GiveInventory("LanternOil", 1000);
			Stop;
	}
}