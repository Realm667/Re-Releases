// Copyright 2020 - 2023 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// FireSpawner
//
//===========================================================================

class TCOTDFireSpawner : TCOTDSwitchableDecoration
{
	Default
	{
		//$Category Special Effects (TCOTD2)
		//$Title Fire Spawner
		//$Color 12
		Height 40;
		Radius 30;
		+DONTSPLASH
		+NOCLIP
		+NOGRAVITY
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void SpawnFire(void)
	{
		let fire = Spawn("TCOTDFireSpawnerFlame", Pos, NO_REPLACE);
		if (fire)
		{
			double fireScale;
			double vx, vy, vz;

			fireScale = 0.35;
			vx = frandom[rnd_SpawnFire](-1.0, 1.0);
			vy = frandom[rnd_SpawnFire](-1.0, 1.0);
			vz = frandom[rnd_SpawnFire](2.0, 4.0);

			fire.A_SetScale(fireScale);
			fire.Vel = (vx, vy, vz);
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
	Active:
		TNT1 A 4 NoDelay
		{
			A_StartSound("SFX/FireStart", CHAN_7);
			A_StartSound("SFX/FireLoop2", CHAN_6, CHANF_LOOP, 1.0, startTime: frandom[rnd_FireSpawn](0.f, S_GetLength("SFX/FireLoop2")));
		}
		TNT1 A 1 Light("FireSpawnerLarge")
		{
			if (!CheckSightOrRange(1000.0, true))
			{
				SpawnFire();

				if (GetAge() % 5 == 0)
					TCOTDFire.SpawnEmbers(self);
			}
		}
		Goto Active + 1;
	Inactive:
		TNT1 A 0
		{
			A_StartSound("SFX/FireDie", CHAN_7);
			A_StopSound(CHAN_6);
		}
		TNT1 A -1;
		Stop;
	}
}

class TCOTDFireSpawnerFlame : TCOTDFire
{
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_Jump(256, "Flame1", "Flame2", "Flame3");
		Stop;
	Flame1:
		FLM1 A 0;
		Goto SpawnLoop;
	Flame2:
		FLM3 A 0;
		Goto SpawnLoop;
	Flame3:
		FLM5 A 0;
		Goto SpawnLoop;
	}
}
