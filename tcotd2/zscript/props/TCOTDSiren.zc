// Copyright 2020 - 2023 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
//
//
//===========================================================================

class TCOTDSiren : TCOTDSwitchableDecoration
{
	// this is a special siren sound player that can be heard by
	// all players on the map

	bool sirenOn;
	double sirenVolume;

	Default
	{
		//$Category Special Actors (TCOTD2)
		//$Title Siren Noise
	}

	static void PlayGameOverMusic(void)
	{
		ThinkerIterator it = ThinkerIterator.Create("TCOTDSiren");
		let siren = TCOTDSiren(it.Next());
		if (siren)
			siren.A_StartSound("fakemusic/THEEND", CHAN_7, CHANF_UI, attenuation: ATTN_NONE);
	}

	static void StopGameOverMusic(void)
	{
		ThinkerIterator it = ThinkerIterator.Create("TCOTDSiren");
		let siren = TCOTDSiren(it.Next());
		if (siren)
			siren.A_StopSound(CHAN_7);
	}

	States
	{
	Spawn:
	Inactive:
		TNT1 A 1
		{
			if (sirenOn)
			{
				if (sirenVolume > 0.001)
				{
					sirenVolume *= 0.99;
					A_SoundVolume(CHAN_VOICE, sirenVolume);
				}
				else
				{
					A_StopSound(CHAN_VOICE);
					sirenOn = false;
				}
			}
		}
		Loop;
	Active:
		TNT1 A -1
		{
			sirenVolume = 1.0;
			A_StartSound("Siren", CHAN_VOICE, attenuation: ATTN_NONE);
			sirenOn = true;
		}
		Stop;
	}
}
