/*
* TCOTD2 Game Code
* Copyright (C) 2020 - 2023  Nash Muhandes
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//===========================================================================
//
// TCOTDFogCloud
//
//===========================================================================

class TCOTDFogCloud : TCOTDSimpleActor
{
	mixin TCOTDClientsideOnlyMixin;

	double pulseRate;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		//$Category Special Effects (TCOTD2)
		//$Title Fog Cloud
		//$Color 12
		//$Sprite TNT1A0
		Radius 8;
		Height 16;
		RenderStyle "Translucent";
		Scale 3.0;
		+NOINTERACTION
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void PostBeginPlay(void)
	{
		Super.PostBeginPlay();

		// randomize alpha pulsate speed
		pulseRate = frandom[rnd_FogCloudSpawn](40.0, 120.0);

		// the original had a random Z offset when spawned
		Vec3Offset(0.0, 0.0, frandom[rnd_FogCloudSpawn](0.0, 32.0));
	}

	override void Tick(void)
	{
		// make the actor invisible if feature is disabled
		bInvisible = !CVar.GetCVar("tcotd2_fog", players[consoleplayer]).GetBool();

		Super.Tick();

		if (CVar.GetCVar("vid_preferbackend", players[consoleplayer]).GetInt() == 2)
		{
			bInvisible = true;
			return;
		}

		if (!bNoTimeFreeze && isFrozen())
			return;

		// pulsate alpha
		let ticRate = Thinker.TICRATE;
		double pulseAlpha = abs(asin(sin(180.0 / (ticRate * pulseRate) * GetAge())) / 90);
		pulseAlpha = clamp(pulseAlpha, Default.Alpha, 1.0);
		Alpha = pulseAlpha;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		XSMK A -1;
		Stop;
	}
}
