/*
* TCOTD2 Game Code
* Copyright (C) 2020 - 2023  Nash Muhandes
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//===========================================================================
//
// TCOTDSnowParticle
// This is a stripped down version of the precipitation system from Bumi, an
// all-encompassing real-time weather and time cycle solution for GZDoom by
// Nash Muhandes.
// Bumi is (C) 2008 - 2023 Nash Muhandes
//
//===========================================================================

class TCOTDSnowParticle : Actor
{
	mixin TCOTDClientSideOnlyMixin;

	bool ffc;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		RenderStyle "Translucent";
		Alpha 0;
		Scale 0.6;
		+NOINTERACTION
		+DONTSPLASH
		+FORCEXYBILLBOARD
		+INVISIBLEINMIRRORS
		+NOSAVEGAME
		-SOLID
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void PostBeginPlay(void)
	{
		bool isIndoors = ceilingpic != skyflatnum;
		bool isNotCPlayer = (Tracer && !Tracer.CheckLocalView(consoleplayer));
		if (isIndoors || isNotCPlayer)
		{
			Destroy();
			return;
		}
		WorldOffset = (0, 0, 24.);
		Super.PostBeginPlay();
	}

	override void Tick(void)
	{
		UpdateWaterLevel();

		if (Pos.Z <= FloorZ || WaterLevel >= 3)
		{
			Destroy();
			return;
		}

		if (Vel != (0, 0, 0))
			SetXYZ(Vec3Offset(Vel.X, Vel.Y, Vel.Z));

		if (tics == -1)
			return;
		else if (--tics <= 0)
			SetState(CurState.NextState);
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		TNT1 A 1;
		TNT1 A 1
		{
			if (!Level.IsPointInLevel(Pos))
				Destroy();
			FindFloorCeiling();
			return ResolveState(NULL);
		}
	Spawn1:
		SNOW A 1
		{
			A_FadeIn(0.04);
			if (Alpha >= 0.75)
				return ResolveState("Spawn2");
			return ResolveState(NULL);
		}
		Loop;
	Spawn2:
		SNOW A 1
		{
			if (GetAge() > 175)
				Destroy();
		}
		Loop;
	}
}
