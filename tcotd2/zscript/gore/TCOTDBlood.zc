// Copyright 2023 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote produchs
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// B E S P O K E (tm) Gore
// Made specifically for TCOTD2 by Nash Muhandes
// Obviously a copy-cat of Blood's blood effects, but written from scratch
// based on observation
// It is not meant to be a 1:1 recreation
//
//===========================================================================

class TCOTDBlood : Blood replaces Blood
{
	int rTics;

	Default
	{
		Gravity 0.2;
		LightLevel 72;
		+ADDLIGHTLEVEL
		+PUFFGETSOWNER
		+FORCEXYBILLBOARD
		+DONTSPLASH
		-ALLOWPARTICLES
	}

	override void BeginPlay(void)
	{
		Super.BeginPlay();
		rTics = random[rnd_bloodTics](2, 4);
	}

	States
	{
	Spawn:
		TNT1 AAA 0;
		TNT1 A 0
		{
			Vector3 ofs =
			(
				frandom[rnd_blud_spawn](-4, 4),
				frandom[rnd_blud_spawn](-4, 4),
				frandom[rnd_blud_spawn](-2, 2)
			);
			SetOrigin(Vec3Offset(ofs.X, ofs.Y, ofs.Z), false);

			/*
			bool ret;
			Actor trail;
			[ret, trail] =
			*/
			A_SpawnItemEx("TCOTDBloodTrail",
				zofs: 10,
				xvel: frandom[rnd_blud_spawn](-5, 5),
				yvel: frandom[rnd_blud_spawn](-5, 5),
				zvel: frandom[rnd_blud_spawn](-2, 6),
				flags: SXF_USEBLOODCOLOR | SXF_TRANSFERTRANSLATION,
				failchance: 128);

			for (int i = 0; i < 12; i++)
			{
				A_SpawnItemEx("TCOTDBloodSplash",
					zofs: 10,
					xvel: frandom[rnd_blud_spawn](-4, 4),
					yvel: frandom[rnd_blud_spawn](-4, 4),
					zvel: frandom[rnd_blud_spawn](0, 8),
					flags: SXF_USEBLOODCOLOR | SXF_TRANSFERTRANSLATION,
					failchance: 188);
			}

			if (Target)
			{
				CopyBloodColor(Target);
				for (int i = 0; i < 32; i++)
				{
					if (random[rnd_SprayWallBlood]() < 128)
						TraceBleedAngle(random[rnd_SprayWallBlood](5, 15), frandom[rnd_SprayWallBlood](0.0, 360.0), frandom[rnd_SprayWallBlood](-70.0, 0.0));
				}
			}
		}
		BLUD ABCDE 1 A_SetTics(rTics);
		Stop;
	}
}

//===========================================================================
//
//
//
//===========================================================================

class TCOTDBloodTrail : Actor
{
	Default
	{
		Gravity 0.25;
		+CORPSE
		+DONTSPLASH
		+NOCLIP
		-SOLID
	}

	override void Tick(void)
	{
		Super.Tick();

		if (!bNoTimeFreeze && isFrozen())
			return;

		if (GetAge() % 3 == 0)
			A_SpawnItemEx("TCOTDBloodTrailFX", flags: SXF_TRANSFERTRANSLATION | SXF_NOCHECKPOSITION);

		Vel.XY *= 0.987;

		if (GetAge() > (Thinker.TICRATE * 10))
			Destroy();
	}

	States
	{
	Crash:
		TNT1 A 0;
		Stop;
	}
}

class TCOTDBloodTrailFX : Actor
{
	Default
	{
		Scale 0.66;
		LightLevel 72;
		+ADDLIGHTLEVEL
		+FLOORCLIP
		+NOCLIP
		+CORPSE
		+DONTSPLASH
		+FORCEXYBILLBOARD
		-SOLID
	}

	States
	{
	Spawn:
		BLUD FGHIJ 5;
		Loop;
	Crash:
		TNT1 A 0;
		Stop;
	}
}

//===========================================================================
//
//
//
//===========================================================================

class TCOTDBloodSplash : Actor
{
	Default
	{
		Gravity 0.420;
		Scale 0.666;
		LightLevel 72;
		+ADDLIGHTLEVEL
		+CORPSE
		+DONTSPLASH
		+NOCLIP
		+FORCEXYBILLBOARD
		-SOLID
	}

	States
	{
	Crash:
		TNT1 A 0
		{
			A_SpawnItemEx("TCOTDBloodSpot", angle: frandom[rnd_BloodSplashSpawn](0, 360), flags: SXF_TRANSFERTRANSLATION);
			A_Stop();
		}
		BLUD KLMNO 4;
		Stop;
	}
}

//===========================================================================
//
//
//
//===========================================================================

class TCOTDBloodSpot : Actor
{
	mixin TCOTDClientSideOnlyMixin;

	bool ticked;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		Radius 11;
		Height 1;
		DistanceCheck "tcotd2_bspot_dist";
		+FLOORCLIP
		+FLATSPRITE
		+MOVEWITHSECTOR
		+NOINTERACTION
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void PostBeginPlay(void)
	{
		Super.PostBeginPlay();

		// reduce Z-fighting
		WorldOffset = (0, 0, frandom[rnd_BloodZFightFix](0.0, 0.01));

		double rs = frandom[rnd_BloodScale](0.5, 1.0);
		A_SetScale(rs);
		A_SetSize(Radius * rs, Height);

		if (TCOTDFloaterDetector.IsFloating(self))
		{
			Destroy();
			return;
		}

		AlignToPlane();
	}

	override void Tick(void)
	{
		if (!ticked)
		{
			Super.Tick();
			ticked = true;
		}

		if (tics == -1)
			return;
		else if (--tics <= 0)
			SetState(CurState.NextState);
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void AlignToPlane(double pitchAdjust = 0, bool ceiling = false)
	{
		// AlignToPlane
		// Original code written by ZZYZX
		// Modifications and improvements by Nash Muhandes

		// Note: I leave the 'self' references intact because in my other projects
		// that reuse this method, this is usually a static method.
		// This helps with copy/pasting when doing an update pass on all of them.

		if (!self)
			return;

		Vector3 norm;

		// [Nash] so many workarounds for 3D floors...
		Sector floorSec, ceilSec;
		F3DFloor f3d, c3d;
		double fh, ch;
		[fh, floorSec, f3d] = self.CurSector.NextLowestFloorAt(self.Pos.X, self.Pos.Y, self.Pos.Z + 0.001);
		[ch, ceilSec, c3d] = self.CurSector.NextHighestCeilingAt(self.Pos.X, self.Pos.Y, self.Pos.Z - 0.001, self.Pos.Z + self.Height - 0.001);

		if (!ceiling)
		{
			if (f3d)
				norm = f3d.bottom.Normal;
			else
				norm = self.CurSector.FloorPlane.Normal;
		}
		else
		{
			if (c3d)
				norm = c3d.top.Normal;
			else
				norm = self.CurSector.CeilingPlane.Normal;
		}

		Vector2 norm_p1 = (norm.X != 0 || norm.Y != 0) ? (norm.X, norm.Y).Unit() : (0, 0);
		Vector2 norm_p2 = ((norm.X, norm.Y).Length(), norm.Z);
		double dang = self.Angle;
		double fang = atan2(norm_p1.Y, norm_p1.X);
		double fpitch = atan2(norm_p2.X, norm_p2.Y);
		double ddiff1 = sin(fang - (dang - pitchAdjust));
		double ddiff2 = cos(fang - dang);
		self.Pitch = (fpitch * ddiff2 - pitchAdjust);
		self.Roll = -fpitch * ddiff1;
		self.Angle = dang;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		0000 A 1050 NoDelay { if (random[rnd_BSplatSound]() < 101) A_StartSound("bloodsplat"); }
	FadeOut:
		0000 A 1 A_FadeOut(0.05);
		Loop;
	}
}
