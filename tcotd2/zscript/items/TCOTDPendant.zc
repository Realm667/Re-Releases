/*
* TCOTD2 Game Code
* Copyright (C) 2020 - 2023  Nash Muhandes
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//===========================================================================
//
// The Pendant of Ill Omen
//
//===========================================================================

class TCOTDPendant : Inventory
{
	int next;
	int nextMax;
	int warningLevel;
	int nightmaresPassed;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		//$Category New Items (TCOTD2)
		//$Title Pendant of Ill Omen
		//$Color 6
		Tag "$TAG_PENDANT";
		Inventory.PickupMessage "$IP_PENDANT";
		Inventory.MaxAmount 1;
		+FORCEXYBILLBOARD
		+Inventory.UNDROPPABLE
		-Inventory.INVBAR
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void DoEffect(void)
	{
		Super.DoEffect();
		next = ACS_ScriptCall("NightmareGetCountdown", 0) / 35;
		nextMax = ACS_ScriptCall("NightmareGetCountdownMax", 0) / 35;
		//Console.Printf("next nightmare in %d seconds", next);
		//Console.Printf("nightmaresPassed: %d", nightmaresPassed);

		if (Owner && nextMax > 0)
		{
			int pct = 100 * next / nextMax;

			// reset warning
			if (pct > 30 && warningLevel == 3)
			{
				warningLevel = 0;
			}

			// TO DO: add sounds for the notifications?
			if (pct <= 30 && warningLevel == 0)
			{
				if (Owner == players[consoleplayer].mo)
					Console.Printf(StringTable.Localize("$PENDANT_WARN1"));

				warningLevel = 1;
			}

			if (pct <= 15 && warningLevel == 1)
			{
				if (Owner == players[consoleplayer].mo)
					Console.Printf(StringTable.Localize("$PENDANT_WARN2"));

				warningLevel = 2;
			}

			if (pct <= 5 && warningLevel == 2)
			{
				if (Owner == players[consoleplayer].mo)
					Console.Printf(StringTable.Localize("$PENDANT_WARN3"));

				warningLevel = 3;
			}
		}
	}

	override bool TryPickup(in out Actor toucher)
	{
		// you get a pendant, you get a pendant, everyone gets a pendant!
		if (Super.TryPickup(toucher))
		{
			TCOTDGameplayStatics.GiveItemToAllPlayers(self.GetClass());
			return true;
		}

		return false;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	static void IncreaseNightmarePassed(Actor activator)
	{
		if (activator && activator.player)
		{
			let pendant = TCOTDPendant(activator.FindInventory("TCOTDPendant"));
			if (pendant)
			{
				pendant.nightmaresPassed++;
				//Console.Printf("Player %d passed %d nightmares", PlayerPawn(activator).PlayerNumber(), pendant.nightmaresPassed);

				// break the pendant!
				int limit = 3 - skill;
				if (pendant.nightmaresPassed >= limit)
				{
					activator.ACS_ScriptCall("NightmarePendantBrokenPrintMsg", 0);
					activator.TakeInventory("TCOTDPendant", int.max);
					activator.A_StartSound("pendant/shatter", CHAN_AUTO);
				}
			}
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		PEND A -1 Bright;
		Stop;
	}
}
