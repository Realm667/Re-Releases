class TCOTDArmorBonus : ArmorBonus replaces ArmorBonus
{
	mixin TCOTDCoopItemMixin;

	Default
	{
		+FORCEXYBILLBOARD
	}
}

class TCOTDBodyArmor : GreenArmor replaces GreenArmor
{
	mixin TCOTDCoopItemMixin;

	Default
	{
		//$Category New Health and Armor (TCOTD2)
		//$Title Body Armor
		Scale 0.833;
		+FORCEXYBILLBOARD
		Inventory.Pickupmessage "$IP_BODYARMOR";
		Inventory.Icon "graphics/hud/HUDArmor1.png";
	}

	States
	{
	Spawn:
		ARM1 A -1;
		Stop;
	}
}

class TCOTDSuperArmor : BlueArmor replaces BlueArmor
{
	mixin TCOTDCoopItemMixin;

	Default
	{
		//$Category New Health and Armor (TCOTD2)
		//$Title Super Armor
		Scale 0.833;
		+FORCEXYBILLBOARD
		Inventory.Pickupmessage "$IP_SUPERARMOR";
		Inventory.Icon "graphics/hud/HUDArmor2.png";
	}

	States
	{
	Spawn:
		ARM2 A -1;
		Stop;
	}
}

class TCOTDGhostDamageHandler : Inventory
{
	override void AbsorbDamage (int damage, Name damageType, out int newdamage, Actor inflictor, Actor source, int flags)
	{
		if (damageType == 'Ghost')
		{
			let ba = Owner ? BasicArmor(Owner.FindInventory('BasicArmor')) : nullptr;

			if (ba && ba.ArmorType == 'TCOTDSuperArmor')
			{
				int saved = int(damage * 0.33335);

				if (ba.Amount < saved)
				{
					saved = ba.Amount;
				}

				newdamage -= saved;
				ba.Amount -= saved;

				if (ba.Amount == 0)
				{
					// The armor has become useless
					ba.SavePercent = 0;
					ba.ArmorType = 'None'; // Not BasicArmor.
				}
			}
		}
	}

    override Inventory CreateTossable (int amt)
    {
        return nullptr;
    }
}
