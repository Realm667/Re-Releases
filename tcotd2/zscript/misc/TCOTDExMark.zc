/*
* TCOTD2 Game Code
* Copyright (C) 2020 - 2023  Nash Muhandes
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//===========================================================================
//
// TCOTDExMark
// Exclamation marks used to highlight important interactions in the world
//
//===========================================================================

class TCOTDExMark : TCOTDSimpleActor
{
	mixin TCOTDClientsideOnlyMixin;

	bool touched;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		//$Category Special Actors (TCOTD2)
		//$Title Exclamation Mark (greyed out on touching)
		//$Sprite EXCLA0
		Radius 40;
		Height 64;
		Scale 1.35;
		RenderStyle "Translucent";
		Alpha 0.75;
		+FORCEXYBILLBOARD
		+SPECIAL
		+NOGRAVITY
		+NOCLIP
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void Touch(Actor other)
	{
		if (bDormant || touched)
		{
			return;
		}
		else if (other && other is "TCOTDPlayer")
		{
			// only the player who touched it sees it as inactive
			let pmo = TCOTDPlayer(other);
			let p = pmo.player;
			if (players[consoleplayer] == p)
			{
				SetStateLabel("Touched");
				touched = true;
			}
		}
	}

	override void Activate(Actor activator)
	{
		bDormant = false;
		SetStateLabel("Active");
	}

	override void Deactivate(Actor activator)
	{
		bDormant = true;
		SetStateLabel("Inactive");
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
	Active:
		EXCL A 1 Bright
		{
			// it was already touched before
			if (touched)
			{
				SetStateLabel("TouchedLoop");
			}
		}
		Loop;
	Inactive:
		TNT1 A -1;
		Stop;
	Touched:
		EXCL A 35 Bright
		{
			A_SpawnItemEx("TCOTDExMarkTouchedFX");
			A_StartSound("misc/p_pkup");
		}
	TouchedLoop:
		EXCL B -1;
		Stop;
	}
}

//===========================================================================
//
// TCOTDExMarkNoTouch
// Does not activate when touched; must be activated manually via scripts
//
//===========================================================================

class TCOTDExMarkNoTouch : TCOTDExMark
{
	Default
	{
		//$Title Exclamation Mark (no touch activation)
		Radius 8;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void Touch(Actor other)
	{
		return;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	static void TouchFromACS(Actor activator, int markTID)
	{
		//Console.Printf("%s, %d", activator.player.GetUserName(), markTID);
		if (markTID > 0)
		{
			let it = Level.CreateActorIterator(markTID);
			Actor mo;
			while (mo = it.Next())
			{
				let mark = TCOTDExMarkNoTouch(mo);

				if (mark.touched)
					continue;

				// only the script's activator player sees it as inactive
				let pmo = TCOTDPlayer(activator);
				let p = pmo.player;
				if (players[consoleplayer] == p)
				{
					mark.SetStateLabel("Touched");
					mark.touched = true;
				}
			}
		}
	}
}

//===========================================================================
//
// TCOTDExMarkTouchedFX
//
//===========================================================================

class TCOTDExMarkTouchedFX : TCOTDSimpleActor
{
	mixin TCOTDClientsideOnlyMixin;

	Default
	{
		RenderStyle "Shaded";
		StencilColor "FF FF FF";
		FloatBobPhase 0;
		+NOINTERACTION
		+FORCEXYBILLBOARD
	}

	States
	{
	Spawn:
		EXCL A 1 Bright
		{
			A_SetScale(Scale.X * 1.05, Scale.Y * 1.02);
			A_FadeOut(0.0225);
		}
		Loop;
	}
}
