// Copyright 2017 - 2020 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// SpriteShadow
//
// Sprite-Based Actor Shadows
//
// Written by Nash Muhandes
//
// Customized version made for TCOTD:A
//
//===========================================================================


//===========================================================================
//
//
//
//===========================================================================

class SpriteShadow : Actor
{
	Actor caster;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		RenderStyle "Stencil";
		StencilColor "Black";
		FloatBobPhase 0;
		+DONTSPLASH
		+NOBLOCKMAP
		+NOINTERACTION
		+NOTONAUTOMAP
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void Tick(void)
	{
		if (caster)
		{
			// filter shadow from yourself
			bool selfShadow =
			(
				caster is "PlayerPawn" &&
				players[consoleplayer].camera &&
				players[consoleplayer].camera == caster &&
				!(caster.player.cheats & CF_CHASECAM)
			);

			if (bInvisible = selfShadow)
			{
				// if self shadow, return early because it's pointless to keep processing from here
				return;
			}

			// match caster's sprites
			Sprite = caster.Sprite;
			Frame = caster.Frame;
			Angle = caster.Angle;
			Alpha = caster.Alpha * 0.5;
			Scale.X = caster.Scale.X;
			Scale.Y = caster.Scale.Y * 0.24;
			if (caster.GetRenderStyle() == STYLE_OptFuzzy)
			{
				A_SetRenderStyle(Alpha, STYLE_OptFuzzy);
			}
			else if (caster.GetRenderStyle() == STYLE_Fuzzy)
			{
				A_SetRenderStyle(Alpha, STYLE_Fuzzy);
			}
			bInvisible = caster.bInvisible;
			bVisibilityPulse = caster.bVisibilityPulse;

			// Backported FindOnMObj check from Blade of Agony
			double shadowPosZ = caster.FloorZ;
			double shadowZDist = 128.0;
			if (caster.Pos.Z > FloorZ)
			{
				Actor onmo = FindOnMobj(caster, shadowZDist);
				if (onmo && onmo.Pos.Z + onmo.Height > FloorZ)
				{
					shadowPosZ = onmo.Pos.Z + onmo.Height;
				}
			}

			// update shadow position
			Vector3 sPos = (caster.Pos.X, caster.Pos.Y, shadowPosZ);
			if (players[consoleplayer].camera)
			{
				sPos.X += cos(players[consoleplayer].camera.Angle) * 0.01;
				spos.Y += sin(players[consoleplayer].camera.Angle) * 0.01;
			}

			// SetOrigin can get expensive, so let's do things ourselves
			LinkContext ctx;
			UnlinkFromWorld(ctx);
			SetXYZ(sPos);
			LinkToWorld(ctx);
		}
		else
		{
			Destroy();
			return;
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	// [Backported from Blade of Agony]
	// Finds a walkable actor underneath 'origin' actor, within 'range' height distance...
	Actor FindOnMObj(Actor origin, double range = 0)
	{
		BlockThingsIterator it = BlockThingsIterator.Create(origin, 1);

		while (it.Next())
		{
			let mo = it.thing;

			bool invalid =
			(
				// Ignore self
				mo == self ||

				// Ignore non-solids
				!mo.bSolid ||

				// Ignore monsters
				mo.bIsMonster ||

				// Ignore if outside of hitbox footprint
				abs(mo.Pos.X - origin.Pos.X) > origin.Radius + mo.Radius ||

				//  (using square hitboxes)
				abs(mo.Pos.Y - origin.Pos.Y) > origin.Radius + mo.Radius
			);

			if (invalid) continue;

			if (origin.Pos.Z >= mo.Pos.Z + mo.Height &&
				origin.Pos.Z <= mo.Pos.Z + mo.Height + range)
			{
				return mo;
			}
		}

		return NULL;
	}
}

//===========================================================================
//
//
//
//===========================================================================

class SpriteShadowCaster
{
	Actor mo;
	Actor shadow;
	bool hasShadow;
}

class SpriteShadowThinker : Thinker
{
	Array<SpriteShadowCaster> shadowCasters;
	transient CVar cvEnabled;
	transient CVar cvShadowDistance;
	bool isSavingGame;

	// Never enable shadows on these actors
	Array<String> blacklistedActors;

	// Always enable shadows on these actors
	Array<String> whiteListedActors;

	override void Tick(void)
	{
		if (!cvEnabled || !cvShadowDistance)
		{
			if (!(cvEnabled = CVar.GetCVar("tcotd2_spriteshadow_enabled", players[consoleplayer])) ||
				!(cvShadowDistance = CVar.GetCVar("tcotd2_spriteshadow_distance", players[consoleplayer])))
			{
				ThrowAbortException("Cannot tick SpriteShadowThinker due to missing CVar references!");
			}
		}

		double shadowDistance = cvShadowDistance.GetFloat();
		shadowDistance = clamp(shadowDistance, 256.0, 8192.0);

		if (isSavingGame)
		{
			isSavingGame = false;
			return;
		}

		// disable SpriteShadows
		if (!cvEnabled.GetBool())
		{
			DestroySpriteShadows();
			return;
		}

		// get the currently viewed camera
		Actor camera = players[consoleplayer].camera;
		if (!camera) return;

		BlockThingsIterator it = BlockThingsIterator.Create(camera, shadowDistance);
		while (it.Next())
		{
			let other = it.Thing;
			if (!other) continue;

			// check the whitelist
			bool whitelisted = false;
			for (int l = 0; l < whiteListedActors.Size(); l++)
			{
				if (other.GetClassName() == whiteListedActors[l])
				{
					whitelisted = true;
					break;
				}
			}

			// check the blacklist
			bool blacklisted = false;
			for (int l = 0; l < blacklistedActors.Size(); l++)
			{
				if (other.GetClassName() == blacklistedActors[l])
				{
					blacklisted = true;
					break;
				}
			}

			bool valid =
			(
				other.bIsMonster ||
				other is "PlayerPawn" ||
				whitelisted
			);

			// actor is invalid, move to the next one
			if (!valid || blacklisted) continue;

			// shadow caster is close
			// use (distance - 1) so that it stays within the BlockThingsIterator's range
			bool isClose = abs(other.Pos.X - it.Position.X) < (shadowDistance - 1.0) && abs(other.Pos.Y - it.Position.Y) < (shadowDistance - 1.0);
			if (isClose)
			{
				// prevent duplicate entries in the array
				bool isDuplicate = false;
				int i = 0;
				for (i = 0; i < shadowCasters.Size() && !isDuplicate; i++)
				{
					if (shadowCasters[i] && shadowCasters[i].mo == other)
					{
						isDuplicate = true;
					}
				}

				// add the actor into the shadow caster array
				if (!isDuplicate)
				{
					AddSpriteShadowCaster(other);
				}
			}
			// shadow caster is too far away
			else
			{
				RemoveSpriteShadowCaster(other);
			}
		}
		//Console.Printf("%d shadows", shadowCasters.Size());
	}

	void BuildLists(void)
	{
		blacklistedActors.Clear();
		whiteListedActors.Clear();

		for (int z = 0; z < 2; z++)
		{
			name lumpName;
			if (z == 0) lumpName = 'SHADOW_X';
			else if (z == 1) lumpName = 'SHADOW_O';

			int lump = -1;
			while (-1 != (lump = Wads.FindLump(lumpName, lump + 1)))
			{
				String data = Wads.ReadLump(lump);

				// split lines
				Array<String> lines;
				lines.Clear();
				data.Split(lines, "\n", TOK_KEEPEMPTY);

				// strip comments
				for (int i = 0; i < lines.Size(); i++)
				{
					if (lines[i].IndexOf("//") == 0)
					{
						continue;
					}
					else
					{
						if (lumpName == 'SHADOW_X')
							blacklistedActors.Push(lines[i]);
						else if (lumpName == 'SHADOW_O')
							whiteListedActors.Push(lines[i]);
					}
				}
			}

			// delete that weird character that gets added at the end
			if (lumpName == 'SHADOW_X')
			{
				for (int i = 0; i < blacklistedActors.Size(); i++)
				{
					blacklistedActors[i].Truncate(blacklistedActors[i].Length() - 1);
				}
			}
			else if (lumpName == 'SHADOW_O')
			{
				for (int i = 0; i < whiteListedActors.Size(); i++)
				{
					whiteListedActors[i].Truncate(whiteListedActors[i].Length() - 1);
				}
			}
		}
	}

	void AddSpriteShadowCaster(Actor mo)
	{
		let sc = new("SpriteShadowCaster");
		if (sc)
		{
			sc.mo = mo;

			// create the shadow actor
			if (!sc.hasShadow)
			{
				let shadow = SpriteShadow(Actor.Spawn("SpriteShadow", sc.mo.Pos, NO_REPLACE));
				if (shadow)
				{
					shadow.caster = sc.mo;
					sc.shadow = shadow;
					sc.hasShadow = true;
				}
			}

			shadowCasters.Push(sc);
		}
	}

	void RemoveSpriteShadowCaster(Actor mo)
	{
		for (int i = 0; i < shadowCasters.Size(); i++)
		{
			if (shadowCasters[i] && shadowCasters[i].mo == mo)
			{
				if (shadowCasters[i].shadow)
				{
					shadowCasters[i].shadow.Destroy();
				}
				shadowCasters.Delete(i);
				break;
			}
		}
	}

	void DestroySpriteShadows(void)
	{
		if (shadowCasters.Size() == 0) return;

		// kill all the shadows in this level
		shadowCasters.Clear();
		ThinkerIterator it = ThinkerIterator.Create("SpriteShadow");
		SpriteShadow shadow;
		while (shadow = SpriteShadow(it.Next()))
		{
			shadow.Destroy();
		}
	}

	void DoDestroy(void)
	{
		DestroySpriteShadows();
		Destroy();
	}
}

//===========================================================================
//
//
//
//===========================================================================

class SpriteShadowHandler : EventHandler
{
	SpriteShadowThinker sst;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void WorldLoaded(WorldEvent e)
	{
		if (!sst) sst = new("SpriteShadowThinker");
		sst.BuildLists();
	}

	override void WorldUnloaded(WorldEvent e)
	{
		if (sst)
		{
			sst.DoDestroy();
		}
	}

	override void WorldTick(void)
	{
		// do not serialize shadows
		if (gameaction == ga_savegame || gameaction == ga_autosave)
		{
			sst.isSavingGame = true;
			sst.DestroySpriteShadows();
		}
	}
}
