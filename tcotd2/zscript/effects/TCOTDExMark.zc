// Copyright 2020 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// Exclamation marks used to highlight important interactions in the world
//
//===========================================================================

class TCOTDExMark : TCOTDDietActor
{
	bool touched;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		//$Category Special Actors (TCOTD2)
		//$Title Exclamation Mark (greyed out on touching)
		//$Sprite EXCLA0
		Radius 32;
		Height 64;
		Scale 1.35;
		RenderStyle "Translucent";
		Alpha 0.75;
		FloatBobPhase 0;
		+FORCEXYBILLBOARD
		+SPECIAL
		+NOGRAVITY
	}

	// FloatBobPhase must be 0, otherwise multiplayer will desync.

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void Touch(Actor other)
	{
		if (bDormant || touched)
			return;
		else if (other && other is "PlayerPawn")
		{
			// only the player who touched it sees it as inactive
			let pmo = PlayerPawn(other);
			let p = pmo.player;
			if (players[consoleplayer] == p)
			{
				SetStateLabel("Touched");
				touched = true;
			}
		}
	}

	override void Activate (Actor activator)
	{
		bDormant = false;
		SetStateLabel("Active");
	}

	override void Deactivate (Actor activator)
	{
		bDormant = true;
		SetStateLabel("Inactive");
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
	Active:
		EXCL A 1 Bright
		{
			// it was already touched before
			if (touched)
			{
				SetStateLabel("TouchedLoop");
			}
		}
		Loop;
	Inactive:
		TNT1 A -1;
		Stop;
	Touched:
		EXCL A 35 Bright
		{
			A_SpawnItemEx("TCOTDExMarkTouchedFX");
			A_StartSound("misc/p_pkup");
		}
	TouchedLoop:
		EXCL B -1;
		Stop;
	}
}


class TCOTDExMarkTouchedFX : TCOTDDietActor
{
	Default
	{
		RenderStyle "Shaded";
		StencilColor "FF FF FF";
		FloatBobPhase 0;
		+NOINTERACTION
		+FORCEXYBILLBOARD
	}

	States
	{
	Spawn:
		EXCL A 1 Bright
		{
			A_SetScale(Scale.X * 1.05, Scale.Y * 1.02);
			A_FadeOut(0.0225);
		}
		Loop;
	}
}
