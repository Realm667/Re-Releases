// Copyright 2008 - 2020 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// This is a stripped down version of the precipitation system from Bumi, an
// all-encompassing real-time weather and time cycle solution for GZDoom by
// Nash Muhandes.
// Bumi is (C) 2008 - 2020 Nash Muhandes
//
//===========================================================================

class TCOTDSnowParticle : Actor
{
	mixin TCOTDClientSideOnlyMixin;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		RenderStyle "Translucent";
		Alpha 0;
		Scale 0.6;
		+NOINTERACTION
		+DONTSPLASH
		+FORCEXYBILLBOARD
		+INVISIBLEINMIRRORS
		-SOLID
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void PostBeginPlay(void)
	{
		bool isIndoors = ceilingpic != skyflatnum;
		bool isNotCPlayer = (Tracer && !Tracer.CheckLocalView(consoleplayer));
		if (isIndoors || isNotCPlayer)
		{
			Destroy();
			return;
		}
		Super.PostBeginPlay();
	}

	override void Tick(void)
	{
		if (Vel != (0, 0, 0))
			SetXYZ(Vec3Offset(Vel.X, Vel.Y, Vel.Z));

		if (tics == -1)
			return;
		else if (--tics <= 0)
			SetState(CurState.NextState);

		if (Pos.Z <= FloorZ)
			Destroy();
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		SNOW A 1 NoDelay
		{
			if (!Level.IsPointInLevel(Pos))
			{
				Destroy();
				return ResolveState(NULL);
			}

			A_FadeIn(0.04);
			if (Alpha >= 0.75 && GetAge() > 50)
			{
				return ResolveState("FadeOut");
			}
			return ResolveState(NULL);
		}
		Loop;
	FadeOut:
		"####" "#" 1 A_FadeOut(0.035);
		Loop;
	}
}

