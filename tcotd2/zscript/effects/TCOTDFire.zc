// Copyright 2020 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// Base class for fire effects
//
//===========================================================================

class TCOTDFire : TCOTDParticle
{
	mixin TCOTDClientSideOnlyMixin;

	bool fadedIn;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		RenderStyle "Add";
		Alpha 0;
		+ROLLSPRITE
		+ROLLCENTER
		+BRIGHT
		+FORCEXYBILLBOARD
		+NOINTERACTION
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	static void SpawnEmbers(Actor self, double zOfs = 0, double defRange = 350., double xyOfsRange = 20.)
	{
		if (!self)
			return;

		if (self.CheckRange(defRange, true))
			return;

		let ember = self.Spawn("TCOTDEmber", self.Pos, NO_REPLACE);
		if (ember)
		{
			double ox, oy, oz;
			double vx, vy, vz;
			vx = frandom[rnd_SpawnEmber](-0.12, 0.12);
			vy = frandom[rnd_SpawnEmber](-0.12, 0.12);
			vz = frandom[rnd_SpawnEmber](0.5, 1.0);
			ox = frandom[rnd_SpawnEmber](-xyOfsRange, xyOfsRange);
			oy = frandom[rnd_SpawnEmber](-xyOfsRange, xyOfsRange);
			oz = frandom[rnd_SpawnEmber](5.0, 10.0);
			ember.SetOrigin(ember.Vec3Offset(ox, oy, oz + zOfs), false);
			ember.Vel = (vx, vy, vz);
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	SpawnLoop:
		"####" "#" 0
		{
			bSpriteFlip = RandomPick[rnd_FireSpawn](false, true);
			A_SetRoll(frandom[rnd_FireSpawn](0.0, 360.0));
		}
		"####" "#" 1
		{
			int rollDir = bSpriteFlip ? -1 : 1;
			double rollSpeed = 2.33 * rollDir;
			A_SetRoll(Roll + rollSpeed, SPF_INTERPOLATE);

			if (!fadedIn)
			{
				if (Alpha < 0.5)
				{
					A_FadeIn(0.1);
				}
				else
				{
					fadedIn = true;
				}
			}

			if (fadedIn)
			{
				A_SetScale(Scale.X * 0.98);
				A_FadeOut(0.025);
			}
		}
		Goto SpawnLoop + 1;
	}
}
