/*
* TCOTD2 Game Code
* Copyright (C) 2020 - 2023  Nash Muhandes
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//===========================================================================
//
// TCOTDEmptyCasing
// Empty casings from fired weapons
//
//===========================================================================

class TCOTDEmptyCasing : Actor abstract
{
	int8 rollDir;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		Radius 4;
		Height 8;
		Mass 5;
		Speed 1.2;
		Gravity 0.44;
		BounceType 'Doom';
		Projectile;
		+INTERPOLATEANGLES
		+ROLLSPRITE
		+ROLLCENTER
		+FORCEXYBILLBOARD
		+DONTSPLASH
		-SOLID
		-NOGRAVITY
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void BeginPlay(void)
	{
		A_SetRoll(frandom[rnd_EmptyCasingSpawn](0.0, 360.0));
		A_SetScale(0.08);
		A_SetSpeed(Default.Speed + frandom[rnd_EmptyCasingSpawn](0.0, 1.0));
		bouncefactor *= frandom[rnd_EmptyCasingSpawn](0.2, 1.0);
		rollDir = RandomPick[rnd_EmptyCasingSpawn](-1, 1);
		Super.BeginPlay();
	}

	override void Tick(void)
	{
		Super.Tick();
		if (!bNoTimeFreeze && isFrozen())
			return;

		// alter physics when underwater
		if (WaterLevel > 2)
		{
			bNoGravity = false;
			bNoBounceSound = true;
			bCanBounceWater = true;
			Vel.X *= 0.9;
			Vel.Y *= 0.9;
			Vel.Z -= 0.2;
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		"####" A 1 NoDelay
		{
			A_SetRoll(Roll + (15.0 * rollDir), SPF_INTERPOLATE);
			if (Scale.X < 0.15)
			{
				A_SetScale(Scale.X + 0.0025);
			}
		}
		Loop;
	Death:
		"####" A 1050
		{
			bMoveWithSector = true;
		}
		Stop;
	}
}

//===========================================================================
//
// TCOTDEmptyCasingShell
//
//===========================================================================

class TCOTDEmptyCasingShell : TCOTDEmptyCasing
{
	Default
	{
		BounceSound "casing/shell";
	}

	States
	{
	Spawn:
		ESHL A 0;
		Goto Super::Spawn;
	}
}

//===========================================================================
//
// TCOTDEmptyCasingBullet
//
//===========================================================================

class TCOTDEmptyCasingBullet : TCOTDEmptyCasing
{
	Default
	{
		Speed 2.0;
		Gravity 0.7;
		BounceSound "casing/bullet";
	}

	States
	{
	Spawn:
		EBUL A 0;
		Goto Super::Spawn;
	}
}
