// Copyright 2020 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// Switchable decorations that can be toggled with the +use button
//
//===========================================================================

class TCOTDInteractiveSwitchableDecoration : SwitchableDecoration
{
	override void PostBeginPlay(void)
	{
		Super.PostBeginPlay();

		bDormant = (SpawnFlags & MTF_DORMANT);
	}

	override bool Used(Actor user)
	{
		Toggle();

		// execute the things's special
		if (Special)
		{
			A_CallSpecial(Special, Args[0], Args[1], Args[2], Args[3], Args[4]);
		}

		return false;
	}

	void Toggle(void)
	{
		if (bDormant)
		{
			Activate(self);
		}
		else
		{
			Deactivate(self);
		}

		bDormant = !bDormant;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
	Active:
		TNT1 A -1;
		Loop;
	Inactive:
		TNT1 A -1;
		Loop;
	}
}
