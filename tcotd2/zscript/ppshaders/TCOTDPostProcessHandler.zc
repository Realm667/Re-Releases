// Copyright 2020 - 2023 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
//
//
//===========================================================================

class TCOTDPostProcessHandler : StaticEventHandler
{
	ui PlayerInfo plr;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void RenderOverlay(RenderEvent e)
	{
		if (!plr)
			plr = players[consoleplayer];

		if (plr)
		{
			UnderwaterWarp(e);
			HeatHaze(e);
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	ui void UnderwaterWarp(RenderEvent e)
	{
		if ((!multiplayer && Menu.GetCurrentMenu()) || paused || TCOTDGameplayStatics.IsConsoleVisible())
			return;

		bool enabled =
		(
			CVar.GetCVar("tcotd2_underwaterwarp", plr).GetBool() &&
			plr.mo.WaterLevel >= 3
		);

		PPShader.SetEnabled("underwaterwarpshader", enabled);

		// set the player's timer up correctly (more-than-1-tick precision)
		PPShader.SetUniform1f("underwaterwarpshader", "timer", gametic + e.FracTic);
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	ui void HeatHaze(RenderEvent e)
	{
		PPShader.SetEnabled("heatshader", true);
		PPShader.SetUniform1f("heatshader", "timer", gametic + e.FracTic);
		PPShader.SetUniform1f("heatshader", "amount", double(plr.mo.CountInv("TCOTDHeatHazeAmount")));
	}
}
