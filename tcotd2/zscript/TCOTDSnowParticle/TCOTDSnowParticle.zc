// Copyright 2020 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
//
//
//===========================================================================

class TCOTDSnowParticle : TCOTDDietActor
{
	const SNOW_ALPHA = 0.8;
	const SNOW_VELOCITY_XY_BASE = 0.55;
	const SNOW_FADE_SPEED = 0.045;
	const SNOW_FADEOUT_START = 350;

	double vx, vy, vz;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		RenderStyle "Translucent";
		Alpha 0;
		Gravity 0;
		FloatBobPhase 0;
		+DONTSPLASH
		+FORCEXYBILLBOARD
		-SOLID
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void BeginPlay(void)
	{
		vx += frandom(-SNOW_VELOCITY_XY_BASE, SNOW_VELOCITY_XY_BASE);
		vy += frandom(-SNOW_VELOCITY_XY_BASE, SNOW_VELOCITY_XY_BASE);
		vz += frandom(-2.0, -1.0);
		Super.BeginPlay();
	}

	override void PostBeginPlay(void)
	{
		// destroy precipitation from other players
		if (tracer && !tracer.CheckLocalView(consoleplayer))
		{
			Destroy();
			return;
		}

		if (ceilingpic != skyflatnum)
		{
			Destroy();
			return;
		}

		A_SetScale(frandom(0.3, 0.6));

		Super.PostBeginPlay();
	}

	override void Tick()
	{
		Super.Tick();
		if (!bNoTimeFreeze && isFrozen()) return;

		// set velocity. SetXYZ is cheaper than SetOrigin
		SetXYZ(Vec3Offset(vx, vx, vz));

		// collided with the ground
		if (Pos.Z <= FloorZ)
		{
			Destroy();
			return;
		}

		// collided with water
		UpdateWaterLevel();
		if (waterlevel > 0)
		{
			Destroy();
			return;
		}

		// end of lifetime
		if (GetAge() > (35 * 20))
		{
			Destroy();
			return;
		}

		// fade in
		if (GetAge() < SNOW_FADEOUT_START)
		{
			if (Alpha < SNOW_ALPHA)
			{
				Alpha += SNOW_FADE_SPEED;
			}
		}

		// fade out
		else
		{
			if (Alpha > 0)
			{
				Alpha -= SNOW_FADE_SPEED;
			}
			else
			{
				Destroy();
				return;
			}
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		SNOW A -1;
		Stop;
	}
}

